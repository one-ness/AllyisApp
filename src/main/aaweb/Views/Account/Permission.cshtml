@using AllyisApps.ViewModels
@using AllyisApps.Services.Account
@model PermissionsManagementViewModel

@{
    ViewBag.TitleBar = AllyisApps.Resources.Views.Account.Strings.Permissions;
    Layout = "~/Views/Shared/_Layout.cshtml";


    int productId = Model.TimeTrackerId;
    var query = (from entry in Model.Subscriptions where entry.ProductId == productId select entry).FirstOrDefault();
    bool hasTimeTracker = query != null ? true : false;
}

@Html.AntiForgeryToken()

<div id="permissions-wrap">
    <div id="flex-wrap">
        <div id="source-col" class="panel panel-default">
            <div class="panel-heading">
                <h1 class="panel-title">@AllyisApps.Resources.Views.Account.Strings.Users</h1>
                <div class="controls">
                    <select id="filter-dropdown" class="form-control">
                        <option value="@Model.Filters.AllUsers.UsersValue()">@(AllyisApps.Resources.Views.Account.Strings.ResourceManager.GetString(Model.Filters.AllUsers.Name.Replace(" ", string.Empty) ?? Model.Filters.AllUsers.Name))</option>
                        <option value="@Model.Filters.UnassignedUsers.UsersValue()">@(AllyisApps.Resources.Views.Account.Strings.ResourceManager.GetString(Model.Filters.UnassignedUsers.Name.Replace(" ", string.Empty) ?? Model.Filters.UnassignedUsers.Name))</option>
                        @foreach (FilterGroup group in Model.Filters.FilterGroups)
                        {
                            string gOptGroup = group.OptionGroup;
                            if (!(gOptGroup == "TimeTracker" && !hasTimeTracker)) // don't display option group for TimeTracker if Org doesn't have TimeTracker
                            {
                                <optgroup label="@(AllyisApps.Resources.Views.Account.Strings.ResourceManager.GetString(gOptGroup.Replace(" ", string.Empty) ?? gOptGroup))">
                                    @foreach (AllyisApps.ViewModels.Filter filt in group.Filters)
                                    {
                                        <option value="@filt.UsersValue()">@(AllyisApps.Resources.Views.Account.Strings.ResourceManager.GetString(filt.Name.Replace(" ", string.Empty) ?? filt.Name))</option>
}
                                </optgroup>
}
                        }
                    </select>

                    <input id="user-search" type="text" placeholder=@AllyisApps.Resources.Views.Account.Strings.UserSearchPlaceholder class="form-control" />
                </div>
            </div>
            <div id="user-list" class="list-group list-group-swap">
                @foreach (UserPermissionsManagement user in Model.UserPermissions)
                {
                    <div class="list-group-item">
                        <input type="checkbox" data-name="@user.UserName" id="@user.UserId" data-search="@user.UserName" />
                        <label for="@user.UserId">@user.UserName</label>
                        @*<i onclick="return getinfo(this)" class="fa fa-info-circle fa-lg text-info"></i>*@
                    </div>}
                @* There was a display issue on chrome where a useless scrollbar would appear if the last element was not included (or didn't display).
                    This makes sure the final element is always included and displays practically invisibly. *@
                <a class="list-group-item included" style="visibility: hidden; height: 1px; border: 0;"></a>
            </div>
        </div>
        <div class="next-up">
            <i class="fa fa-arrow-right text-muted"></i>
        </div>
        <div id="target-col" class="panel panel-default">
            <div class="panel-heading">
                <h1 class="panel-title">@AllyisApps.Resources.Views.Account.Strings.Actions</h1>
            </div>
            <div style="padding:0;" class="panel-body">
                <div id="actions" class="list-group">
                    <div class="list-group-item list-group-swap">
                        @AllyisApps.Resources.Views.Account.Strings.Organization<div class="list-group-item">
                            <input type="checkbox" data-value="orgRoleTarget_@((int)OrganizationRole.Owner)" id="OrgSetOwner" />
                            <label for="OrgSetOwner">@AllyisApps.Resources.Views.Account.Strings.SetOwner</label>
                        </div><div class="list-group-item">
                            <input type="checkbox" data-value="orgRoleTarget_@((int)OrganizationRole.Member)" id="OrgSetMember" />
                            <label for="OrgSetMember">@AllyisApps.Resources.Views.Account.Strings.SetMember</label>
                        </div><div class="list-group-item">
                            <input type="checkbox" data-value="orgRoleTarget_-1" id="OrgRemove" class="master-check" />
                            <label for="OrgRemove">@AllyisApps.Resources.Views.Account.Strings.RemoveOrg</label>
                        </div>
                    </div>
                    @if (hasTimeTracker)
                    {
                        <div class="list-group-item list-group-swap">
                            @AllyisApps.Resources.Views.Account.Strings.TimeTracker<div class="list-group-item">
                                <input type="checkbox" data-value="timeTrackerRoleTarget_@((int)ProductRole.TimeTrackerManager)" id="TTSetManager" />
                                <label for="TTSetManager">@AllyisApps.Resources.Views.Account.Strings.SetManager</label>
                            </div><div class="list-group-item">
                                <input type="checkbox" data-value="timeTrackerRoleTarget_@((int)ProductRole.TimeTrackerUser)" id="TTSetUser" />
                                <label for="TTSetUser">@AllyisApps.Resources.Views.Account.Strings.SetUser</label>
                            </div><div class="list-group-item">
                                <input type="checkbox" data-value="timeTrackerRoleTarget_-1" id="TTRemove" />
                                <label for="TTRemove">@AllyisApps.Resources.Views.Account.Strings.RemoveFromSubscription</label>
                            </div>
                        </div>}
                </div>
            </div>
            <div class="panel-footer">
                <div class="form-group allyis-action-buttons status-root" id="do-it-button">
                    <br />
                    @Html.ActionLink(AllyisApps.Resources.Views.Account.Strings.Cancel, "Manage", "Account", null, new { @class = "btn btn-default" })
                    <input type="submit" value="@AllyisApps.Resources.Views.Account.Strings.Save" class="btn btn-primary" id="actually-do-it" />
                    @*
                        <i class="status submitting fa fa-spinner fa-spin"></i>
                        <i class="status done fa fa-check"></i>
                        <i class="status error fa fa-warning"></i>
                    *@
                </div>

            </div>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">


        //utility from http://stackoverflow.com/questions/18405736/is-there-a-c-sharp-string-format-equivalent-in-javascript
        if (!String.prototype.format) {
            String.prototype.format = function() {
                var args = arguments;
                return this.replace(/{(\d+)}/g, function(match, number) {
                    return typeof args[number] != 'undefined'
                      ? args[number]
                      : match
                    ;
                });
            };
        }


        var cur_filter = []
        var cur_search = ""

        var all_user_$ele = []

        var user_meta = @Html.Raw(Model.UserMetaData);

        // set the data for a dropdown filter (1,3,4,5,7,9)
        function makeFilter(option, list) {
            var $option = $(option);
            $option.attr("value", list);
        }

        // generate the filters dropdown from filter-list data
        function generateFilters($dropdown, filter_list) {
            $dropdown.html("");
            _.each(filter_list, function(it) {
                if(it.optgroup) {
                    var element = document.createElement("optgroup")
                    element.setAttribute("label", it.optgroup)
                    $dropdown.append(element);
                    var $parent = $(element);
                    _.each(it.filters, function(it2){
                        var element = document.createElement("option")
                        element.text = it2.name
                        $parent.append(element);
                        makeFilter(element, it2.list)
                    })
                } else {
                    var element = document.createElement("option")
                    element.text = it.name
                    $dropdown.append(element);
                    makeFilter(element, it.list)
                }
            })
        }

        // set the checked class on the given element
        function set_checked_class($ele) {
            if($ele.find("input[type='checkbox']:checked").length > 0) {
                $ele.addClass("checked");
            } else {
                $ele.removeClass("checked");
            }
        }

        // clear the included/excluded classes on all_user_$ele
        // ensure checked classes are up to date on all_user_$ele
        function clear_filter() {
            _.each(all_user_$ele, function($ele) {
                $ele.removeClass("included").addClass("excluded");
                set_checked_class($ele);
            })
        }

        // set the included/excluded classes on all_user_$ele according to cur_filter and cur_search
        // ensure checked classes are up to date on all_user_$ele
        function set_filter() {
            if(_.isEmpty(cur_filter[0])) return;
            _.each(cur_filter, function(val) {
                var meta = user_meta[val];

                var metaVal = _.values(meta)[1].toLowerCase();
                var searchVal = cur_search.toLowerCase();

                if(metaVal.search(searchVal) > -1) {
                    meta.$ele.addClass("included").removeClass("excluded");
                }
                set_checked_class(meta.$ele);
            })
        }

        // perform filtering
        function do_filter() {
            clear_filter();
            set_filter();
        }

        // collect the list of elements into all_user_$ele and user_meta
        function collect_elements() {
            $("#user-list div").each(function(){
                var $ele = $(this);
                all_user_$ele.push($ele);
                var id = $ele.find("input[type='checkbox']").attr("id");
                user_meta[id] = user_meta[id] || {};
                user_meta[id].$ele = $ele;
                $ele.addClass("included");
            })
        }

        function do_it_form_submit() {
            var form = $(document.createElement("form")).attr({"method": "POST", "action": "ManagePermissions"});
            var data = JSON.stringify(do_it_gather_data());
            $(document.createElement("input")).attr({ "type": "hidden", "name": "data", "value": data}).appendTo(form);
            form.appendTo(document.body).submit();
        }

        //// handle the submission of data
        //function do_it_submit() {
        //    var data = do_it_gather_data();
        //    //data.__RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val();
        //    var status = $("#do-it .status-root");
        //    status.removeClass("error").removeClass("done").addClass("set submitting");
        //    $.ajax({
        //        url: "ManagePermissions",
        //        type: "POST",
        //        contentType: 'application/json; charset=utf-8',
        //        data: JSON.stringify(data),
        //        dataType: "json",
        //        timeout: 1000
        //    }).done(function(res) {
        //        status.removeClass("error").removeClass("submitting").addClass("done");
        //        do_it_show_res(res);
        //        if(res.Status && res.Status != "failure" && res.Status != "error" )
        //        {
        //            do_it_clear_inputs();
        //            do_it_close();
        //        }

        //    }).error(function() {
        //        status.removeClass("done").removeClass("submitting").addClass("error");
        //        do_it_show_res({Result: "Request timed out. Please try again in a few moments.", Results: []});
        //    })
        //}

        //function do_it_show_res(res) {
        //    //var $log = $("#do-it-summary ul.list-group")
        //    var $log = $("#permissions-alerts");
        //    var ele_top = $(document.createElement("div"));
        //    do_it_show_res_clear_log($log);
        //    if(res.Result && !_.isEmpty(res.Result)) {
        //        do_it_show_res_add($log, res.Result);
        //    }
        //    _.each(res.Results, function(result) {
        //        do_it_show_res_add($log, result);
        //    })
        //}

        //function do_it_show_res_clear_log($log) {
        //    $log.html("");
        //}

        //var do_it_show_res_class_map = {
        //    success: "alert-success",
        //    partial: "alert-warning",
        //    failure: "alert-danger",
        //    error: "alert-danger"
        //}

        //function do_it_show_res_add($log, entry) {
        //    var $el = $(document.createElement("div"));
        //    $el.addClass("alert");
        //    var text = ""
        //    // collect a LI string
        //    if(_.isObject(entry)) {
        //        $el.addClass(do_it_show_res_class_map[entry.ActionStatus] || "")
        //        var lis = _.reduce(entry.Users, function(memo, obj) {
        //            return "{0}<li>{1}<span class='err-msg'>{2}</span></li>".format(
        //              memo, obj.Name, obj.Message)
        //        }, "")
        //        text = "<span class='count'>{0}/{1}</span> <span class='msg'>{2}</span><ul>{3}</ul>".format(
        //          entry.AffectedUserCount, entry.TotalUserCount, entry.ActionText, lis)
        //    } else {
        //        // TODO: Change earlier handling of entry for full success and partial success to
        //        // render to objects with appropriate entry.ActionStatus attribute
        //        $el.addClass("alert-info");
        //        text = entry.toString();
        //    }
        //    $el.append(text);
        //    $log.append($el);
        //}

        // do_it_submit-helper. Gathers data from the inputs and converts it to a usable form.
        function do_it_gather_data() {
            var checked_actions = _.map(
              $("#actions input[type='checkbox']:checked"),
              function(e){
                  return $(e).attr("data-value")
              })
            var checked_users = _.map(
              $("#user-list input[type='checkbox']:checked"),
              function(e){
                  var $e = $(e);
                  return { userid: $e.attr("id"), name: $e.attr("data-name") }
              })
            var result = {}
            result.SelectedUsers = checked_users;
            result.SelectedActions =  {}
            _.each(checked_actions, function(e) {
                var split = e.split("_");
                var category = split[0];
                var value = split[1];
                result.SelectedActions[category] = value;
            })
            return result;
        }

        //function do_it_clear_inputs() {
        //    $("#user-list input[type='checkbox']:checked").attr("checked",false).attr("disabled", false);
        //    $("#actions input[type='checkbox']").attr("checked",false).attr("disabled", false);
        //    $('#filter-dropdown');
        //    do_filter();
        //}

        @*function do_it_close() {
            window.location.href='@Url.Action("Manage","Account")';
        }*@


        //// prep
        $(document).ready(function() {
            //// prep for filtering
            collect_elements();

            //// for dropdown filtering
            var $dropdown = $("#filter-dropdown");
            //generateFilters($dropdown, filters);
            $dropdown.change(function() {
                var value = $dropdown.val().split(",");
                cur_filter = value;
                do_filter();
            })
            $dropdown.change();

            //// for user search filtering
            var $usersearch = $("#user-search");
            $usersearch.keyup(_.debounce(function() {
                cur_search = $usersearch.val();
                do_filter();
            }, 200))

            //// for the actions
            // disable others in group when checked
            var action_checks = $("#actions > .list-group-swap > .list-group-item > input[type='checkbox']:not(.master-check)")
            action_checks.change(function(e) {
                var $this = $(this);
                if($this.is(':checked')) {
                    $this.closest(".list-group-swap").find(".list-group-item > input[type='checkbox']:not(:checked)").attr("disabled",true);
                } else {
                    $this.closest(".list-group-swap").find(".list-group-item > input[type='checkbox']:not(:checked)").attr("disabled",false);
                }
            })

            // disable all others when checked
            var master_checks = $("#actions > .list-group-swap > .list-group-item > input[type='checkbox'].master-check")
            master_checks.change(function(e) {
                var $this = $(this);
                if($this.is(':checked')) {
                    var checks = $this.closest(".list-group").find(".list-group-item > input[type='checkbox']");
                    checks.each(function(e) {
                        var $cur_this = $(this);
                        if($cur_this.context != $this.context) {
                            $cur_this.attr("disabled",true).attr("checked",false);
                        }
                    })
                } else {
                    $this.closest(".list-group").find(".list-group-item > input[type='checkbox']").attr("disabled",false);
                }
            })

            // gather data and submit
            $("#do-it-button input#actually-do-it").click(do_it_form_submit);
        });
    </script>
}