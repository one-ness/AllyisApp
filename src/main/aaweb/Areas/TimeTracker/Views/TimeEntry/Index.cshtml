@using AllyisApps.Areas.TimeTracker.Core;
@using AllyisApps.Areas.TimeTracker.Models;
@using AllyisApps.Services.BusinessObjects;
@using AllyisApps.Utilities;
@model TimeEntryOverDateRangeViewModel
@{
    DisplayHints.BreadcrumbNavPartialLocation = "~/Areas/TimeTracker/Views/Shared/_BreadcrumbNavPartial.cshtml";
    DisplayHints.LayoutThemeBundle = "~/Content/Timetracker";
    ViewBag.startOfWeek = Model.StartOfWeek;
    ViewBag.TitleBar = AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.TrackTime;
    Layout = "~/Views/Shared/_LayoutSidebar.cshtml";
}

<div class="row">
    @using (Html.BeginForm(ActionConstants.Index, ControllerConstants.TimeEntry, FormMethod.Get, htmlAttributes: new { @class = "form-inline col-xs-12", @style = "margin-bottom: 20px;" }))
    {
        <input id="UserId" name="UserId" type="hidden" value="@Model.EntryRange.UserId" />
        <input id="StartDate" name="StartDate" type="hidden" value="@Model.EntryRange.StartDate" />
        <input id="EndDate" name="EndDate" type="hidden" value="@Model.EntryRange.EndDate" />
        <div class="form-group pull-left" style="margin-bottom: 15px;">
            <a href="@Url.Action(ActionConstants.Export, ControllerConstants.TimeEntry, routeValues: new
                {
                    userId = Model.EntryRange.UserId,
                    startingDate = Model.EntryRange.StartDate,
                    endingDate = Model.EntryRange.EndDate
                })">
                @*<input type="button" value="Export" class="btn btn-primary">*@
                <span class="btn btn-primary" style="margin-right: 15px;">@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Export</span>
            </a>
        </div>
        <!-- Temp fix for Users button for smaller viewports -->
        <div class="form-group pull-right">
            <button type="button" class="btn btn-primary visible-xs" data-toggle="offcanvas" style="margin: 0 0 0 15px">@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Users</button>
        </div>
        @*To be moved to a separate settings page*@

        <div id="date-select" class="form-group pull-right">
            <div class="input-group">

                <div class="input-group-btn">
                    <a class="btn btn-primary" title=@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Previous
                       href="javascript: void(0);" onclick="return drp_prevWeek()">
                        <i class="fa fa-chevron-left"></i>
                    </a>
                    <a class="btn btn-primary" title=@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Current
                       href="@Url.Action(ActionConstants.Index, routeValues: new { userId = Model.EntryRange.UserId })">
                        <i class="glyphicon glyphicon-flash"></i>
                    </a>
                    <a class="btn btn-primary" title=@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Next
                       href="javascript: void(0);" onclick="return drp_nextWeek()">
                        <i class="fa fa-chevron-right"></i>
                    </a>

                </div>
                <input type="text" name="daterange" id="daterange" class="form-control" value="" />
                <div class="input-group-btn">
                    <input type="submit" value=@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.View class="btn btn-primary" style="width: 56px" />
                </div>
            </div>
        </div>
    }
</div>

@Html.Partial("_AjaxTimeEntries", Model.EntryRange)

@{ViewBag.SidebarToggleText = AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Details;
ViewBag.RenderSidebar = true;}
@if (Model.CanManage)
{
    ViewBag.SidebarToggleText = AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Users;
}

@section sidebar {
    <div class="panel panel-info" id="timesheet-summary">
        <div class="panel-heading">
            <h1 class="panel-title">@Model.CurrentUser.FirstName @Model.CurrentUser.LastName</h1>
        </div>

        <table class="table table-condensed">
            @foreach (ProjectHours ph in Model.ProjectHours)
            {
                <tr>
                    <td>
                        @ph.Project.ProjectName
                    </td>
                    <td>
                        @ph.GetHoursInHoursMinutes()
                    </td>
                </tr>
            }
            <tr>
                <td>
                    <strong>@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.Total</strong>
                </td>
                <td>
                    <strong>@Model.GrandTotal.GetHoursInHoursMinutes()</strong>
                </td>
            </tr>
        </table>
    </div>
    @if (Model.CanManage)
    {
        <div class="panel panel-info" id="TimeSheet-LockDate">
            <div class="panel-heading">
                <h1 class="panel-title">@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.LockDate</h1>
            </div>
            @using (Html.BeginForm(ActionConstants.SetLockDate, ControllerConstants.TimeEntry, FormMethod.Post))
            {
                <input id="UserId" name="UserId" type="hidden" value="@Model.EntryRange.UserId" />
                <input id="StartDate" name="StartDate" type="hidden" value="@Model.EntryRange.StartDate" />
                <input id="EndDate" name="EndDate" type="hidden" value="@Model.EntryRange.EndDate" />
                @Html.TextBoxFor(m => m.LockDate, new { name = "LockDate", id = "LockDate", @class = "form-control" })
                //<input type="text" name="LockDate" id="LockDate" class="form-control" value="" onSubmit="alert(LockDate.value);" />
            }
        </div>
    }

    @if (Model.CanManage)
    {
        <div class="panel panel-info">
            <div class="panel-heading">
                <h1 class="panel-title">@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.MemberList</h1>
                <input id="viewasuser-search" type="text" class="form-control" placeholder=@AllyisApps.Resources.TimeTracker.Views.TimeEntry.Strings.SearchPlaceholder />
            </div>
            <div id="viewasuser-list" class="list-group allyis-search" style="max-height: 50vh; overflow-y: auto;">
                @{ var count = 0;
                    var pageCount = 1;
                    var hide = "";
                    foreach (UserInfo user in Model.Users)
                    {
                        pageCount = 1 + (count / Model.PageUserSize);
                        if (count >= 0 && count <= (Model.PageUserSize - 1))
                        {
                            hide = "";
                        }
                        else
                        {
                            hide = "hidden";
                        }

                        string active = "";
                        var resetBackground = "this.style.backgroundColor=\"#FFFFFF\"";
                        if (user.UserId == Model.EntryRange.UserId)
                        {
                            active = "list-group-item-info";
                            resetBackground = "this.style.backgroundColor=\"#d9edf7\"";
                        }
                        <div data-page="@pageCount" class="@(active)"
                             onmouseover='this.style.backgroundColor="#c4e3f3"' onmouseout="@resetBackground"
                             style="width: 95%; display: flex; justify-content: flex-end;" @hide>
                            <a class="col-xs-11 text-left" data-search="@user.Email"
                               href="@Url.Action(ActionConstants.Index, routeValues: new
                            {
                                userId = user.UserId,
                                startDate = Model.EntryRange.StartDate,
                                endDate = Model.EntryRange.EndDate
                            })"
                               style="text-decoration: none; color: #000000;">
                                @user.FirstName @user.LastName
                            </a>
                            <a href="@Url.Action(ActionConstants.UserEdit, routeValues: new {
                                userId = user.UserId })"
                               style="text-decoration: none; color: #0066AA;"><i class="fa fa-cog"></i></a>
                        </div>count++;
                    }
                }
            </div>
            <div id="footPager" class="panel-footer" style="display: flex; justify-content: space-around; flex-wrap: wrap">
                @if (Model.Users.Any())
                {
                    var page = 1;
                    <input class="btn btn-primary btn-xs" id="page @page" name="pageButton" type="button" value="@page" onClick="showPage(@page)" disabled="" />page++;
                    while (page <= Model.UserPageCount)
                    {
                        <input class="btn btn-primary btn-xs" id="page @page" name="pageButton" type="button" value="@page" onClick="showPage(@page)" />page++;
                    }
                }
            </div>
        </div>
    }
}

@section css
{
    <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/jquery.comiseo.daterangepicker.css" />
}

@section scripts
{
    <script type="text/javascript" src="~/Areas/TimeTracker/Scripts/time-entry-index.js"></script>

    @* Date Range Picker *@
    <script type="text/javascript" src="//code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
    <script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.comiseo.daterangepicker.js"></script>
    <script type="text/javascript">
        $( document ).ready(function() {
            var MODULE = new ListGroupSearch();
            MODULE.init({
                $target: $("#viewasuser-list")
            });
            $("#viewasuser-search").keyup(_.debounce(
                function(key) {
                    if (key.which == 13 || key.keyCode == 13) {
                        //alert("keypress val:" + this.value);
                        if (this.value== "")
                            MODULE.search(" "); //search on a value that is present in all entries
                        else
                            MODULE.search(this.value);
                        //after search, set new page numbers
                        paginate();
                    }
                },
                200
            ));
            $('ProjectId').each(function(e){     //Used for model binding with custom ddl option selection
                eval($(this).data('onload'));
            });
            focusFirstDuration();
        });

        function paginate() {
            //alert("paginate");
            var pcount = 0;
            var page = 1;
            var excludeval = -1;
            var buttonCount = 1;
            var pageSize = @Model.PageUserSize;

            $('#viewasuser-list').find('div').each(function () {
                if (pcount >= pageSize) {
                    //alert("paginate page " + page + "++");
                    page++;
                    pcount = 0;
                }

                if ($(this).hasClass('excluded')) {
                    //alert("excluded pcount=" + pcount);
                    $(this).data('page', excludeval);
                }
                else {
                    //alert("not excluded pcount=" + pcount);
                    $(this).data('page', page);
                    pcount++;
                }
            });

            //alert("paginate pt2");
            //hide extra page buttons
            $("input[name='pageButton']").each(function () {
                if (buttonCount > page) {
                    $(this).hide();
                }
                else {
                    $(this).show();
                }
                buttonCount++;
            });

            //alert("paginate pt3");
            //build list based on page
            showPage(1);
        }

        //show members for page: pageNum
        function showPage(pageNum) {
            var pageStr = "" + pageNum;
            var dPage = "";

            //hide other pages and show selected
            $('#viewasuser-list').find('div').hide();
            $('#viewasuser-list').find('div').each(function () {
                dPage = $(this).data('page');
                if (dPage == pageStr) {
                    if ($(this).not('.excluded')) {
                        $(this).show();
                    }
                    else {
                        $(this).data('page', excludeval);
                    }
                }
            });
            select_page(pageNum);
        }

        //disable selected page button
        function select_page(pageNum) {
            var pcount = 1;
            $("input[name='pageButton']").prop('disabled', false);
            $("input[name='pageButton']").each(function () {
                if (pcount == pageNum) {
                    $(this).prop('disabled', true);
                }
                pcount++;
            });
        }

        function focusFirstDuration(){
            $("[name='Duration'][value='']:first").focus();
        }

        function focusNextDuration(form_child){
            var tb = $("[name='Duration']");
            for (var i = 0; i < tb.length; i++) {
                if(tb[i] == form_child) {
                    if(tb[i+1].parentNode.parentNode.parentNode.className.indexOf('hidden-sample') > -1)
                    {
                        if(tb.length >= i+2){
                            tb[i+2].focus();
                        }
                    }
                    else
                    {
                        if(tb.length >= i+1){
                            tb[i+1].focus();
                        }
                    }
                    break;
                }
            }
        }

        function focusPreviousDuration(form_child){
            var tb = $("[name='Duration']");
            for(var i = 0; i < tb.length; i++) {
                if(tb[i] == form_child) {
                    if(tb[i-1].parentNode.parentNode.parentNode.className.indexOf('hidden-sample') > -1)
                    {
                        if(i-2 >= 0){
                            tb[i-2].focus();
                        }
                    }
                    else
                    {
                        if(i-1 >= 0){
                            tb[i-1].focus();
                        }
                    }
                    break;
                }
            }
        }

        //$("#TimeEntryBody").submit(function () {
        //    alert("Submitted!");
        //    $("#Duration[value='']:first").focus();
        //});

        $( function() {
            var picker = $('#daterange').daterangepicker(
            {
                initialText: 'Select period...',
                datepickerOptions: {
                    minDate: null,
                    maxDate: null,
                    numberOfMonths : 2
                },
                presetRanges: [{
                    text: "Today",
                    dateStart: function() { return moment() },
                    dateEnd: function() { return moment() }
                }, {
                    text: "Yesterday",
                    dateStart: function() { return moment().subtract(1, 'days') },
                    dateEnd: function() { return moment().subtract(1, 'days') }
                }, {
                    text: "Last 7 Days",
                    dateStart: function() { return moment().subtract(6, 'days') },
                    dateEnd: function() { return moment() }
                }, {
                    text: "Last 30 Days",
                    dateStart: function() { return moment().subtract(29, 'days') },
                    dateEnd: function() { return moment() }
                }, {
                    text: "This Month",
                    dateStart: function() { return moment().startOf('month') },
                    dateEnd: function() { return moment().endOf('month') }
                }, {
                    text: "Last Month",
                    dateStart: function() { return moment().subtract(1, 'month').startOf('month') },
                    dateEnd: function() { return moment().subtract(1, 'month').endOf('month') }
                }],
                applyOnMenuSelect: true,
                onChange: function() {
                    var range = picker.daterangepicker("getRange");
                    $('#StartDate').val(moment(range.start).format("MM/DD/YYYY"));
                    $('#EndDate').val(moment(range.end).format("MM/DD/YYYY"));
                    if(this.notFirstTime) {
                        $(picker).parents("form:first").submit();
                    }
                    this.notFirstTime = true;
                }
            });
            $('#daterange').daterangepicker("setRange",
            {
                start: moment((@Model.EntryRange.StartDate.ToUniversalTime().Ticks - 621355968000000000) / 10000).toDate(),
                end:   moment((@Model.EntryRange.EndDate.ToUniversalTime().Ticks - 621355968000000000) / 10000).toDate()
            });
        });

        $( function() {
            var picker2 = $('#LockDate').daterangepicker(
            {
                initialText: '@Model.LockDate.ToShortDateString()',
                datepickerOptions: {
                    minDate: null,
                    maxDate: null,
                    numberOfMonths : 1
                },
                presetRanges: [{
                    text: "Today",
                    dateStart: function() { return moment() },
                    dateEnd: function() { return moment() }
                }, {
                    text: "Two Weeks Ago",
                    dateStart: function() { return moment().subtract(6, 'days') },
                    dateEnd: function() { return moment().subtract(6, 'days') }
                }],
                applyOnMenuSelect: true,
                onChange: function() {
                    debugger;
                    var range = picker2.daterangepicker("getRange");
                    $('#LockDate').val(moment(range.start).format("MM/DD/YYYY"));

                    //if(this.notFirstTime2) {
                    //    alert("Submit");
                    $(picker2).parents("form:first").submit();
                    //}
                    //this.notFirstTime2 = true;
                }
            });
            $('#lockdate').daterangepicker("setRange",
            {
                start: moment((@Model.LockDate.ToUniversalTime().Ticks - 621355968000000000) / 10000).toDate()
            });
        });

        function drp_nextWeek() {
            var drp = $('#daterange');
            var rangeObj = drp.daterangepicker("getRange");
            var newStart = new Date();
            var newEnd = new Date();
            var oldStart = new Date();
            var oldEnd = new Date();

            oldStart.setTime(rangeObj.start.getTime());
            oldEnd.setTime(rangeObj.end.getTime());
            newStart.setTime(rangeObj.start.getTime() + (7 * 86400000 ));
            newEnd.setTime(rangeObj.end.getTime() + (7 * 86400000));

            // get offset hours from standard time (changes during DST)
            var oldStartOffset = oldStart.getTimezoneOffset( ) / 60;
            var oldEndOffset = oldEnd.getTimezoneOffset( ) / 60;
            var newStartOffset = newStart.getTimezoneOffset( ) / 60;
            var newEndOffset = newEnd.getTimezoneOffset( ) / 60;
            var startOffsetChange = newStartOffset - oldStartOffset; // = 0, -1, or 1
            var endOffsetChange = newEndOffset - oldEndOffset; // = 0, -1, or 1

            newStart.setTime(newStart.getTime() + (startOffsetChange * 3600000));
            newEnd.setTime(newEnd.getTime() + (endOffsetChange * 3600000));

            drp.daterangepicker("setRange", {start: newStart, end: newEnd });
        }
        function drp_prevWeek() {
            var drp = $('#daterange');
            var rangeObj = drp.daterangepicker("getRange");
            var newStart = new Date();
            var newEnd = new Date();
            var oldStart = new Date();
            var oldEnd = new Date();

            oldStart.setTime(rangeObj.start.getTime());
            oldEnd.setTime(rangeObj.end.getTime());
            newStart.setTime(rangeObj.start.getTime() - (7 * 86400000 ));
            newEnd.setTime(rangeObj.end.getTime() - (7 * 86400000));

            // get offset hours from standard time (changes during DST)
            var oldStartOffset = oldStart.getTimezoneOffset( ) / 60;
            var oldEndOffset = oldEnd.getTimezoneOffset( ) / 60;
            var newStartOffset = newStart.getTimezoneOffset( ) / 60;
            var newEndOffset = newEnd.getTimezoneOffset( ) / 60;
            var startOffsetChange = newStartOffset - oldStartOffset; // = 0, -1, or 1
            var endOffsetChange = newEndOffset - oldEndOffset; // = 0, -1, or 1

            newStart.setTime(newStart.getTime() + (startOffsetChange * 3600000));
            newEnd.setTime(newEnd.getTime() + (endOffsetChange * 3600000));
            console.log("setrange: " + newStart + ", " + newEnd);
            drp.daterangepicker("setRange", {start: newStart, end: newEnd });
        }
    </script>
}
