@using AllyisApps.Areas.TimeTracker.Models;
@using AllyisApps.Areas.TimeTracker.Core;
@using System.Globalization;
@model IEnumerable<EditTimeEntryViewModel>

@{
    System.DayOfWeek startOfWeek = (System.DayOfWeek)ViewBag.startOfWeek;
    Func<DateTime, int> weekProjector =
        d => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(
            d,
            CalendarWeekRule.FirstFourDayWeek,
            startOfWeek);
    var query2 = from entry in Model orderby entry.Date.Date group entry by entry.Date.Date;
    var weekQuery = from entry in Model orderby entry.Date.Date group entry by weekProjector(entry.Date.Date);
}

@foreach (var weekGroup in weekQuery)
{
    var dateQuery = from entry in weekGroup orderby entry.Date.Date group entry by entry.Date.Date;
    <div class="panel panel-default timesheet-grouping">
        @foreach (var dateGroup in dateQuery)
        {
            var theEntries = from entry in dateGroup where !entry.Sample select entry;
            var theSample = (from entry in dateGroup where entry.Sample select entry).FirstOrDefault();
            int totalCount = theEntries.Count();
            int allVotedCount = (from e in theEntries where e.ApprovalState != (int)ApprovalState.NoApprovalState select e).Count();
            int allApprovedCount = (from e in theEntries where e.ApprovalState == (int)ApprovalState.Approved select e).Count();
            int allRejectedCount = (from e in theEntries where e.ApprovalState == (int)ApprovalState.NotApproved select e).Count();
            bool noneExist = totalCount == 0;
            bool noneWereVoted = allVotedCount == 0;
            bool allVotedWereApproved = allVotedCount > 0 && allVotedCount == allApprovedCount;
            bool allVotedWereRejected = allVotedCount > 0 && allVotedCount == allRejectedCount;
            bool allWereApproved = allVotedCount > 0 && totalCount == allApprovedCount;
            bool allWereRejected = allVotedCount > 0 && totalCount == allRejectedCount;
            bool anyWereChanged = (from e in theEntries where e.ModSinceApproval == true select e).Any();
            string containerClass = noneExist ? "" :
                                    noneWereVoted ? "" :
                                    anyWereChanged ? "pending" :
                                    allWereApproved ? "approved" :
                                    allWereRejected ? "rejected" : "pending";
            string headerClass = containerClass;
            string selectorClass = allVotedWereApproved ? "approved" :
                                   allVotedWereRejected ? "rejected" : "";

            var currentDate = dateGroup.First().Date.Date;
            string dateStringNums = currentDate.ToShortDateString();
            string dateStringDayLong = currentDate.DayOfWeek.ToString();
            string dateStringDayShort = DateTimeFormatInfo.CurrentInfo.AbbreviatedDayNames[(int)currentDate.DayOfWeek].ToString();
            
            string offDayClass = "";

            if (theSample.IsOffDay)
            { // Note: To change the color of offdays/offday entries, edit TimeTracker.css rules for '.table-row .offDay'/'.offDay .form-control', respectively.
                offDayClass = "offDay";
            }
            <div class="panel-heading hidden visible-xs @(headerClass)">
                <label>@(dateStringNums) @(dateStringDayLong)</label>
                @*
                if (canApproveReject)
                {
                
                        //This section of code displays a pair of thumbs-up/down to managers in order to approve time entries.
                        //The remainder of the JS and actions remain functional, however there is no interface for them in the application.
                        //Uncomment to restore approval functionality..
                        <div class="approval btn-group btn-group-xs pull-right @(selectorClass)">
                            <a href="javascript:void(0)" class="btn btn-sm text-success up" onclick="return ajaxApproveDay($(this).parents('.panel-heading:first').next())">
                                <i class="fa fa-thumbs-up fa-fw fa-2x"></i>
                            </a>
                            <a href="javascript:void(0)" class="btn btn-sm text-danger down" onclick="return ajaxRejectDay($(this).parents('.panel-heading:first').next())">
                                <i class="fa fa-thumbs-down fa-flip-horizontal fa-fw fa-2x"></i>
                            </a>
                        </div>
                    
                }
                *@
            </div>
            <div class="table-container @(containerClass)">
		  	<div class="table-row">
		  		<div class="panel-left hidden-xs table-col text-center @offDayClass">
		  			@*
				//This section of code displays a pair of thumbs-up/down to managers in order to approve time entries.
				//The remainder of the JS and actions remain functional, however there is no interface for them in the application.
				//Uncomment to restore approval functionality.
				@if (canApproveReject)
				{
				    <div class="approval btn-group btn-group-xs btn-group-vertical @(selectorClass)">
					   <a href="javascript:void(0)" class="btn btn-sm text-success up" onclick="return ajaxApproveDay($(this).parents('.table-container:first'))">
						  <i class="fa fa-thumbs-up fa-fw fa-2x"></i>
					   </a>
					   <a href="javascript:void(0)" class="btn btn-sm text-danger down" onclick="return ajaxRejectDay($(this).parents('.table-container:first'))">
						  <i class="fa fa-thumbs-down fa-flip-horizontal fa-fw fa-2x"></i>
					   </a>
				    </div>
				}*@
		  	<label style="display: block;">@dateStringNums</label>
		  <label style="display: block;">@dateStringDayShort</label>
			   	<div class="panel-right table-col @offDayClass" style="display: block; background-color:transparent;">
			   		<table align="center">
						   <tr>
			   			@if (currentDate.DayOfWeek == startOfWeek)
				    {
			   			<td style="padding-right:5px;">
			   				<a href="@Url.Action("CopyEntries", "TimeEntry", new {startDateTarget=currentDate, startDateCopy=currentDate.AddDays(-7), endDateCopy=currentDate.AddDays(-1), userId=Model.First().UserId})" class="btn btn-primary" style="width:100%" title="Copy Previous Week"><i class="fa fa-files-o"></i> W</a>
			   			</td>
				    }
			   		<td style="padding-bottom:5px;">
			   			<a href="@Url.Action("CopyEntries", "TimeEntry", new {startDateTarget=currentDate, startDateCopy=currentDate.AddDays(-1), endDateCopy=currentDate.AddDays(-1), userId=Model.First().UserId})" class="btn btn-primary" style="width:100%;" title="Copy Previous Day"><i class="fa fa-files-o"></i> D</a>
			   		</td>
			   	</tr>
			   </table>

			   </div>
		  </div>
		  <div class="panel-right table-col @offDayClass">
		  	@{
			    foreach (var entry in theEntries)
			    {
		  		@Html.Partial("_AjaxTimeEntryBody", entry)
			    }
		  	@Html.Partial("_AjaxTimeEntryBody", theSample);
			    theSample.Hidden = true;
		  	@Html.Partial("_AjaxTimeEntryBody", theSample);
		  }
		  </div>
		  </div>

            </div>
        }
    </div>
}