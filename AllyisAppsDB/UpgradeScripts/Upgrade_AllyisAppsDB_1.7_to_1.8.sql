/*
Deployment script for AllyisAppsDB_1.7.1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/


/*
The column [Pjm].[Project].[ProjectOrgId] is being dropped, data loss could occur.

The column [Pjm].[Project].[ProjectCode] on table [Pjm].[Project] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.


IF EXISTS (select top 1 1 from [Pjm].[Project])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
*/
PRINT N'The following operation was generated from a refactoring log file 49db4cb6-876f-49c7-a19d-090187178b86, 6b886332-93af-46bf-9ca5-1734f843a564';

PRINT N'Rename [Crm].[Customer].[CustomerOrgId] to CustomerCode';


GO
EXECUTE sp_rename @objname = N'[Crm].[Customer].[CustomerOrgId]', @newname = N'CustomerCode', @objtype = N'COLUMN';


GO
PRINT N'Dropping [Pjm].[DF_Project_IsHourly]...';


GO
ALTER TABLE [Pjm].[Project] DROP CONSTRAINT [DF_Project_IsHourly];


GO
PRINT N'Dropping [Pjm].[DF_Project_IsActive]...';


GO
ALTER TABLE [Pjm].[Project] DROP CONSTRAINT [DF_Project_IsActive];


GO
PRINT N'Dropping [Pjm].[DF_Project_CreatedUtc]...';


GO
ALTER TABLE [Pjm].[Project] DROP CONSTRAINT [DF_Project_CreatedUtc];


GO
PRINT N'Dropping [Pjm].[FK_Project_Customer]...';


GO
ALTER TABLE [Pjm].[Project] DROP CONSTRAINT [FK_Project_Customer];


GO
PRINT N'Dropping [Pjm].[FK_ProjectUser_Project]...';


GO
ALTER TABLE [Pjm].[ProjectUser] DROP CONSTRAINT [FK_ProjectUser_Project];


GO
PRINT N'Dropping [TimeTracker].[FK_TimeEntry_Project]...';


GO
ALTER TABLE [TimeTracker].[TimeEntry] DROP CONSTRAINT [FK_TimeEntry_Project];


GO
PRINT N'Altering [aaUser]...';


GO
ALTER USER [aaUser]
    WITH LOGIN = [aaUser];


GO
PRINT N'Starting rebuilding table [Pjm].[Project]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Pjm].[tmp_ms_xx_Project] (
    [ProjectId]         INT           IDENTITY (116827, 3) NOT NULL,
    [CustomerId]        INT           NOT NULL,
    [ProjectName]       NVARCHAR (64) NOT NULL,
    [ProjectCode]       NVARCHAR (16) NOT NULL,
    [IsHourly]          BIT           CONSTRAINT [DF_Project_IsHourly] DEFAULT ((0)) NOT NULL,
    [IsActive]          BIT           CONSTRAINT [DF_Project_IsActive] DEFAULT ((1)) NOT NULL,
    [ProjectCreatedUtc] DATETIME2 (0) CONSTRAINT [DF_Project_CreatedUtc] DEFAULT (getutcdate()) NOT NULL,
    [StartUtc]          DATETIME2 (0) NULL,
    [EndUtc]            DATETIME2 (0) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Project1] PRIMARY KEY NONCLUSTERED ([ProjectId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UC_Project_Customer1] UNIQUE NONCLUSTERED ([CustomerId] ASC, [ProjectCode] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Pjm].[Project])
    BEGIN
        SET IDENTITY_INSERT [Pjm].[tmp_ms_xx_Project] ON;
        INSERT INTO [Pjm].[tmp_ms_xx_Project] ([ProjectId], [CustomerId], [ProjectName], [IsHourly], [IsActive], [ProjectCreatedUtc], [StartUtc], [EndUtc],[ProjectCode])
        SELECT [ProjectId],
               [CustomerId],
               [ProjectName],
               [IsHourly],
               [IsActive],
               [ProjectCreatedUtc],
               [StartUtc],
               [EndUtc],
			   [ProjectOrgId]
        FROM   [Pjm].[Project];
        SET IDENTITY_INSERT [Pjm].[tmp_ms_xx_Project] OFF;
    END

DROP TABLE [Pjm].[Project];

EXECUTE sp_rename N'[Pjm].[tmp_ms_xx_Project]', N'Project';

EXECUTE sp_rename N'[Pjm].[tmp_ms_xx_constraint_PK_Project1]', N'PK_Project', N'OBJECT';

EXECUTE sp_rename N'[Pjm].[tmp_ms_xx_constraint_UC_Project_Customer1]', N'UC_Project_Customer', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [Pjm].[Project].[IX_Project]...';


GO
CREATE NONCLUSTERED INDEX [IX_Project]
    ON [Pjm].[Project]([CustomerId] ASC);


GO
PRINT N'Creating [Crm].[UQ_OrganizaionId_CustomerCode]...';


GO
ALTER TABLE [Crm].[Customer]
    ADD CONSTRAINT [UQ_OrganizaionId_CustomerCode] UNIQUE NONCLUSTERED ([OrganizationId] ASC, [CustomerCode] ASC);


GO
PRINT N'Creating [Pjm].[FK_Project_Customer]...';


GO
ALTER TABLE [Pjm].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_Customer] FOREIGN KEY ([CustomerId]) REFERENCES [Crm].[Customer] ([CustomerId]);


GO
PRINT N'Creating [Pjm].[FK_ProjectUser_Project]...';


GO
ALTER TABLE [Pjm].[ProjectUser] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectUser_Project] FOREIGN KEY ([ProjectId]) REFERENCES [Pjm].[Project] ([ProjectId]) ON DELETE CASCADE;


GO
PRINT N'Creating [TimeTracker].[FK_TimeEntry_Project]...';


GO
ALTER TABLE [TimeTracker].[TimeEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_TimeEntry_Project] FOREIGN KEY ([ProjectId]) REFERENCES [Pjm].[Project] ([ProjectId]);


GO
PRINT N'Altering [Crm].[GetInactiveProjectsAndCustomersForOrgAndUser]...';


GO
ALTER PROCEDURE [Crm].[GetInactiveProjectsAndCustomersForOrgAndUser]
	@orgId int,
	@userId int
AS
	SET NOCOUNT ON

	SELECT	[Project].[ProjectId],
		[Project].[CustomerId],
		[Customer].[OrganizationId],
		[Project].[ProjectCreatedUtc],
		[Project].[ProjectName] AS [ProjectName],
		[Project].[IsActive],
		[ProjectCode],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Customer].[CustomerName] AS [CustomerName],
		[Customer].[CustomerCode],
		[Customer].[IsActive] AS [IsCustomerActive],
		[Project].[IsHourly] AS [IsHourly],
		[SUB].[IsProjectUser]
	FROM (
		[Auth].[Organization] WITH (NOLOCK) 
		JOIN [Crm].[Customer] WITH (NOLOCK) ON ([Customer].[OrganizationId] = [Organization].[OrganizationId] AND [Organization].[OrganizationId] = @orgId)
		JOIN [Pjm].[Project] WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]
		LEFT JOIN (
			SELECT 1 AS 'IsProjectUser',
			[ProjectUser].[ProjectId]
			FROM [Pjm].[ProjectUser] WITH (NOLOCK)
			WHERE [ProjectUser].[UserId] = @userId
		) [SUB] ON [SUB].[ProjectId] = [Project].[ProjectId]
	)
	
	WHERE [Customer].[IsActive] = 0
	OR [Project].[IsActive] = 0

	ORDER BY [Project].[ProjectName]

	SELECT DISTINCT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Address1],
		   [City],
		   [State].[StateName] AS 'StateName',
		   [Country].[CountryName] AS 'CountryName',
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[CustomerCode],
		   [Customer].[OrganizationId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Pjm].[Project] WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	AND ([Customer].[IsActive] = 0
	OR [Project].[IsActive] = 0)
	ORDER BY [Customer].[CustomerName]
GO
PRINT N'Altering [Crm].[GetProjectByIdAndUser]...';


GO
ALTER PROCEDURE [Crm].[GetProjectByIdAndUser]
	@projectId int,
	@userId int
AS
	SET NOCOUNT ON;
	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[ProjectName] AS [ProjectName],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerCode],
			[Project].[IsHourly] AS [PriceType],
			[Project].[StartUtc] AS [StartDate],
			[Project].[EndUtc] AS [EndDate],
			[Project].[ProjectCode],
			[SUB].[IsProjectUser]
			FROM (
		(SELECT [ProjectId], [CustomerId], [ProjectName], [IsHourly], [StartUtc], [EndUtc], [IsActive], 
				[ProjectCreatedUtc], [ProjectCode] FROM [Pjm].[Project] WITH (NOLOCK) WHERE [ProjectId] = @projectId) AS [Project]
			JOIN [Crm].[Customer] WITH (NOLOCK) ON [Customer].[CustomerId] = [Project].[CustomerId]
			JOIN [Auth].[Organization] WITH (NOLOCK) ON [Organization].[OrganizationId] = [Customer].[OrganizationId]
			LEFT JOIN (
				SELECT 1 AS 'IsProjectUser',
				[ProjectUser].[ProjectId]
				FROM [Pjm].[ProjectUser] WITH (NOLOCK)
				WHERE [ProjectUser].[ProjectId] = @projectId AND [ProjectUser].[UserId] = @userId
			) [SUB] ON [SUB].[ProjectId] = @projectId
		)
GO
PRINT N'Altering [Pjm].[CreateProject]...';


GO
ALTER PROCEDURE [Pjm].[CreateProject]
	@customerId INT,
	@projectName NVARCHAR(MAX),
	@isHourly BIT,
	@projectCode NVARCHAR(16),
	@startingDate DATETIME2(0),
	@endingDate DATETIME2(0),
    @retId INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRANSACTION
	INSERT INTO [Pjm].[Project] ([CustomerId], [ProjectName], [IsHourly], [ProjectCode], [StartUtc], [EndUtc])
	VALUES	(@customerId, @projectName, @isHourly, @projectCode, @startingDate, @endingDate);
	SET @retId = SCOPE_IDENTITY()
	COMMIT TRANSACTION
	SELECT SCOPE_IDENTITY();
END
GO
PRINT N'Altering [Pjm].[CreateProjectAndUpdateItsUserList]...';


GO
ALTER PROCEDURE [Pjm].[CreateProjectAndUpdateItsUserList]
	@customerId INT,
	@projectName NVARCHAR(MAX),
	@isHourly BIT,
	@projectCode NVARCHAR(16),
	@startingDate DATETIME2(0),
	@endingDate DATETIME2(0),
	@isActive BIT,
	@userIds [Auth].[UserTable] READONLY,
	@retId INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (
		SELECT * FROM [Pjm].[Project] WITH (NOLOCK)
		WHERE [ProjectCode] = @projectCode
		AND [CustomerId] = @customerId
	)
		BEGIN
			-- ProjectCode is not unique
			SET @retId = -1;
		END
	ELSE
		BEGIN
			BEGIN TRANSACTION
				-- Create the new project in Project table
				INSERT INTO [Pjm].[Project] (
					[CustomerId],
					[ProjectName],
					[IsHourly],
					[ProjectCode],
					[StartUtc],
					[EndUtc],
					[IsActive])
				VALUES	(
					@customerId,
					@projectName,
					@isHourly,
					@projectCode,
					@startingDate,
					@endingDate,
					@isActive);
				SET @retId = SCOPE_IDENTITY()

				/* Update new users that used to be users at some point */
				UPDATE [Pjm].[ProjectUser] SET IsActive = 1
				WHERE [ProjectUser].[ProjectId] = @retId 
					AND [ProjectUser].[UserId] IN (SELECT userId FROM @userIds) 
					AND [ProjectUser].[IsActive] = 0

				/* Add new users that have never been on the project */
				INSERT INTO [Pjm].[ProjectUser] ([ProjectId], [UserId], [IsActive])
				SELECT @retId, userId, 1
				FROM @userIds
				WHERE userId NOT IN
					(SELECT [ProjectUser].[UserId]
					FROM [Pjm].[ProjectUser] WITH (NOLOCK)
					WHERE [ProjectUser].[ProjectId] = @retId)

				/* Set inactive existing users that are not in the updated users list */
				UPDATE [Pjm].[ProjectUser] SET IsActive = 0
				WHERE [ProjectUser].[ProjectId] = @retId
					AND [ProjectUser].[UserId] NOT IN (SELECT userId FROM @userIds) 
					AND [ProjectUser].[IsActive] = 1

			COMMIT TRANSACTION		
		END
	SELECT @retId;
END
GO
PRINT N'Altering [Pjm].[DeleteProject]...';


GO
ALTER PROCEDURE [Pjm].[DeleteProject]
	@projectId INT,
	@deactivateDate DATE
AS
BEGIN
	SET NOCOUNT ON;
	-- Retrieve the project's name
	DECLARE @projectName NVARCHAR(384);
	DECLARE @startDate DATE;

	SELECT 
		@projectName = [ProjectName],
		@startDate = [Project].[StartUtc]
	FROM [Pjm].[Project] WITH (NOLOCK)
	WHERE [ProjectId] = @projectId

	IF (@startDate IS NOT NULL AND @startDate > @deactivateDate)
	BEGIN
		SET @startDate = null
	END

	IF @projectName IS NOT NULL 
	BEGIN --Project found
		UPDATE [Pjm].[Project]
		SET [IsActive] = 0, [EndUtc] = @deactivateDate, [StartUtc] = @startDate
		WHERE [ProjectId] = @projectId
	 
		UPDATE [Pjm].[ProjectUser] SET [IsActive] = 0
		WHERE [ProjectUser].[ProjectId] = @projectId;
	END
	SELECT @projectName
END
GO
PRINT N'Altering [Pjm].[GetInactiveProjectsByCustomer]...';


GO
ALTER PROCEDURE [Pjm].[GetInactiveProjectsByCustomer]
	@customerId INT
AS
	SET NOCOUNT ON;
	SELECT [ProjectName],
		   [ProjectId],
		   [ProjectCode],
		   [IsHourly],
		   [CustomerId],
		   [StartUtc] AS [StartingDate],
		   [EndUtc] AS [EndingDate]
	FROM [Pjm].[Project] WITH (NOLOCK) 
	WHERE [IsActive] = 0 AND [CustomerId] = @customerId
	ORDER BY [Project].[ProjectName]
GO
PRINT N'Altering [Pjm].[GetNextProjectIdAndSubUsers]...';


GO
ALTER PROCEDURE [Pjm].[GetNextProjectIdAndSubUsers]
	@customerId INT,
	@subscriptionId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT TOP 1
		[ProjectCode]
	FROM [Pjm].[Project] WITH (NOLOCK)
	WHERE [Project].[CustomerId] = @customerId
	ORDER BY [ProjectCode] DESC

	SELECT [FirstName], [LastName], [ProductRoleId], [User].[UserId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK) 
	LEFT JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId]
	LEFT JOIN (SELECT [UserId], [ProductRoleId] 
				FROM [Billing].[SubscriptionUser] WITH (NOLOCK) 
				WHERE [SubscriptionId] = @subscriptionId)
				AS [OnRoles]
				ON [OnRoles].[UserId] = [User].[UserId]
	WHERE [OrganizationId] = (
		SELECT TOP 1
			[OrganizationId]
		FROM [Crm].[Customer] WITH (NOLOCK)
		WHERE [CustomerId] = @customerId
	) AND [ProductRoleId] IS NOT NULL
	ORDER BY [User].[LastName]
END
GO
PRINT N'Altering [Pjm].[GetProjectById]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectById]
	@projectId INT
AS
	SET NOCOUNT ON;
	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[ProjectName] AS [ProjectName],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerCode],
			[Project].[IsHourly] AS [PriceType],
			[Project].[IsActive],
			[Project].[StartUtc] AS [StartDate],
			[Project].[EndUtc] AS [EndDate],
			[Project].[ProjectCode]
			FROM (
		(SELECT *
			FROM [Pjm].[Project] WITH (NOLOCK) WHERE [ProjectId] = @projectId) AS [Project]
			JOIN [Crm].[Customer] WITH (NOLOCK) ON [Customer].[CustomerId] = [Project].[CustomerId]
			JOIN [Auth].[Organization] WITH (NOLOCK) ON [Organization].[OrganizationId] = [Customer].[OrganizationId]
	)
GO
PRINT N'Altering [Pjm].[GetProjectEditInfo]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectEditInfo]
	@projectId INT,
	@subscriptionId INT
AS
	SET NOCOUNT ON;
	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[ProjectName] AS [ProjectName],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerCode],
			[Project].[IsHourly] AS [IsHourly],
			[Project].[IsActive],
			[Project].[StartUtc] AS [StartDate],
			[Project].[EndUtc] AS [EndDate],
			[Project].[ProjectCode]
			FROM (
		(SELECT [ProjectId], [CustomerId], [ProjectName], [IsHourly], [StartUtc], [EndUtc], [IsActive], 
				[ProjectCreatedUtc], [ProjectCode] FROM [Pjm].[Project] WITH (NOLOCK) WHERE [ProjectId] = @projectId) AS [Project]
			JOIN [Crm].[Customer] WITH (NOLOCK) ON [Customer].[CustomerId] = [Project].[CustomerId]
			JOIN [Auth].[Organization] WITH (NOLOCK) ON [Organization].[OrganizationId] = [Customer].[OrganizationId]
	)

	SELECT [ProjectUser].[UserId], [FirstName], [LastName]
	FROM [Pjm].[ProjectUser] WITH (NOLOCK) 
	LEFT JOIN [Pjm].[Project]	WITH (NOLOCK) ON [Project].[ProjectId] = [ProjectUser].[ProjectId]
	LEFT JOIN [Crm].[Customer]	WITH (NOLOCK) ON [Customer].[CustomerId] = [Project].[CustomerId]
	LEFT JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [ProjectUser].[UserId]
	WHERE [Customer].[IsActive] = 1 
		AND [ProjectUser].[IsActive] = 1
		AND [ProjectUser].[ProjectId] = @projectId
	ORDER BY [User].[LastName]

	SELECT [FirstName], [LastName], [ProductRoleId], [User].[UserId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK) 
	LEFT JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId]
	LEFT JOIN (SELECT [UserId], [ProductRoleId] 
				FROM [Billing].[SubscriptionUser] WITH (NOLOCK) 
				WHERE [SubscriptionId] = @subscriptionId)
				AS [OnRoles]
				ON [OnRoles].[UserId] = [User].[UserId]
	WHERE [OrganizationId] = (
		SELECT TOP 1
			[OrganizationId]
		FROM [Pjm].[Project] WITH (NOLOCK)
		LEFT JOIN [Crm].[Customer] WITH (NOLOCK) ON [Customer].[CustomerId] = [Project].[CustomerId]
		WHERE [ProjectId] = @projectId
	) AND [ProductRoleId] IS NOT NULL
	ORDER BY [User].[LastName]
GO
PRINT N'Altering [Pjm].[GetProjectsAndCustomersForOrgAndUser]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectsAndCustomersForOrgAndUser]
	@orgId int,
	@userId int
AS
	SET NOCOUNT ON

	SELECT	[Project].[ProjectId],
		[Project].[CustomerId],
		[Customer].[OrganizationId],
		[Project].[ProjectCreatedUtc],
		[Project].[ProjectName] AS [ProjectName],
		[Project].[IsActive],
		[ProjectCode],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Customer].[CustomerName] AS [CustomerName],
		[Customer].[CustomerCode],
		[Customer].[CustomerId],
		[Customer].[IsActive] AS [IsCustomerActive],
		[Project].[IsHourly] AS [IsHourly],
		[SUB].[IsProjectUser]
	FROM (
		[Auth].[Organization] WITH (NOLOCK) 
		JOIN [Crm].[Customer]	WITH (NOLOCK) ON ([Customer].[OrganizationId] = [Organization].[OrganizationId] AND [Organization].[OrganizationId] = @orgId)
		JOIN [Pjm].[Project]		WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]
		LEFT JOIN (
			SELECT 1 AS 'IsProjectUser',
			[ProjectUser].[ProjectId]
			FROM [Pjm].[ProjectUser] WITH (NOLOCK)
			WHERE [ProjectUser].[UserId] = @userId
		) [SUB] ON [SUB].[ProjectId] = [Project].[ProjectId]
	)
	
	WHERE [Customer].[IsActive] >= 1
		AND [Project].[IsActive] >= 1

	ORDER BY [Project].[ProjectName]

	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Address1],
		   [City],
		   [State].[StateName] AS 'State',
		   [Country].[CountryName] AS 'Country',
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[CustomerCode],
		   [Customer].[OrganizationId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	AND [Customer].[IsActive] = 1
	ORDER BY [Customer].[CustomerName]
GO
PRINT N'Altering [Pjm].[GetProjectsByCustomer]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectsByCustomer]
	@customerId INT
AS
	SET NOCOUNT ON;
	SELECT [ProjectName],
		   [ProjectId],
		   [ProjectCode],
		   [IsHourly],
		   [CustomerId],
		   [StartUtc] AS [StartingDate],
		   [EndUtc] AS [EndingDate]
	FROM [Pjm].[Project] WITH (NOLOCK) 
	WHERE [CustomerId] = @customerId
	ORDER BY [Project].[ProjectName]
GO
PRINT N'Altering [Pjm].[GetProjectsByOrgId]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectsByOrgId]
	@orgId INT,
	@activity INT = 1
AS
	SET NOCOUNT ON;
SELECT	[Project].[ProjectId],
		[Project].[CustomerId],
		[Customer].[OrganizationId],
		[Project].[ProjectCreatedUtc],
		[Project].[EndUtc] AS [EndDate],
		[Project].[StartUtc] AS [StartDate],
		[Project].[ProjectName] AS [ProjectName],
		[Project].[IsActive],
		[ProjectCode],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Customer].[CustomerName] AS [CustomerName],
		[Customer].[CustomerCode],
		[Customer].[IsActive] AS [IsCustomerActive],
		[Project].[IsHourly] AS [IsHourly]
		--[OrganizationRoleId]
FROM (
--(SELECT [OrganizationId], [OrganizationRoleId] FROM [Auth].[OrganizationUser] WHERE [OrganizationId] = @orgId) AS OrganizationUser
	[Auth].[Organization] WITH (NOLOCK) 
	JOIN [Crm].[Customer]	WITH (NOLOCK) ON ([Customer].[OrganizationId] = [Organization].[OrganizationId] AND [Organization].[OrganizationId] = @orgId)
	JOIN [Pjm].[Project]		WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]
)
	
WHERE [Customer].[IsActive] >= @activity
	AND [Project].[IsActive] >= @activity

ORDER BY [Project].[ProjectName]
GO
PRINT N'Altering [Pjm].[GetProjectsByUserAndOrganization]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectsByUserAndOrganization]
	@userId INT,
	@orgId INT,
	@activity INT = 1
AS
	SET NOCOUNT ON;
	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[ProjectName] AS [ProjectName],
			[Project].[IsActive],
			[Project].[StartUtc] AS [StartDate],
			[Project].[EndUtc] AS [EndDate],
			[Project].[IsHourly] AS [PriceType],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerCode],
			[Customer].[IsActive] AS [IsCustomerActive],
			[ProjectUser].[IsActive] AS [IsUserActive],
			[OrganizationRoleId],
			[ProjectCode]
FROM (
	(SELECT [OrganizationId], [UserId], [OrganizationRoleId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK) WHERE [UserId] = @userId AND [OrganizationId] = @orgId)
	AS [OrganizationUser]
	JOIN [Auth].[Organization]		WITH (NOLOCK) ON [OrganizationUser].[OrganizationId] = [Organization].[OrganizationId]
	JOIN [Crm].[Customer]		WITH (NOLOCK) ON [Customer].[OrganizationId] = [Organization].[OrganizationId]
	JOIN ( [Pjm].[Project]
		JOIN [Pjm].[ProjectUser] WITH (NOLOCK) ON [ProjectUser].[ProjectId] = [Project].[ProjectId]
	)
									ON [Project].[CustomerId] = [Customer].[CustomerId]
									AND [ProjectUser].[UserId] = [OrganizationUser].[UserId]
	
)
WHERE [Customer].[IsActive] >= @activity
	AND [Project].[IsActive] >= @activity
	AND [ProjectUser].[IsActive] >= @activity
	UNION ALL
SELECT	[ProjectId],
		[CustomerId],
		0,
		[ProjectCreatedUtc],
		[ProjectName],
		[IsActive],
		[StartUtc],
		[EndUtc],
		[IsHourly],
		(SELECT [OrganizationName] FROM [Auth].[Organization]  WITH (NOLOCK) WHERE [OrganizationId] = 0),
		(SELECT [CustomerName] FROM [Crm].[Customer]  WITH (NOLOCK) WHERE [CustomerId] = 0),
		NULL,
		0,
		0,
		0,
		[ProjectCode]
		FROM [Pjm].[Project]  WITH (NOLOCK) WHERE [ProjectId] = 0
ORDER BY [Project].[ProjectName]
GO
PRINT N'Altering [Pjm].[GetProjectsForOrgAndUser]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectsForOrgAndUser]
	@userId INT,
	@orgId INT
AS
	SELECT [P].[ProjectId],
			[P].[ProjectName],
			[P].[ProjectCode],
			[C].[CustomerName] AS CustomerName
	FROM [Pjm].[ProjectUser] AS [PU] WITH (NOLOCK)
	LEFT JOIN [Pjm].[Project] AS [P] WITH (NOLOCK) ON [P].[ProjectId] = [PU].[ProjectId]
		JOIN [Crm].[Customer] AS [C] WITH (NOLOCK) ON [C].[CustomerId] = [P].[CustomerId]
		LEFT JOIN [Auth].[Organization] AS [O] WITH (NOLOCK) ON [O].[OrganizationId] = [C].[OrganizationId]
	WHERE [PU].[UserId] = @userId AND [O].[OrganizationId] = @orgId AND [PU].[IsActive] = 1 AND [P].[IsActive] = 1

	SELECT [P].[ProjectId],
			[P].[ProjectName],
			[P].[ProjectCode],
			[C].[CustomerName] AS CustomerName
	FROM [Pjm].[Project] AS [P] WITH (NOLOCK)
		JOIN [Crm].[Customer] AS [C] WITH (NOLOCK) ON [C].[CustomerId] = [P].[CustomerId]
		LEFT JOIN [Auth].[Organization] AS [O] WITH (NOLOCK) ON [O].[OrganizationId] = [C].[OrganizationId]
	WHERE [O].[OrganizationId] = @orgId AND [P].[IsActive] = 1
	
	SELECT [FirstName],
		[LastName],
		[Email]
	FROM [Auth].[User] WITH (NOLOCK)
	WHERE [User].[UserId] = @userId
GO
PRINT N'Altering [Pjm].[ReactivateProject]...';


GO
ALTER PROCEDURE [Pjm].[ReactivateProject]
	@projectId INT
AS
	SET NOCOUNT ON;
	UPDATE [Pjm].[Project]
	SET [IsActive] = 1, [EndUtc] = NULL
	WHERE [ProjectId] = @projectId

	/*UPDATE [Pjm].[ProjectUser] SET [IsActive] = 1
	WHERE [ProjectUser].[ProjectId] = @projectId */
GO
PRINT N'Altering [Pjm].[UpdateProject]...';


GO
ALTER PROCEDURE [Pjm].[UpdateProject]
	@projectId INT,
	@projectName NVARCHAR(MAX),
	@isHourly BIT,
    @startingDate DATE,
    @endingDate DATE,
	@projectCode NVARCHAR(16)
AS
	SET NOCOUNT ON;
	UPDATE [Pjm].[Project]
	SET 
		[ProjectName] = @projectName,
		[IsHourly] = @isHourly,
		[StartUtc] = @startingDate,
		[EndUtc] = @endingDate,
		[ProjectCode] = @projectCode

	WHERE [ProjectId] = @projectId
GO
PRINT N'Altering [Pjm].[UpdateProjectAndUsers]...';


GO
ALTER PROCEDURE [Pjm].[UpdateProjectAndUsers]
	@projectId INT,
	@projectName NVARCHAR(MAX),
	@orgId NVARCHAR(16),
	@isHourly BIT,
    @startingDate DATE,
    @endingDate DATE,
	@userIds [Auth].[UserTable] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRANSACTION
		
		/* Update new users that used to be users at some point */
		UPDATE [Pjm].[ProjectUser] SET IsActive = 1
		WHERE [ProjectUser].[ProjectId] = @projectId 
			AND [ProjectUser].[UserId] IN (SELECT userId FROM @userIds) 
			AND [ProjectUser].[IsActive] = 0

		/* Add new users that have never been on the project */
		INSERT INTO [Pjm].[ProjectUser] ([ProjectId], [UserId], [IsActive])
		SELECT @projectId, userId, 1
		FROM @userIds
		WHERE userId NOT IN
			(SELECT [ProjectUser].[UserId]
			FROM [Pjm].[ProjectUser] WITH (NOLOCK)
			WHERE [ProjectUser].[ProjectId] = @projectId)

		/* Set inactive existing users that are not in the updated users list */
		UPDATE [Pjm].[ProjectUser] SET IsActive = 0
		WHERE [ProjectUser].[ProjectId] = @projectId
			AND [ProjectUser].[UserId] NOT IN (SELECT userId FROM @userIds) 
			AND [ProjectUser].[IsActive] = 1

		/* Update other project properties */
		UPDATE [Pjm].[Project]
		SET 
			[ProjectName] = @projectName,
			[ProjectCode] = @orgId,
			[IsHourly] = @isHourly,
			[StartUtc] = @startingDate,
			[EndUtc] = @endingDate
		WHERE [ProjectId] = @projectId

	COMMIT TRANSACTION
END
GO
PRINT N'Altering [TimeTracker].[GetReportInfo]...';


GO
ALTER PROCEDURE [TimeTracker].[GetReportInfo]
	@orgId INT,
	@subscriptionId INT
AS
	SET NOCOUNT ON
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Customer].[AddressId],
		   [Address1] AS 'Address',
		   [City],
		   [State].[StateName] AS 'State',
		   [State].[StateId],
		   [Country].[CountryName] AS 'Country',
		   [Country].[CountryCode],
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[CustomerCode],
		   [Customer].[OrganizationId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	ORDER BY [Customer].[CustomerName]

	SELECT	[Project].[ProjectId],
		[Project].[CustomerId],
		[Customer].[OrganizationId],
		[Project].[ProjectCreatedUtc],
		[Project].[ProjectName] AS [ProjectName],
		[Project].[IsActive],
		[ProjectCode],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Customer].[CustomerName] AS [CustomerName],
		[Customer].[CustomerCode],
		[Customer].[IsActive] AS [IsCustomerActive],
		[Project].[IsHourly] AS [IsHourly]
	FROM [Auth].[Organization] WITH (NOLOCK) 
		JOIN [Crm].[Customer]	WITH (NOLOCK) ON ([Customer].[OrganizationId] = [Organization].[OrganizationId] AND [Organization].[OrganizationId] = @orgId)
		JOIN [Pjm].[Project]		WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]

	SELECT [FirstName], [LastName], [ProductRoleId], [User].[UserId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK) 
	LEFT JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId]
	LEFT JOIN (SELECT [UserId], [ProductRoleId] 
				FROM [Billing].[SubscriptionUser] WITH (NOLOCK) 
				WHERE [SubscriptionId] = @subscriptionId)
				AS [OnRoles]
				ON [OnRoles].[UserId] = [User].[UserId]
	WHERE [OrganizationId] = @orgId AND [ProductRoleId] IS NOT NULL
GO
PRINT N'Altering [TimeTracker].[GetTimeEntryIndexInfo]...';


GO
ALTER PROCEDURE [TimeTracker].[GetTimeEntryIndexInfo]
	@organizationId INT,
	@userId INT,
	@productId INT,
	@startingDate DATE,
	@endingDate DATE
AS
	SET NOCOUNT ON;

	-- Settings is tmp table here so that the StartOfWeek field can be used in other Select
	-- blocks lower in this same stored procedure, while also letting the settings table itself be returned
	SELECT
		[StartOfWeek],
		[IsLockDateUsed],
		[LockDatePeriod],
		[LockDateQuantity],
		[LockDate],
		[PayrollProcessedDate]
	INTO #settings
	FROM [TimeTracker].[Setting] WITH (NOLOCK) 
	WHERE [OrganizationId] = @organizationId

	-- Starting and Ending date parameters are adjusted if the input is null, using the StartOfWeek from above
	DECLARE @startOfWeek INT = (SELECT TOP 1 [StartOfWeek] FROM #settings)
	DECLARE @todayDayOfWeek INT = ((6 + DATEPART(dw, GETDATE()) + @@dATEFIRST) % 7);

	IF(@startingDate IS NULL)
	BEGIN
		DECLARE @daysIntoWeek INT;
		IF (@todayDayOfWeek < @startOfWeek)
			SET @daysIntoWeek = @startOfWeek - @todayDayOfWeek - 7;
		ELSE
			SET @daysIntoWeek = @startOfWeek - @todayDayOfWeek;
		SET @startingDate = DATEADD(dd, @daysIntoWeek, GETDATE());
	END

	IF(@endingDate IS NULL)
	BEGIN
		DECLARE @daysLeftInWeek INT;
		IF (@todayDayOfWeek < @startOfWeek)
			SET @daysLeftInWeek = @startOfWeek - @todayDayOfWeek - 1;
		ELSE
			SET @daysLeftInWeek = @startOfWeek - @todayDayOfWeek + 6;
		SET @endingDate = DATEADD(dd, @daysLeftInWeek, GETDATE());
	END

	-- Begin select statements

	SELECT * FROM #settings

	
	SELECT [PayClassId], [PayClassName], [OrganizationId] FROM [Hrm].[PayClass] WITH (NOLOCK) WHERE [OrganizationId] = @organizationId;


	SELECT [HolidayId], [HolidayName], [Date], [OrganizationId] FROM [Hrm].[Holiday] WITH (NOLOCK) WHERE [OrganizationId] = @organizationId ORDER BY [Date];


	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[StartUtc] as [StartDate],
			[Project].[EndUtc] as [EndDate],
			[Project].[ProjectName] AS [ProjectName],
			[Project].[IsActive],
			[Project].[IsHourly] AS [IsHourly],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerCode],
			[Customer].[IsActive] AS [IsCustomerActive],
			[ProjectUser].[IsActive] AS [IsUserActive],
			[ProjectCode]
	FROM (
		(SELECT [OrganizationId], [UserId], [OrganizationRoleId]
		FROM [Auth].[OrganizationUser] WITH (NOLOCK) WHERE [UserId] = @userId AND [OrganizationId] = @organizationId)
		AS [OrganizationUser]
		JOIN [Auth].[Organization]		WITH (NOLOCK) ON [OrganizationUser].[OrganizationId] = [Organization].[OrganizationId]
		JOIN [Crm].[Customer]		WITH (NOLOCK) ON [Customer].[OrganizationId] = [Organization].[OrganizationId]
		JOIN ( [Pjm].[Project]
			JOIN [Pjm].[ProjectUser] WITH (NOLOCK) ON [ProjectUser].[ProjectId] = [Project].[ProjectId]
		)
										ON [Project].[CustomerId] = [Customer].[CustomerId]
										AND [ProjectUser].[UserId] = [OrganizationUser].[UserId]
	
	)
	UNION ALL
	SELECT	[ProjectId],
			[CustomerId],
			0,
			[ProjectCreatedUtc],
			[StartUtc],
			[EndUtc],
			[ProjectName],
			[IsActive],
			[IsHourly],
			(SELECT [OrganizationName] FROM [Auth].[Organization] WITH (NOLOCK) WHERE [OrganizationId] = 0),
			(SELECT [CustomerName] FROM [Crm].[Customer] WITH (NOLOCK) WHERE [CustomerId] = 0),
			NULL,
			0,
			0,
			[ProjectCode]
			FROM [Pjm].[Project] WITH (NOLOCK) WHERE [ProjectId] = 0
	ORDER BY [Project].[ProjectName]

	SELECT [User].[UserId],
		[User].[FirstName],
		[User].[LastName],
		[User].[Email]
	FROM [Auth].[User] WITH (NOLOCK) 
	LEFT JOIN [Billing].[SubscriptionUser]	WITH (NOLOCK) ON [SubscriptionUser].[UserId] = [User].[UserId]
	LEFT JOIN [Billing].[Subscription]		WITH (NOLOCK) ON [Subscription].[SubscriptionId] = [SubscriptionUser].[SubscriptionId]
	WHERE 
		[Subscription].[SubscriptionId] = (
		SELECT [SubscriptionId] 
		FROM [Billing].[Subscription] WITH (NOLOCK) 
		LEFT JOIN [Billing].[Sku]		WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
		LEFT JOIN [Auth].[Organization]	WITH (NOLOCK) ON [Organization].[OrganizationId] = [Subscription].[OrganizationId]
		WHERE [Subscription].[OrganizationId] = @organizationId
			AND [Sku].[ProductId] = @productId
			AND [Subscription].[IsActive] = 1
		)
	ORDER BY [User].[LastName]

	SELECT DISTINCT [TimeEntryId] 
		,[User].[UserId] AS [UserId]
		,[User].[FirstName] AS [FirstName]
		,[User].[LastName] AS [LastName]
		,[User].[Email]
		,[OrganizationUser].[EmployeeId]
		,[TimeEntry].[ProjectId]
		,[TimeEntry].[PayClassId]
		,[PayClass].[PayClassName] AS [PayClassName]
		,[Date]
		,[Duration]
		,[Description]
		,[TimeEntryStatusId]
	FROM [TimeTracker].[TimeEntry] WITH (NOLOCK) 
	JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [TimeEntry].[UserId]
	JOIN [Hrm].[PayClass] WITH (NOLOCK) ON [PayClass].[PayClassId] = [TimeEntry].[PayClassId]
	JOIN [Auth].[OrganizationUser] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId] AND [OrganizationUser].[OrganizationId] = @organizationId
	WHERE [User].[UserId] = @userId
		AND [Date] >= @startingDate
		AND [Date] <= @endingDate
		AND [PayClass].[OrganizationId] = @organizationId
	ORDER BY [Date] ASC
GO
PRINT N'Altering [Auth].[CreateInvitation]...';


GO
ALTER PROCEDURE [Auth].[CreateInvitation]
	@email NVARCHAR(384),
	@firstName NVARCHAR(40),
	@lastName NVARCHAR(40),
	@organizationId INT,
	@organizationName NVARCHAR(64),
	@organizationRole INT,
	@employeeId NVARCHAR(16),
	@prodJson NVARCHAR(384)
AS

BEGIN
	SET NOCOUNT ON;
	IF EXISTS (
		SELECT * FROM [Auth].[OrganizationUser] WITH (NOLOCK)
		INNER JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId]
		WHERE [Email] = @email AND [OrganizationId] = @organizationId
	)
	BEGIN
		SELECT -1 --Indicates the user is already in the organization
	END
	ELSE
	BEGIN
		-- Check for existing employee id
		IF EXISTS (
			SELECT * FROM [Auth].[OrganizationUser] WITH (NOLOCK)
			WHERE [OrganizationId] = @organizationId AND [EmployeeId] = @employeeId
		) OR EXISTS (
			SELECT * FROM [Auth].[Invitation] WITH (NOLOCK)
			WHERE [OrganizationId] = @organizationId AND [EmployeeId] = @employeeId AND [InvitationStatus] = 1
		)
		BEGIN
			SELECT -2 -- Indicates employee id already taken
		END
		ELSE
		BEGIN
			INSERT INTO [Auth].[Invitation] 
				([Email], 
				[FirstName], 
				[LastName], 
				[OrganizationId],
				[OrganizationName],
				[OrganizationRoleId],
				[EmployeeId],
				[ProductRolesJson]
				)
			VALUES 
				(@email, 
				@firstName, 
				@lastName, 
				@organizationId,
				@organizationName,
				@organizationRole,
				@employeeId,
				@prodJson
				);

			-- Return invitation id
			SELECT SCOPE_IDENTITY()
		END
	END
END
GO
PRINT N'Altering [Auth].[GetAddMemberInfo]...';


GO
ALTER PROCEDURE [Auth].[GetAddMemberInfo]
	@organizationId INT
AS
	SELECT TOP 1
		[EmployeeId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK)
	WHERE [OrganizationUser].[OrganizationId] = @organizationId
	ORDER BY [EmployeeId] DESC

	SELECT	[Product].[ProductId],
		[Product].[ProductName] AS [ProductName],
		[Subscription].[SubscriptionId],
		[Organization].[OrganizationId],
		[Subscription].[SkuId],
		[Subscription].[NumberOfUsers],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Sku].[SkuName] AS [SkuName]
	FROM [Billing].[Subscription] WITH (NOLOCK) 
	LEFT JOIN [Billing].[Sku]			WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
	LEFT JOIN [Auth].[Organization]	WITH (NOLOCK) ON [Organization].[OrganizationId] = [Subscription].[OrganizationId]
	LEFT JOIN [Billing].[Product]		WITH (NOLOCK) ON [Product].[ProductId] = [Sku].[ProductId]
	WHERE [Subscription].[OrganizationId] = @organizationId
	AND [Subscription].[IsActive] = 1
	ORDER BY [Product].[ProductName]

	SELECT 
		[ProductRole].[ProductRoleName],
		[ProductRole].[ProductRoleId],
		[ProductRole].[ProductId]
	FROM [Billing].[Subscription] WITH (NOLOCK) 
	LEFT JOIN [Billing].[Sku] WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
	RIGHT JOIN [Auth].[ProductRole]  WITH (NOLOCK) ON [ProductRole].[ProductId] = [Sku].[ProductId]
	WHERE [Subscription].[OrganizationId] = @organizationId AND [Subscription].[IsActive] = 1

	

	SELECT TOP 1
		[EmployeeId]
	FROM [Auth].[Invitation] WITH (NOLOCK)
	WHERE [OrganizationId] = @organizationId
	ORDER BY [EmployeeId] DESC
GO
PRINT N'Altering [Crm].[CreateCustomer]...';


GO
ALTER PROCEDURE [Crm].[CreateCustomer]
	@customerName NVARCHAR(32),
    @addressId INT,
	@contactEmail NVARCHAR(384), 
    @contactPhoneNumber VARCHAR(16),
	@faxNumber VARCHAR(16),
	@website NVARCHAR(128),
	@eIN NVARCHAR(16),
	@organizationId INT,
	@customerCode NVARCHAR(16)
AS
BEGIN
	SET NOCOUNT ON;
		INSERT INTO [Crm].[Customer] 
			([CustomerName], 
			[AddressId],
			[ContactEmail], 
			[ContactPhoneNumber], 
			[FaxNumber], 
			[Website], 
			[EIN], 
			[OrganizationId], 
			[CustomerCode])
		VALUES (@customerName, 
			@addressId,
			@contactEmail, 
			@contactPhoneNumber, 
			@faxNumber, 
			@website, 
			@eIN, 
			@organizationId, 
			@customerCode);
	
	SELECT
		SCOPE_IDENTITY();
END
GO
PRINT N'Altering [Crm].[CreateCustomerInfo]...';


GO
ALTER PROCEDURE [Crm].[CreateCustomerInfo]
	@customerName NVARCHAR(32),
    @address NVARCHAR(100),
    @city NVARCHAR(100), 
    @stateId int, 
    @countryCode VARCHAR(8), 
    @postalCode NVARCHAR(50),
	@contactEmail NVARCHAR(384), 
    @contactPhoneNumber VARCHAR(50),
	@faxNumber VARCHAR(50),
	@website NVARCHAR(50),
	@eIN NVARCHAR(50),
	@isActive BIT,
	@organizationId INT,
	@customerCode NVARCHAR(16),
	@retId INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @addressId INT

	IF EXISTS (
		SELECT * FROM [Crm].[Customer] WITH (NOLOCK)
		WHERE [CustomerCode] = @customerCode AND [OrganizationId] = @organizationId
	)
	BEGIN
		-- CustomerCode is not unique
		SET @retId = -1;
	END
	ELSE
	BEGIN

		begin tran t1

			if (@address is not null  or @city is not null or @postalCode is not null or @stateId is not null or @countryCode is not null)
			begin
				exec @addressId = [Lookup].CreateAddress @address, null, @city, @stateId, @postalCode, @countryCode
				if @@ERROR <> 0 
					goto _failure
			end

			-- Create customer
			INSERT INTO [Crm].[Customer] 
				([CustomerName], 
				[AddressId],
				[ContactEmail], 
				[ContactPhoneNumber], 
				[FaxNumber], 
				[Website], 
				[EIN], 
				[IsActive],
				[OrganizationId], 
				[CustomerCode])
			VALUES (@customerName, 
				@addressId,
				@contactEmail, 
				@contactPhoneNumber, 
				@faxNumber, 
				@website, 
				@eIN, 
				@isActive,
				@organizationId, 
				@customerCode);
			SET @retId = SCOPE_IDENTITY();
			if (@@ERROR <> 0)
					goto _failure
	SELECT @retId;
		_success:
			begin
				commit tran t1
				return @retId;
			end

		_failure:
			begin
				rollback tran t1
				return @retId;
			end		
	END
END
GO
PRINT N'Altering [Crm].[GetCustomerInfo]...';


GO
ALTER PROCEDURE [Crm].[GetCustomerInfo]
	@customerId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Customer].[AddressId],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[OrganizationId],
		   [Customer].[CustomerCode],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	WHERE [CustomerId] = @customerId
END
GO
PRINT N'Altering [Crm].[GetCustomerProfile]...';


GO
ALTER PROCEDURE [Crm].[GetCustomerProfile]
	@customerId INT
AS
BEGIN

	DECLARE @addressId AS INT
	
	SET NOCOUNT ON;
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Customer].[AddressId],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[OrganizationId],
		   [Customer].[CustomerCode],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	WHERE [CustomerId] = @customerId

	SET @addressId = (SELECT m.AddressId
					FROM [Crm].[Customer] AS m
					WHERE [CustomerId] = @customerId)

	SELECT [Address].[Address1],
		   [Address].[City],
		   [State].[StateName] AS 'State',
		   [Address].[CountryCode],
		   [Address].[StateId],
		   [Country].[CountryName] AS 'Country',
		   [Address].[PostalCode],
		   [Address].[AddressId]
	FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [AddressId] = @addressId
END
GO
PRINT N'Altering [Crm].[GetCustomersByOrgId]...';


GO
ALTER PROCEDURE [Crm].[GetCustomersByOrgId]
	@orgId INT
AS
	BEGIN
	SET NOCOUNT ON;
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Address1] AS 'Address',
		   [City],
		   [State].[StateName] AS 'StateName',
		   [State].[StateId],
		   [Country].[CountryName] AS 'CountryName',
		   [Country].[CountryCode],
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[OrganizationId],
		   [Customer].[CustomerCode],
		   [Customer].[AddressId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	ORDER BY [Customer].[CustomerName]
END
GO
PRINT N'Altering [Crm].[GetNextCustId]...';


GO
ALTER PROCEDURE [Crm].[GetNextCustId]
	@orgId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT TOP 1
		[CustomerCode]
	FROM [Crm].[Customer] WITH (NOLOCK)
	WHERE [Customer].[OrganizationId] = @orgId
	ORDER BY [CustomerCode] DESC;
END
GO
PRINT N'Altering [Crm].[UpdateCustomerInfo]...';


GO
ALTER PROCEDURE [Crm].[UpdateCustomerInfo]
	@customerId INT,
	@customerName NVARCHAR(50),
	@contactEmail NVARCHAR(384),
	@addressId INT,
    @address NVARCHAR(100), 
    @city NVARCHAR(100), 
    @stateId NVARCHAR(100), 
    @countryCode VARCHAR(8), 
    @postalCode NVARCHAR(50),
    @contactPhoneNumber VARCHAR(50),
	@faxNumber VARCHAR(50),
	@website NVARCHAR(50),
	@eIN NVARCHAR(50),
	@isActive BIT,
	@orgId NVARCHAR(16),
	@retId INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (
		SELECT * FROM [Crm].[Customer] WITH (NOLOCK)
		WHERE [CustomerCode] = @orgId
		AND [IsActive] = 1
		AND [CustomerId] != @customerId
	)
		BEGIN
			-- new CustomerCode is taken by a different Customer
			SET @retId = -1;
		END
	ELSE
		BEGIN
			declare @temp int
			set @temp = @addressId
			begin tran t1
			
				if @addressId is not null
					begin
				-- update address
						exec [Lookup].UpdateAddress @temp, @address, null, @city, @stateId, @postalCode, @countryCode
							if @@ERROR <> 0 
								goto _failure
					end
				else
					begin
						if(@address is not null or @city is not null or @postalCode is not null or @stateId is not null or @countryCode is not null)
							begin 
					-- create address
							exec @temp =  [Lookup].CreateAddress @address, null, @city, @stateId, @postalCode, @countryCode;
							if @@ERROR <> 0 
								goto _failure
							end 
					end 
				-- update customer
				UPDATE [Crm].[Customer]
				SET [CustomerName] = @customerName,
					[ContactEmail] = @contactEmail,
					[ContactPhoneNumber] = @contactPhoneNumber, 
					[FaxNumber] = @faxNumber,
					[Website] = @website,
					[EIN] = @eIN,
					[CustomerCode] = @orgId,
					[AddressId] =  @temp,
					IsActive = @isActive
				WHERE [CustomerId] = @customerId
			SET @retId = 1;
			SELECT @retId;
			_success:
				begin
					commit tran t1
					return
				end

			_failure:
				begin
					rollback tran t1
					return
				end
		END
END
GO
PRINT N'Altering [StaffingManager].[GetStaffingIndexInfo]...';


GO
ALTER PROCEDURE [StaffingManager].[GetStaffingIndexInfo]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [Position].[PositionId],
		[Position].[OrganizationId],
		[Position].[CustomerId],
		[Position].[AddressId],
		[PositionCreatedUtc],
		[PositionModifiedUtc],
		[StartDate], 
		[PositionStatusId],
		[PositionTitle], 
		[BillingRateFrequency],
		[BillingRateAmount],
		[DurationMonths],
		[EmploymentTypeId],
		[PositionCount],
		[RequiredSkills],
		[JobResponsibilities],
		[DesiredSkills],
		[PositionLevelId],
		[HiringManager],
		[TeamName],
		[Address].[Address1],
		[Address].[Address2],
		[Address].[City],
		[State].[StateName],
		[Country].[CountryName],
		[Address].[PostalCode]
	FROM [StaffingManager].[Position]
	LEFT JOIN [Lookup].[Address]				WITH (NOLOCK) ON [Address].[AddressId] = [Position].[AddressId]
	LEFT JOIN [Lookup].[Country]				WITH (NOLOCK) ON [Country].[CountryId] = [Address].[CountryId]
	LEFT JOIN [Lookup].[State]					WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Position].[OrganizationId] = @organizationId
	ORDER BY [StaffingManager].[Position].[StartDate] ASC

	-- Select all tags from the positions
	SELECT
		[Tag].[TagId],
		[Tag].[TagName],
		[Position].[PositionId]
	FROM [StaffingManager].[Position]
		JOIN [StaffingManager].[PositionTag] ON [PositionTag].[PositionId] = [Position].[PositionId]
		JOIN [Lookup].[Tag] ON [PositionTag].[TagId] = [Tag].[TagId]
	WHERE [Position].[OrganizationId] = @organizationId
	
	-- Select all Employment Types from the org
		SELECT [EmploymentTypeId],
		[OrganizationId],
		[EmploymentTypeName]
	FROM [StaffingManager].[EmploymentType]
	WHERE [EmploymentType].[OrganizationId] = @organizationId

	-- Select all Position Levels from the org
	SELECT [PositionLevelId],
		[OrganizationId],
		[PositionLevelName]
	FROM [StaffingManager].[PositionLevel]
	WHERE [PositionLevel].[OrganizationId] = @organizationId

	-- Select all Position Status' from the org
		SELECT [PositionStatusId],
		[OrganizationId],
		[PositionStatusName]
	FROM [StaffingManager].[PositionStatus]
	WHERE [PositionStatus].[OrganizationId] = @organizationId
	
	-- Select all application Status' from the org
		SELECT [ApplicationStatusId],
		[OrganizationId],
		[ApplicationStatusName]
	FROM [StaffingManager].[ApplicationStatus]
	WHERE [ApplicationStatus].[OrganizationId] = @organizationId

	-- Select all Customers for each position
	SELECT 
		[Customer].[CustomerId],
		[Customer].[CustomerName],
		[Customer].[AddressId],
		[Customer].[ContactEmail],
		[Customer].[ContactPhoneNumber],
		[Customer].[FaxNumber],
		[Customer].[Website],
		[Customer].[EIN],
		[Customer].[CustomerCreatedUtc],
		[Customer].[OrganizationId],
		[Customer].[CustomerCode],
		[Customer].[IsActive]
    FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK)
    WHERE [Customer].[OrganizationId] = @organizationId
END
GO
PRINT N'Altering [StaffingManager].[GetStaffingIndexInfoFiltered]...';


GO
ALTER PROCEDURE [StaffingManager].[GetStaffingIndexInfoFiltered]
	@organizationId INT,
	@status			[StaffingManager].[StatusesTable] READONLY,
	@type			[StaffingManager].[TypesTable] READONLY,
	@tags			[Lookup].[TagTable] READONLY
AS
BEGIN
	DECLARE @sSQL NVARCHAR(MAX), @Where NVARCHAR(MAX) = ''
	DECLARE @order NVARCHAR(100) = ' ORDER BY [StaffingManager].[Position].[StartDate] ASC'
	SET @sSQL =
		'SELECT DISTINCT [Position].[PositionId],
			[Position].[OrganizationId],
			[Position].[CustomerId],
			[Position].[AddressId],
			[StartDate], 
			[Position].[PositionStatusId],
			[PositionTitle], 
			[BillingRateFrequency],
			[BillingRateAmount],
			[DurationMonths],
			[Position].[EmploymentTypeId],
			[PositionCount],
			[RequiredSkills],
			[JobResponsibilities],
			[DesiredSkills],
			[PositionLevelId],
			[HiringManager],
			[TeamName],
			[Address].[Address1],
			[Address].[Address2],
			[Address].[City],
			[State].[StateName],
			[Country].[CountryName],
			[Address].[PostalCode],
			[Customer].[CustomerId],
			[Customer].[CustomerName],
			[Customer].[AddressId],
			[Customer].[ContactEmail],
			[Customer].[ContactPhoneNumber],
			[Customer].[FaxNumber],
			[Customer].[Website],
			[Customer].[EIN],
			[Customer].[CustomerCreatedUtc],
			[Customer].[OrganizationId],
			[Customer].[CustomerCode],
			[Customer].[IsActive]
		FROM [StaffingManager].[Position]
		LEFT JOIN [StaffingManager].[PositionTag]	 WITH (NOLOCK) ON [PositionTag].[PositionId] = [Position].[PositionId]
			 JOIN [Lookup].[Tag]					 WITH (NOLOCK) ON [PositionTag].[TagId] = [Tag].[TagId]
		LEFT JOIN [Lookup].[Address]				 WITH (NOLOCK) ON [Address].[AddressId] = [Position].[AddressId]
		LEFT JOIN [Lookup].[Country]				 WITH (NOLOCK) ON [Country].[CountryId] = [Address].[CountryId]
		LEFT JOIN [Lookup].[State]					 WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
		LEFT JOIN [CRM].[Customer]					 WITH (NOLOCK) ON [Customer].[CustomerId] = [Position].[CustomerId]
		LEFT JOIN [StaffingManager].[EmploymentType] WITH (NOLOCK) ON [EmploymentType].[EmploymentTypeId] = [Position].[EmploymentTypeId]
		LEFT JOIN [StaffingManager].[PositionStatus] WITH (NOLOCK) ON [PositionStatus].[PositionStatusId] = [Position].[PositionStatusId]
		WHERE [Position].[OrganizationId] = @_organizationId '
	IF (SELECT count(*) from @status) > 0
		SET @Where = CONCAT(@Where, 'AND [PositionStatus].[PositionStatusName] IN ( SELECT [StatusName] FROM @_Status) ')
	IF(SELECT count(*) from @type) > 0
		SET @Where = CONCAT(@Where, 'AND [EmploymentType].[EmploymentTypeName] IN (SELECT [TypeName] FROM @_Type) ')
	IF (SELECT count(*) from @tags) > 0
		SET @Where = CONCAT(@Where, 'AND [Tag].[TagName] IN (SELECT [TagName] FROM @_Tags) ')
		SET @sSQL = CONCAT(@sSQL, @where, @order)
	EXEC sp_executesql @sSQL,
		N'@_organizationId INT, @_Status [StaffingManager].[StatusesTable] READONLY, @_Type [StaffingManager].[TypesTable] READONLY, @_Tags [Lookup].[TagTable] READONLY',
	@_organizationId = @organizationId, @_Status = @status, @_Type = @type, @_Tags = @tags

	-- Select all tags from the positions
	SELECT
		[Tag].[TagId],
		[Tag].[TagName],
		[Position].[PositionId]
	FROM [StaffingManager].[Position]
		JOIN [StaffingManager].[PositionTag] ON [PositionTag].[PositionId] = [Position].[PositionId]
		JOIN [Lookup].[Tag] ON [PositionTag].[TagId] = [Tag].[TagId]
	WHERE [Position].[OrganizationId] = @organizationId
	
	-- Select all Employment Types from the org
		SELECT [EmploymentTypeId],
		[OrganizationId],
		[EmploymentTypeName]
	FROM [StaffingManager].[EmploymentType]
	WHERE [EmploymentType].[OrganizationId] = @organizationId

	-- Select all Position Levels from the org
	SELECT [PositionLevelId],
		[OrganizationId],
		[PositionLevelName]
	FROM [StaffingManager].[PositionLevel]
	WHERE [PositionLevel].[OrganizationId] = @organizationId

	-- Select all Position Status' from the org
		SELECT [PositionStatusId],
		[OrganizationId],
		[PositionStatusName]
	FROM [StaffingManager].[PositionStatus]
	WHERE [PositionStatus].[OrganizationId] = @organizationId
	
	-- Select all application Status' from the org
		SELECT [ApplicationStatusId],
		[OrganizationId],
		[ApplicationStatusName]
	FROM [StaffingManager].[ApplicationStatus]
	WHERE [ApplicationStatus].[OrganizationId] = @organizationId
	
	-- Select all Positions Customers from the org
	SELECT [CustomerId],
		   [CustomerName],
		   [AddressId],
		   [ContactEmail],
		   [ContactPhoneNumber],
		   [FaxNumber],
		   [Website],
		   [EIN],
		   [CustomerCreatedUtc],
		   [OrganizationId],
		   [CustomerCode],
		   [IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK)
	WHERE [Customer].[OrganizationId] = @organizationId
END
GO
PRINT N'Creating [Crm].[FullDeleteCustomer]...';


GO
CREATE PROCEDURE [Crm].[FullDeleteCustomer]
	@customerId INT
AS
	DELETE FROM [Crm].[Customer] WHERE [CustomerId] = @customerId
RETURN 1
GO
PRINT N'Creating [Pjm].[FullDeleteProject]...';


GO
CREATE PROCEDURE [Pjm].[FullDeleteProject]
	@projectId INT
AS
	DELETE FROM [Pjm].[Project] WHERE [ProjectId] = @projectId
GO
PRINT N'Creating [Pjm].[GetNextProjectId]...';


GO
CREATE PROCEDURE [Pjm].[GetNextProjectId]
	@orgId INT,
	@subscriptionId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT TOP 1
		[ProjectCode]
	FROM [Pjm].[Project] WITH (NOLOCK) Join
	[Crm].[Customer] ON [Crm].[Customer].[CustomerId] = [Pjm].[Project].[CustomerId]
	WHERE [Customer].[OrganizationId] = @orgId
	ORDER BY [ProjectCode] DESC
END
GO
PRINT N'Creating [Pjm].[GetProjectByProjectCode]...';


GO
CREATE PROCEDURE [Pjm].[GetProjectByProjectCode]
	@projectCode NVARCHAR
AS
	SET NOCOUNT ON;
	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[ProjectName] AS [ProjectName],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerCode],
			[Project].[IsHourly] AS [PriceType],
			[Project].[IsActive],
			[Project].[StartUtc] AS [StartDate],
			[Project].[EndUtc] AS [EndDate],
			[Project].[ProjectCode]
			FROM (
		(SELECT [ProjectId], [CustomerId], [ProjectName], [IsHourly], [StartUtc], [EndUtc], [IsActive], 
				[ProjectCreatedUtc], [ProjectCode] FROM [Pjm].[Project] WITH (NOLOCK) WHERE [ProjectCode] = @projectCode) AS [Project]
			JOIN [Crm].[Customer] WITH (NOLOCK) ON [Customer].[CustomerId] = [Project].[CustomerId]
			JOIN [Auth].[Organization] WITH (NOLOCK) ON [Organization].[OrganizationId] = [Customer].[OrganizationId]
	)
GO
PRINT N'Creating [TimeTracker].[GetTimeEntriesByProjectId]...';


GO
CREATE PROCEDURE [TimeTracker].[GetTimeEntriesByProjectId]
	@projectId INT
AS
	SET NOCOUNT ON;
	SELECT
		[UserId],
		[ProjectId],
		[PayClassId],
		[Date],
		[Duration],
		[Description],
		[IsLockSaved],
		[TimeEntryStatusId]
	FROM [TimeTracker].[TimeEntry] WITH (NOLOCK) 
	WHERE [ProjectId] = @projectId
GO
PRINT N'Refreshing [Auth].[DeleteOrgUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[DeleteOrgUser]';


GO
PRINT N'Refreshing [Crm].[DeleteCustomer]...';


GO
EXECUTE sp_refreshsqlmodule N'[Crm].[DeleteCustomer]';


GO
PRINT N'Refreshing [Hrm].[DeleteHoliday]...';


GO
EXECUTE sp_refreshsqlmodule N'[Hrm].[DeleteHoliday]';


GO
PRINT N'Refreshing [TimeTracker].[CreateBulkTimeEntry]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[CreateBulkTimeEntry]';


GO
PRINT N'Refreshing [Hrm].[CreateHoliday]...';


GO
EXECUTE sp_refreshsqlmodule N'[Hrm].[CreateHoliday]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '49db4cb6-876f-49c7-a19d-090187178b86')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('49db4cb6-876f-49c7-a19d-090187178b86')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6b886332-93af-46bf-9ca5-1734f843a564')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6b886332-93af-46bf-9ca5-1734f843a564')

GO

GO
PRINT N'Checking existing data against newly created constraints';





GO
ALTER TABLE [Pjm].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_Customer];

ALTER TABLE [Pjm].[ProjectUser] WITH CHECK CHECK CONSTRAINT [FK_ProjectUser_Project];

ALTER TABLE [TimeTracker].[TimeEntry] WITH CHECK CHECK CONSTRAINT [FK_TimeEntry_Project];

PRINT N'Update enum';

 
UPDATE [Expense].[ExpenseReport] SET [ExpenseReport].[ReportStatus] = 16 WHERE [ExpenseReport].[ReportStatus] = 4;
UPDATE [Expense].[ExpenseReport] SET [ExpenseReport].[ReportStatus] = 6 WHERE [ExpenseReport].[ReportStatus] = 3;
UPDATE [Expense].[ExpenseReport] SET [ExpenseReport].[ReportStatus] = 4 WHERE [ExpenseReport].[ReportStatus] = 2;
UPDATE [Expense].[ExpenseReport] SET [ExpenseReport].[ReportStatus] = 2 WHERE [ExpenseReport].[ReportStatus] = 1;
UPDATE [Expense].[ExpenseReport] SET [ExpenseReport].[ReportStatus] = 1 WHERE [ExpenseReport].[ReportStatus] = 0; 

UPDATE [Expense].[ExpenseReportHistory] SET [ExpenseReportHistory].[Status] = 8 WHERE [ExpenseReportHistory].[Status] = 4;
UPDATE [Expense].[ExpenseReportHistory] SET [ExpenseReportHistory].[Status] = 6 WHERE [ExpenseReportHistory].[Status] = 3;
UPDATE [Expense].[ExpenseReportHistory] SET [ExpenseReportHistory].[Status] = 4 WHERE [ExpenseReportHistory].[Status] = 2;
UPDATE [Expense].[ExpenseReportHistory] SET [ExpenseReportHistory].[Status] = 2 WHERE [ExpenseReportHistory].[Status] = 1;
UPDATE [Expense].[ExpenseReportHistory] SET [ExpenseReportHistory].[Status] = 1 WHERE [ExpenseReportHistory].[Status] = 0; 
 

UPDATE [Billing].[Sku] SET [Sku].[BillingFrequency] = 4  WHERE [Sku].[BillingFrequency] = 3;
UPDATE [Billing].[Sku] SET [Sku].[BillingFrequency] = 8  WHERE [Sku].[BillingFrequency] = 6;
UPDATE [Billing].[Sku] SET [Sku].[BillingFrequency] = 16 WHERE [Sku].[BillingFrequency] = 12; 
 
GO



PRINT N'Update complete.';


GO
