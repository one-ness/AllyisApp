/*
Deployment script for AllyisAppsDB_1.2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AllyisAppsDB_1.2"
:setvar DefaultFilePrefix "AllyisAppsDB_1.2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [Billing].[Subscription].[IX_Subscription_SkuId_OrganizationId]...';


GO
DROP INDEX [IX_Subscription_SkuId_OrganizationId]
    ON [Billing].[Subscription];


GO
PRINT N'Dropping [Lookup].[FK_Address_Country]...';


GO
ALTER TABLE [Lookup].[Address] DROP CONSTRAINT [FK_Address_Country];


GO
PRINT N'Dropping [Lookup].[FK_Address_State]...';


GO
ALTER TABLE [Lookup].[Address] DROP CONSTRAINT [FK_Address_State];


GO
PRINT N'Dropping [Lookup].[FK_OrganizationLocation_Address]...';


GO
ALTER TABLE [Lookup].[OrganizationLocation] DROP CONSTRAINT [FK_OrganizationLocation_Address];


GO
PRINT N'Dropping [Crm].[GetCustomerAndCountries]...';


GO
DROP PROCEDURE [Crm].[GetCustomerAndCountries];


GO
PRINT N'Dropping [Crm].[GetNextCustIdAndCountries]...';


GO
DROP PROCEDURE [Crm].[GetNextCustIdAndCountries];


GO
PRINT N'Altering [aaUser]...';


GO
ALTER USER [aaUser]
    WITH LOGIN = [aaUser];


GO
PRINT N'Altering [Auth].[User]...';


GO
ALTER TABLE [Auth].[User] ALTER COLUMN [AddressId] INT NULL;


GO
PRINT N'Starting rebuilding table [Lookup].[Address]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Lookup].[tmp_ms_xx_Address] (
    [AddressId]   INT           IDENTITY (198321, 3) NOT NULL,
    [Address1]    NVARCHAR (64) NULL,
    [Address2]    NVARCHAR (64) NULL,
    [City]        NVARCHAR (32) NULL,
    [StateId]     INT           NULL,
    [PostalCode]  NVARCHAR (16) NULL,
    [CountryCode] VARCHAR (8)   NULL,
    [CountryId]   INT           NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Address1] PRIMARY KEY CLUSTERED ([AddressId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Lookup].[Address])
    BEGIN
        SET IDENTITY_INSERT [Lookup].[tmp_ms_xx_Address] ON;
        INSERT INTO [Lookup].[tmp_ms_xx_Address] ([AddressId], [Address1], [Address2], [City], [StateId], [PostalCode], [CountryId])
        SELECT   [AddressId],
                 [Address1],
                 [Address2],
                 [City],
                 [StateId],
                 [PostalCode],
                 [CountryId]
        FROM     [Lookup].[Address]
        ORDER BY [AddressId] ASC;
        SET IDENTITY_INSERT [Lookup].[tmp_ms_xx_Address] OFF;
    END

DROP TABLE [Lookup].[Address];

EXECUTE sp_rename N'[Lookup].[tmp_ms_xx_Address]', N'Address';

EXECUTE sp_rename N'[Lookup].[tmp_ms_xx_constraint_PK_Address1]', N'PK_Address', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [Lookup].[FK_Address_Country]...';


GO
ALTER TABLE [Lookup].[Address] WITH NOCHECK
    ADD CONSTRAINT [FK_Address_Country] FOREIGN KEY ([CountryId]) REFERENCES [Lookup].[Country] ([CountryId]);


GO
PRINT N'Creating [Lookup].[FK_Address_State]...';


GO
ALTER TABLE [Lookup].[Address] WITH NOCHECK
    ADD CONSTRAINT [FK_Address_State] FOREIGN KEY ([StateId]) REFERENCES [Lookup].[State] ([StateId]);


GO
PRINT N'Creating [Lookup].[FK_OrganizationLocation_Address]...';


GO
ALTER TABLE [Lookup].[OrganizationLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationLocation_Address] FOREIGN KEY ([AddressId]) REFERENCES [Lookup].[Address] ([AddressId]);


GO
PRINT N'Creating [Lookup].[FK_Address_Country1]...';


GO
ALTER TABLE [Lookup].[Address] WITH NOCHECK
    ADD CONSTRAINT [FK_Address_Country1] FOREIGN KEY ([CountryCode]) REFERENCES [Lookup].[Country] ([CountryCode]);


GO
PRINT N'Altering [Auth].[GetOrgManagementInfo]...';


GO
ALTER PROCEDURE [Auth].[GetOrgManagementInfo]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		[OrganizationId],
		[Organization].[OrganizationName],
		[SiteUrl],
		[Address].[AddressId],
		[Address].[Address1] AS 'Address',
		[Address].[City], 
		[State].[StateName] AS 'StateName', 
		[Country].[CountryName] AS 'CountryName', 
		[Address].[PostalCode], 
		[PhoneNumber], 
		[FaxNumber], 
		[Subdomain],
		[OrganizationCreatedUtc]

	FROM [Auth].[Organization] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE OrganizationId = @organizationId

	SELECT [OU].[OrganizationId],
	    [OU].[UserId],
		[OU].[OrganizationRoleId],
		[O].[OrganizationName] AS [OrganizationName],
		[OU].[EmployeeId],
		[U].[Email],
		[U].[FirstName],
		[U].[LastName]
    FROM [Auth].[OrganizationUser]	AS [OU]
	WITH (NOLOCK)
    INNER JOIN [Auth].[User]		AS [U] WITH (NOLOCK) 
		ON [U].[UserId] = [OU].[UserId]
	INNER JOIN [Auth].[Organization] AS [O] WITH (NOLOCK)
		ON [O].[OrganizationId] = [OU].[OrganizationId]
    WHERE [OU].[OrganizationId] = @organizationId
	ORDER BY [U].[LastName]

	SELECT	[Product].[ProductId],
		[Product].[ProductName] AS [ProductName],
		[Product].[AreaUrl],
		[Subscription].[SubscriptionId],
		[Organization].[OrganizationId],
		[Subscription].[SkuId],
		[Subscription].[NumberOfUsers],
		[Subscription].[SubscriptionName],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Sku].[SkuName] AS [SkuName]
	FROM [Billing].[Subscription] WITH (NOLOCK) 
	LEFT JOIN [Billing].[Sku]			WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
	LEFT JOIN [Auth].[Organization]	WITH (NOLOCK) ON [Organization].[OrganizationId] = [Subscription].[OrganizationId]
	LEFT JOIN [Billing].[Product]		WITH (NOLOCK) ON [Product].[ProductId] = [Sku].[ProductId]
	WHERE [Subscription].[OrganizationId] = @organizationId
	AND [Subscription].[IsActive] = 1
	ORDER BY [Product].[ProductName]

	SELECT 
		[InvitationId],
		[Email],
		[FirstName],
		[LastName], 
		[DateOfBirth], 
		[OrganizationId], 
		[AccessCode], 
		[Invitation].[OrganizationRoleId],
		[OrganizationRoleName] AS [OrganizationRoleName],
		[EmployeeId]
	FROM [Auth].[Invitation] WITH (NOLOCK)
	LEFT JOIN [Auth].[OrganizationRole] WITH (NOLOCK) ON [OrganizationRole].[OrganizationRoleId] = [Invitation].[OrganizationRoleId]
	WHERE [OrganizationId] = @organizationId AND [IsActive] = 1

	SELECT [StripeTokenCustId]
	FROM [Billing].[StripeOrganizationCustomer] WITH (NOLOCK) 
	WHERE [OrganizationId] = @organizationId AND [IsActive] = 1

	SELECT
		[Product].[ProductId],
		[Sku].[SkuName],
		[Product].[Description],
		[Product].[AreaUrl]
	FROM [Billing].[Product] WITH (NOLOCK) 
	INNER JOIN [Billing].[Sku] WITH (NOLOCK) ON [Product].[ProductId] = [Sku].[ProductId]
	RIGHT JOIN [Billing].[Subscription] WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
	WHERE [Product].[IsActive] = 1 AND [Subscription].[IsActive] = 1 AND [Subscription].OrganizationId = @organizationId
	ORDER BY [Product].[ProductName]
END
GO
PRINT N'Altering [Auth].[GetUserFromEmail]...';


GO
ALTER PROCEDURE [Auth].[GetUserFromEmail]
	@email NVARCHAR(384)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [UserId]
		,[FirstName]
		,[LastName]
		,[DateOfBirth]
		,[Address1] as 'Address'
		,[City]
		,[State].[StateName] AS 'State'
		,[Country].[CountryName] AS 'Country'
		,[PostalCode]
		,[Email]
		,[PhoneNumber]
		,[PhoneExtension]
		,[LastUsedSubscriptionId]
		,[LastUsedOrganizationId]
		,[PasswordHash]
		,[PreferredLanguageId]
	FROM [Auth].[User]
	WITH (NOLOCK)
	LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [User].[AddressId]
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Email] = @email;
END
GO
PRINT N'Altering [Auth].[GetUserInfo]...';


GO
ALTER PROCEDURE [Auth].[GetUserInfo]
	@userId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [User].[UserId],
		   [User].[FirstName],
		   [User].[LastName],
		   [User].[DateOfBirth],
		   [User].[AddressId],
		   [User].[Email],
		   [User].[PhoneNumber],
		   [User].[LastUsedSubscriptionId],
		   [User].[LastUsedOrganizationId],
		   [User].[IsEmailConfirmed],
		   [User].[EmailConfirmationCode],
		   [PreferredLanguageId]
	FROM [Auth].[User]
	WITH (NOLOCK)
	JOIN [Lookup].[Address]			WITH (NOLOCK) ON [Address].[AddressId] = [User].[AddressId]
	WHERE [UserId] = @userId;

	DECLARE @addressId INT
	SET @addressId = (SELECT U.AddressId
					 FROM [Auth].[User] AS U
					 WHERE [UserId] = @userId)

	SELECT [Address].[AddressId],
		   [Address].[Address1],
		   [Address].[City],
		   [State].[StateName] AS 'State',
		   [Address].[StateId],
		   [Address].[CountryCode],
		   [Country].[CountryName] AS 'Country',
		   [Address].[PostalCode]
	FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [AddressId] = @addressId
END
GO
PRINT N'Altering [Auth].[GetUserOrgsAndInvitationInfo]...';


GO
ALTER PROCEDURE [Auth].[GetUserOrgsAndInvitationInfo]
	@userId int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [User].[UserId],
			[User].[FirstName],
			[User].[LastName],
			[User].[DateOfBirth],
			[User].[Email],
			[User].[PhoneNumber],
			[User].[LastUsedSubscriptionId],
			[User].[LastUsedOrganizationId],
			[PreferredLanguageId]
	FROM [Auth].[User]
	WITH (NOLOCK)
	LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [User].[AddressId]
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [UserId] = @userId;

	SELECT [Auth].[Organization].[OrganizationId],
		   [Organization].[OrganizationName],
		   [SiteUrl],
		   [Address1] AS 'Address',
		   [Organization].[AddressId],
		   [City],
		   [Country].[CountryName] AS 'CountryName',
		   [State].[StateName] AS 'StateName',
		   [PostalCode],
		   [PhoneNumber],
		   [FaxNumber],
		   [Subdomain],
		   [Organization].[OrganizationCreatedUtc]
	FROM [Auth].[Organization] WITH (NOLOCK)
	RIGHT JOIN [Auth].[OrganizationUser]	WITH (NOLOCK) ON [OrganizationUser].[OrganizationId] = [Organization].[OrganizationId]
	LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [OrganizationUser].[UserId] = @userId 
		  AND [Auth].[Organization].[IsActive] = 1
	ORDER BY [OrganizationUser].[OrganizationRoleId] DESC, [Organization].[OrganizationName]

	SELECT 
		[InvitationId], 
		[Invitation].[Email], 
		[Invitation].[FirstName], 
		[Invitation].[LastName], 
		[Invitation].[DateOfBirth], 
		[Invitation].[OrganizationId],
		[Organization].[OrganizationName] AS 'OrganizationName',
		[AccessCode], 
		[OrganizationRoleId],
		[EmployeeId] 
	FROM [Auth].[User] WITH (NOLOCK)
	LEFT JOIN [Auth].[Invitation] WITH (NOLOCK) ON [User].[Email] = [Invitation].[Email]
	LEFT JOIN [Auth].[Organization] WITH (NOLOCK) ON [Invitation].[OrganizationId] = [Organization].[OrganizationId]
	WHERE [User].[UserId] = @userId AND [Invitation].[IsActive] = 1

	DECLARE @addressId INT
	SET @addressId = (SELECT m.AddressId
				FROM [Auth].[User] AS m
				WHERE [UserId] = @userId)

	SELECT [Address].[Address1],
		   [Address].[City],
		   [State].[StateName] AS 'State',
		   [Country].[CountryName] AS 'Country',
		   [Address].[PostalCode]
	FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].CountryCode = [Address].CountryCode
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [AddressId] = @addressId
END
GO
PRINT N'Altering [TimeTracker].[GetReportInfo]...';


GO
ALTER PROCEDURE [TimeTracker].[GetReportInfo]
	@orgId INT,
	@subscriptionId INT
AS
	SET NOCOUNT ON
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Customer].[AddressId],
		   [Address1] AS 'Address',
		   [City],
		   [State].[StateName] AS 'State',
		   [State].[StateId],
		   [Country].[CountryName] AS 'Country',
		   [Country].[CountryCode],
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[CustomerOrgId],
		   [Customer].[OrganizationId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	ORDER BY [Customer].[CustomerName]

	SELECT	[Project].[ProjectId],
		[Project].[CustomerId],
		[Customer].[OrganizationId],
		[Project].[ProjectCreatedUtc],
		[Project].[ProjectName] AS [ProjectName],
		[Project].[IsActive],
		[ProjectOrgId],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Customer].[CustomerName] AS [CustomerName],
		[Customer].[CustomerOrgId],
		[Customer].[IsActive] AS [IsCustomerActive],
		[Project].[IsHourly] AS [IsHourly]
	FROM [Auth].[Organization] WITH (NOLOCK) 
		JOIN [Crm].[Customer]	WITH (NOLOCK) ON ([Customer].[OrganizationId] = [Organization].[OrganizationId] AND [Organization].[OrganizationId] = @orgId)
		JOIN [Pjm].[Project]		WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]

	SELECT [FirstName], [LastName], [ProductRoleId], [User].[UserId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK) 
	LEFT JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId]
	LEFT JOIN (SELECT [UserId], [ProductRoleId] 
				FROM [Billing].[SubscriptionUser] WITH (NOLOCK) 
				WHERE [SubscriptionId] = @subscriptionId)
				AS [OnRoles]
				ON [OnRoles].[UserId] = [User].[UserId]
	WHERE [OrganizationId] = @orgId AND [ProductRoleId] IS NOT NULL
GO
PRINT N'Altering [Auth].[GetOrg]...';


GO
ALTER PROCEDURE [Auth].[GetOrg]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		[OrganizationId],
		[Organization].[OrganizationName],
		[SiteUrl], 
		[Address1] AS 'Address',
		[Organization].[AddressId],
		[City], 
		[State].[StateName] AS 'StateName', 
		[Country].[CountryName] AS 'CountryName', 
		[State].[StateId],
		[Country].[CountryCode],
		[PostalCode], 
		[PhoneNumber], 
		[FaxNumber], 
		[Subdomain],
		[OrganizationCreatedUtc]
	FROM [Auth].[Organization] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE OrganizationId = @organizationId
END
GO
PRINT N'Altering [Auth].[GetOrganizationsByUserId]...';


GO
ALTER PROCEDURE [Auth].[GetOrganizationsByUserId]
	@userId INT
AS
BEGIN
	SET NOCOUNT ON;
SELECT [Auth].[Organization].[OrganizationId]
      ,[Organization].[OrganizationName]
      ,[SiteUrl]
      ,[Address1] AS 'Address'
	  ,[Organization].[AddressId]
      ,[City]
      ,[State].[StateName] AS 'StateName'
	  ,[State].[StateId]
      ,[Country].[CountryName] AS 'CountryName'
	  ,[Country].[CountryCode] AS 'CountryCode'
      ,[PostalCode]
      ,[PhoneNumber]
	  ,[FaxNumber]
      ,[Organization].[OrganizationCreatedUtc]
FROM [Auth].[Organization] WITH (NOLOCK)
RIGHT JOIN [Auth].[OrganizationUser]	WITH (NOLOCK) ON [OrganizationUser].[OrganizationId] = [Organization].[OrganizationId]
JOIN [Lookup].[Address]					WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
LEFT JOIN [Lookup].[Country]			WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
LEFT JOIN [Lookup].[State]				WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
WHERE [OrganizationUser].[UserId] = @userId 
      AND [Auth].[Organization].[IsActive] = 1
ORDER BY [OrganizationUser].[OrganizationRoleId] DESC, [Organization].[OrganizationName]
END
GO
PRINT N'Altering [Auth].[GetOrgWithCountriesAndEmployeeId]...';


GO
ALTER PROCEDURE [Auth].[GetOrgWithCountriesAndEmployeeId]
	@organizationId int,
	@userId int
AS
	SELECT 
		[OrganizationId],
		[Organization].[OrganizationName],
		[SiteUrl], 
		[Organization].[AddressId],
		[Address].[Address1] AS 'Address',
		[Address].[City], 
		[State].[StateName] AS 'StateName', 
		[Country].[CountryName] AS 'CountryName', 
		[State].[StateId],
		[Country].[CountryCode] AS 'CountryCode',
		[Address].[PostalCode], 
		[PhoneNumber], 
		[FaxNumber], 
		[Subdomain],
		[OrganizationCreatedUtc] AS 'CreatedUtc'

	FROM [Auth].[Organization] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE OrganizationId = @organizationId

	SELECT [CountryName] FROM [Lookup].[Country] WITH (NOLOCK)

	SELECT [EmployeeId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK)
	WHERE [OrganizationUser].[OrganizationId] = @organizationId AND [OrganizationUser].[UserId] = @userId
GO
PRINT N'Altering [Crm].[GetCustomerInfo]...';


GO
ALTER PROCEDURE [Crm].[GetCustomerInfo]
	@customerId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Customer].[AddressId],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[OrganizationId],
		   [Customer].[CustomerOrgId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	WHERE [CustomerId] = @customerId
END
GO
PRINT N'Altering [Crm].[GetCustomersByOrgId]...';


GO
ALTER PROCEDURE [Crm].[GetCustomersByOrgId]
	@orgId INT
AS
	BEGIN
	SET NOCOUNT ON;
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Address1] AS 'Address',
		   [City],
		   [State].[StateName] AS 'StateName',
		   [State].[StateId],
		   [Country].[CountryName] AS 'CountryName',
		   [Country].[CountryCode],
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[OrganizationId],
		   [Customer].[CustomerOrgId],
		   [Customer].[AddressId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	AND [Customer].[IsActive] = 1
	ORDER BY [Customer].[CustomerName]
END
GO
PRINT N'Altering [Crm].[GetInactiveProjectsAndCustomersForOrgAndUser]...';


GO
ALTER PROCEDURE [Crm].[GetInactiveProjectsAndCustomersForOrgAndUser]
	@orgId int,
	@userId int
AS
	SET NOCOUNT ON

	SELECT	[Project].[ProjectId],
		[Project].[CustomerId],
		[Customer].[OrganizationId],
		[Project].[ProjectCreatedUtc],
		[Project].[ProjectName] AS [ProjectName],
		[Project].[IsActive],
		[ProjectOrgId],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Customer].[CustomerName] AS [CustomerName],
		[Customer].[CustomerOrgId],
		[Customer].[IsActive] AS [IsCustomerActive],
		[Project].[IsHourly] AS [IsHourly],
		[SUB].[IsProjectUser]
	FROM (
		[Auth].[Organization] WITH (NOLOCK) 
		JOIN [Crm].[Customer] WITH (NOLOCK) ON ([Customer].[OrganizationId] = [Organization].[OrganizationId] AND [Organization].[OrganizationId] = @orgId)
		JOIN [Pjm].[Project] WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]
		LEFT JOIN (
			SELECT 1 AS 'IsProjectUser',
			[ProjectUser].[ProjectId]
			FROM [Pjm].[ProjectUser] WITH (NOLOCK)
			WHERE [ProjectUser].[UserId] = @userId
		) [SUB] ON [SUB].[ProjectId] = [Project].[ProjectId]
	)
	
	WHERE [Customer].[IsActive] = 0
	OR [Project].[IsActive] = 0

	ORDER BY [Project].[ProjectName]

	SELECT DISTINCT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Address1],
		   [City],
		   [State].[StateName] AS 'StateName',
		   [Country].[CountryName] AS 'CountryName',
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[CustomerOrgId],
		   [Customer].[OrganizationId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Pjm].[Project] WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	AND ([Customer].[IsActive] = 0
	OR [Project].[IsActive] = 0)
	ORDER BY [Customer].[CustomerName]
GO
PRINT N'Altering [Pjm].[GetProjectsAndCustomersForOrgAndUser]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectsAndCustomersForOrgAndUser]
	@orgId int,
	@userId int
AS
	SET NOCOUNT ON

	SELECT	[Project].[ProjectId],
		[Project].[CustomerId],
		[Customer].[OrganizationId],
		[Project].[ProjectCreatedUtc],
		[Project].[ProjectName] AS [ProjectName],
		[Project].[IsActive],
		[ProjectOrgId],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Customer].[CustomerName] AS [CustomerName],
		[Customer].[CustomerOrgId],
		[Customer].[CustomerId],
		[Customer].[IsActive] AS [IsCustomerActive],
		[Project].[IsHourly] AS [IsHourly],
		[SUB].[IsProjectUser]
	FROM (
		[Auth].[Organization] WITH (NOLOCK) 
		JOIN [Crm].[Customer]	WITH (NOLOCK) ON ([Customer].[OrganizationId] = [Organization].[OrganizationId] AND [Organization].[OrganizationId] = @orgId)
		JOIN [Pjm].[Project]		WITH (NOLOCK) ON [Project].[CustomerId] = [Customer].[CustomerId]
		LEFT JOIN (
			SELECT 1 AS 'IsProjectUser',
			[ProjectUser].[ProjectId]
			FROM [Pjm].[ProjectUser] WITH (NOLOCK)
			WHERE [ProjectUser].[UserId] = @userId
		) [SUB] ON [SUB].[ProjectId] = [Project].[ProjectId]
	)
	
	WHERE [Customer].[IsActive] >= 1
		AND [Project].[IsActive] >= 1

	ORDER BY [Project].[ProjectName]

	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Address1],
		   [City],
		   [State].[StateName] AS 'State',
		   [Country].[CountryName] AS 'Country',
		   [PostalCode],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[CustomerOrgId],
		   [Customer].[OrganizationId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	LEFT JOIN [Lookup].[Address] WITH (NOLOCK) ON [Address].[AddressId] = [Customer].[AddressId]
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Customer].[OrganizationId] = @orgId
	AND [Customer].[IsActive] = 1
	ORDER BY [Customer].[CustomerName]
GO
PRINT N'Altering [Pjm].[GetProjectById]...';


GO
ALTER PROCEDURE [Pjm].[GetProjectById]
	@projectId INT
AS
	SET NOCOUNT ON;
	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[ProjectName] AS [ProjectName],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerOrgId],
			[Project].[IsHourly] AS [PriceType],
			[Project].[IsActive],
			[Project].[StartUtc] AS [StartDate],
			[Project].[EndUtc] AS [EndDate],
			[Project].[ProjectOrgId]
			FROM (
		(SELECT [ProjectId], [CustomerId], [ProjectName], [IsHourly], [StartUtc], [EndUtc], [IsActive], 
				[ProjectCreatedUtc], [ProjectOrgId] FROM [Pjm].[Project] WITH (NOLOCK) WHERE [ProjectId] = @projectId) AS [Project]
			JOIN [Crm].[Customer] WITH (NOLOCK) ON [Customer].[CustomerId] = [Project].[CustomerId]
			JOIN [Auth].[Organization] WITH (NOLOCK) ON [Organization].[OrganizationId] = [Customer].[OrganizationId]
	)
GO
PRINT N'Creating [Auth].[GetUserContext]...';


GO
CREATE procedure [Auth].[GetUserContext]
	@userId int
as
begin
	set nocount on
	-- return 3 result sets
	-- get user information
	select u.FirstName, u.LastName, u.UserId, u.Email, u.PreferredLanguageId from [User] u with (nolock)
	where u.UserId = @userId;

	-- get list of organizations and the user role in each
	create table #OrgAndRole(OrganizationId int, OrganizationRoleId int, OrganizationName nvarchar(64))
	insert into #OrgAndRole(OrganizationId, OrganizationRoleId, OrganizationName) select ou.OrganizationId, ou.OrganizationRoleId, o.OrganizationName from OrganizationUser ou with (nolock)
	inner join Organization o with (nolock) on o.OrganizationId = ou.OrganizationId
	where ou.UserId = @userId
	select * from #OrgAndRole with (nolock)

	-- get the subscriptions of those organizations and the role of the user in those subscriptions
	select s.SubscriptionId, s.SubscriptionName, --pr.ProductRoleName,
	sku.SkuId, sku.SkuName, p.ProductId, p.ProductName, p.AreaUrl, su.ProductRoleId, s.OrganizationId from Billing.Subscription s with (nolock)
	inner join #OrgAndRole orgrole with (nolock) on orgrole.OrganizationId = s.OrganizationId
	inner join Billing.Sku sku with (nolock) on sku.SkuId = s.SkuId
	inner join Billing.Product p with (nolock) on p.ProductId = sku.ProductId
	--inner join ProductRole pr with (nolock) on pr.ProductId = p.ProductId
	left join Billing.SubscriptionUser su with (nolock) on su.UserId = @userId and su.SubscriptionId = s.SubscriptionId
	where s.IsActive = 1;

	-- drop the temp table
	drop table #OrgAndRole
end
GO
PRINT N'Creating [Auth].[GetUserProfile]...';


GO
CREATE procedure Auth.GetUserProfile
	@userId int
as
begin
	set nocount on
	select u.*, a.*, s.StateName, c.CountryName from [User] u with (nolock)
	left join [Lookup].[Address] a with (nolock) on a.AddressId = u.AddressId
	left join [Lookup].[State] s with (nolock) on s.StateId = a.StateId
	left join [Lookup].[Country] c with (nolock) on c.CountryCode = a.CountryCode
	where u.UserId = @userId
end
GO
PRINT N'Creating [Crm].[GetCustomerProfile]...';


GO
CREATE PROCEDURE [Crm].[GetCustomerProfile]
	@customerId INT
AS
BEGIN

	DECLARE @addressId AS INT
	
	SET NOCOUNT ON;
	SELECT [Customer].[CustomerId],
		   [Customer].[CustomerName],
		   [Customer].[AddressId],
		   [Customer].[ContactEmail],
		   [Customer].[ContactPhoneNumber],
		   [Customer].[FaxNumber],
		   [Customer].[Website],
		   [Customer].[EIN],
		   [Customer].[CustomerCreatedUtc],
		   [Customer].[OrganizationId],
		   [Customer].[CustomerOrgId],
		   [Customer].[IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK) 
	WHERE [CustomerId] = @customerId

	SET @addressId = (SELECT m.AddressId
					FROM [Crm].[Customer] AS m
					WHERE [CustomerId] = @customerId)

	SELECT [Address].[Address1],
		   [Address].[City],
		   [State].[StateName] AS 'State',
		   [Address].[CountryCode],
		   [Address].[StateId],
		   [Country].[CountryName] AS 'Country',
		   [Address].[PostalCode],
		   [Address].[AddressId]
	FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [AddressId] = @addressId
END
GO
PRINT N'Creating [Crm].[GetNextCustId]...';


GO
CREATE PROCEDURE [Crm].[GetNextCustId]
	@orgId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT TOP 1
		[CustomerOrgId]
	FROM [Crm].[Customer] WITH (NOLOCK)
	WHERE [Customer].[OrganizationId] = @orgId
	ORDER BY [CustomerOrgId] DESC;
END
GO
PRINT N'Creating [Lookup].[CreateAddress]...';


GO
CREATE procedure [Lookup].[CreateAddress]
	@address1 nvarchar(64),
	@address2 nvarchar(64),
	@city nvarchar(32),
	@stateId smallint,
	@postalCode nvarchar(16),
	@countryCode varchar(8)
as
begin
	declare @cID int
	Select @cID = Country.CountryId
	From Country
	WHERE @countryCode = Country.CountryCode


	set nocount on
	insert into [Address] (Address1, Address2, City, StateId, PostalCode, CountryCode, CountryId) values (@address1, @address2, @city, @stateId, @postalCode, @countryCode,@cID)
	return SCOPE_IDENTITY()
end
GO
PRINT N'Creating [Lookup].[GetAddress]...';


GO
CREATE PROCEDURE [Lookup].[GetAddress]
	@addresId int
AS
BEGIN 
	SELECT * FROM [Lookup].[Address] WHERE [Address].AddressId = @addresId
END
GO
PRINT N'Creating [Lookup].[GetStates]...';


GO
create PROCEDURE [Lookup].[GetStates]
	@countryCode varchar(8)
AS
BEGIN
	SET NOCOUNT ON;
	select * from [State] with (nolock) where [State].CountryCode = @countryCode
END
GO
PRINT N'Creating [Lookup].[UpdateAddress]...';


GO
create procedure [Lookup].[UpdateAddress]
	@addressId int,
	@address1 nvarchar(64),
	@address2 nvarchar(64),
	@city nvarchar(32),
	@stateId smallint,
	@postalCode nvarchar(16),
	@countryCode varchar(8)
as
begin
	set nocount on
	update [Address] set Address1 = @address1, Address2 = @address2, City = @city, StateId = @stateId, CountryCode = @countryCode
	where AddressId = @addressId
end
GO
PRINT N'Altering [Auth].[CreateUser]...';


GO

ALTER PROCEDURE [Auth].[CreateUser]
	@email nvarchar(384),
	@passwordHash nvarchar(512),
	@firstName nvarchar(32),
	@lastName nvarchar(32),
	@emailConfirmationCode uniqueidentifier,
	@dateOfBirth date = null,
	@phoneNumber varchar(16) = null,
	@preferredLanguageId varchar(16) = null,
	@address1 nvarchar(64) = null,
	@address2 nvarchar(64) = null,
	@city nvarchar(32) = null,
	@stateId int = null,
	@postalCode nvarchar(16) = null,
	@countryCode varchar(8) = null
as
begin
	set nocount on
	declare @addressId int
	set @addressId = null
	declare @userId int
	set @userId = -1
	begin tran t1
	-- if any address value present, create address
	if (@address1 is not null or @address2 is not null or @city is not null or @postalCode is not null or @stateId is not null or @countryCode is not null)
		begin
			exec @addressId = [Lookup].CreateAddress @address1, @address2, @city, @stateId, @postalCode, @countryCode
			if @@ERROR <> 0 
				goto _failure
		end

	insert into Auth.[User] (Email, PasswordHash, FirstName, LastName, EmailConfirmationCode, DateOfBirth, PhoneNumber, PreferredLanguageId, AddressId) values (@email, @passwordHash, @firstName, @lastName, @emailConfirmationCode, @dateOfBirth, @phoneNumber, @preferredLanguageId, @addressId)
	if (@@ERROR <> 0)
		goto _failure

	select SCOPE_IDENTITY() as UserId

	_success:
		begin
			commit tran t1
			return
		end

	_failure:
		begin
			rollback tran t1
			return
		end
end
GO
PRINT N'Altering [Auth].[CreateOrganization]...';


GO
ALTER PROCEDURE [Auth].[CreateOrganization]
	@organizationName NVARCHAR(100),
	@siteUrl NVARCHAR(100),
	@address NVARCHAR(100),
	@city NVARCHAR(100),
	@stateID int,
	@countryCode VARCHAR(8),
	@postalCode NVARCHAR(50),
	@phoneNumber VARCHAR(50),
	@faxNumber VARCHAR(50),
	@subdomain NVARCHAR(40)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	declare @addressId int
	set @addressId = null

	BEGIN TRANSACTION
		-- Create Address
		if(@address is not null or @city is not null or @countryCode is not null or @postalCode is not null or @stateID is not null)
		Begin
			EXEC @addressId = [Lookup].CreateAddress @address, null, @city, @stateId, @postalCode, @countryCode
		end
		-- Create org
		INSERT INTO [Auth].[Organization] 
				([OrganizationName],
				[SiteUrl],
				[AddressId],
				[PhoneNumber],
				[FaxNumber],
				[Subdomain])
		VALUES (@organizationName,
				@siteUrl,
				@addressId,
				@phoneNumber,
				@faxNumber,
				@subdomain);
	COMMIT TRANSACTION

	-- return the new organization id
	SELECT IDENT_CURRENT('[Auth].[Organization]');
END
GO
PRINT N'Altering [Auth].[UpdateOrganization]...';


GO
ALTER PROCEDURE [Auth].[UpdateOrganization]
	@organizationId INT,
	@organizationName NVARCHAR(100),
	@siteUrl NVARCHAR(100),
	@address1 NVARCHAR(100), 
	@city NVARCHAR(100), 
	@stateId int, 
	@countryCode VARCHAR(8), 
	@postalCode NVARCHAR(16),
	@phoneNumber VARCHAR (50),
	@faxNumber VARCHAR (50),
	@subdomainName NVARCHAR (40),
	@addressId INT
AS
BEGIN
	declare @temp int
	set @temp = @addressId
	begin tran t1
	if @addressId is not null
		begin
			-- update address
			exec [Lookup].UpdateAddress @temp, @address1, null, @city, @stateId, @postalCode, @countryCode
			if @@ERROR <> 0 
				goto _failure
		end
	else
		begin
			if(@address1 is not null  or @city is not null or @postalCode is not null or @stateId is not null or @countryCode is not null)
			  begin 
				exec @temp = [Lookup].CreateAddress @address1, null, @city, @stateId, @postalCode, @countryCode;
				if @@ERROR <> 0 
					goto _failure
			  end 
		end 

	UPDATE [Auth].[Organization]
	SET [OrganizationName] = @organizationName,
		[SiteUrl] = @siteUrl,
		[PhoneNumber] = @phoneNumber,
		[FaxNumber] = @faxNumber,
		[Subdomain] = @subdomainName,
		[AddressId] = @temp
	WHERE [OrganizationId] = @organizationId
	;
	_success:
		begin
			commit tran t1
			return
		end

	_failure:
		begin
			rollback tran t1
			return
		end
END
GO
PRINT N'Altering [Crm].[CreateCustomerInfo]...';


GO
ALTER PROCEDURE [Crm].[CreateCustomerInfo]
	@customerName NVARCHAR(32),
    @address NVARCHAR(100),
    @city NVARCHAR(100), 
    @stateId int, 
    @countryCode VARCHAR(8), 
    @postalCode NVARCHAR(50),
	@contactEmail NVARCHAR(384), 
    @contactPhoneNumber VARCHAR(50),
	@faxNumber VARCHAR(50),
	@website NVARCHAR(50),
	@eIN NVARCHAR(50),
	@organizationId INT,
	@customerOrgId NVARCHAR(16),
	@retId INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @addressId INT

	IF EXISTS (
		SELECT * FROM [Crm].[Customer] WITH (NOLOCK)
		WHERE [CustomerOrgId] = @customerOrgId
	)
	BEGIN
		-- CustomerOrgId is not unique
		SET @retId = -1;
	END
	ELSE
	BEGIN

		begin tran t1

			if (@address is not null  or @city is not null or @postalCode is not null or @stateId is not null or @countryCode is not null)
			begin
				exec @addressId = [Lookup].CreateAddress @address, null, @city, @stateId, @postalCode, @countryCode
				if @@ERROR <> 0 
					goto _failure
			end

			-- Create customer
			INSERT INTO [Crm].[Customer] 
				([CustomerName], 
				[AddressId],
				[ContactEmail], 
				[ContactPhoneNumber], 
				[FaxNumber], 
				[Website], 
				[EIN], 
				[OrganizationId], 
				[CustomerOrgId])
			VALUES (@customerName, 
				@addressId,
				@contactEmail, 
				@contactPhoneNumber, 
				@faxNumber, 
				@website, 
				@eIN, 
				@organizationId, 
				@customerOrgId);
			SET @retId = SCOPE_IDENTITY();
			if (@@ERROR <> 0)
					goto _failure
	SELECT @retId;
		_success:
			begin
				commit tran t1
				return @retId;
			end

		_failure:
			begin
				rollback tran t1
				return @retId;
			end		
	END
END
GO
PRINT N'Altering [Crm].[UpdateCustomerInfo]...';


GO
ALTER PROCEDURE [Crm].[UpdateCustomerInfo]
	@customerId INT,
	@customerName NVARCHAR(50),
	@contactEmail NVARCHAR(384),
	@addressId INT,
    @address NVARCHAR(100), 
    @city NVARCHAR(100), 
    @stateId NVARCHAR(100), 
    @countryCode VARCHAR(8), 
    @postalCode NVARCHAR(50),
    @contactPhoneNumber VARCHAR(50),
	@faxNumber VARCHAR(50),
	@website NVARCHAR(50),
	@eIN NVARCHAR(50),
	@orgId NVARCHAR(16),
	@retId INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (
		SELECT * FROM [Crm].[Customer] WITH (NOLOCK)
		WHERE [CustomerOrgId] = @orgId
		AND [IsActive] = 1
		AND [CustomerId] != @customerId
	)
		BEGIN
			-- new CustomerOrgId is taken by a different Customer
			SET @retId = -1;
		END
	ELSE
		BEGIN
			declare @temp int
			set @temp = @addressId
			begin tran t1
			
				if @addressId is not null
					begin
				-- update address
						exec [Lookup].UpdateAddress @temp, @address, null, @city, @stateId, @postalCode, @countryCode
							if @@ERROR <> 0 
								goto _failure
					end
				else
					begin
						if(@address is not null or @city is not null or @postalCode is not null or @stateId is not null or @countryCode is not null)
							begin 
					-- create address
							exec @temp =  [Lookup].CreateAddress @address, null, @city, @stateId, @postalCode, @countryCode;
							if @@ERROR <> 0 
								goto _failure
							end 
					end 
				-- update customer
				UPDATE [Crm].[Customer]
				SET [CustomerName] = @customerName,
					[ContactEmail] = @contactEmail,
					[ContactPhoneNumber] = @contactPhoneNumber, 
					[FaxNumber] = @faxNumber,
					[Website] = @website,
					[EIN] = @eIN,
					[CustomerOrgId] = @orgId,
					[AddressId] =  @temp
				WHERE [CustomerId] = @customerId 
					AND [IsActive] = 1;
			SET @retId = 1;
			SELECT @retId;
			_success:
				begin
					commit tran t1
					return
				end

			_failure:
				begin
					rollback tran t1
					return
				end
		END
END
GO
PRINT N'Altering [Auth].[SetupOrganization]...';


GO
ALTER PROCEDURE [Auth].[SetupOrganization]
	@userId INT,
	@roleId INT,
	@organizationName NVARCHAR(100),
	@siteUrl NVARCHAR(100),
	@address NVARCHAR(100),
	@city NVARCHAR(100),
	@stateID INT,
	@countryCode VARCHAR(8),
	@postalCode NVARCHAR(50),
	@phoneNumber VARCHAR(50),
	@faxNumber VARCHAR(50),
	@subdomainName NVARCHAR(40),
	@employeeId NVARCHAR(16)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRANSACTION
		-- Create organization
		EXEC [Auth].[CreateOrganization] @organizationName, @siteUrl, @address, @city, @stateID, @countryCode, @postalCode, @phoneNumber, @faxNumber, @subdomainName;

		-- get the new organization id
		DECLARE @organizationId INT = IDENT_CURRENT('[Auth].[Organization]');

		-- Add user to the org
		EXEC [Auth].[CreateOrganizationUser] @userId, @organizationId, @roleId, @employeeId;

		-- Init default pay classes for org
		EXEC [Hrm].[CreateDefaultPayClass] @organizationId;
	COMMIT TRANSACTION

	-- return the new organization id
	SELECT @organizationId;
END
GO
PRINT N'Creating [Auth].[UpdateUserProfile]...';


GO
create procedure Auth.UpdateUserProfile
	@userId int,
	@firstName nvarchar(32),
	@lastName nvarchar(32),
	@dateOfBirth date = null,
	@phoneNumber varchar(16) = null,
	@addressId int = null,
	@address1 nvarchar(64) = null,
	@address2 nvarchar(64) = null,
	@city nvarchar(32) = null,
	@stateId smallint = null,
	@postalCode nvarchar(16) = null,
	@countryCode varchar(8) = null
as
begin
	set nocount on
	declare @temp int
	set @temp = @addressId
	begin tran t1

	-- create or update address
	if @addressId is not null
		begin
			-- update address
			exec [Lookup].UpdateAddress @temp, @address1, @address2, @city, @stateId, @postalCode, @countryCode
			if @@ERROR <> 0 
				goto _failure
		end
	else
		begin
			if(@address1 is not null or @address2 is not null or @city is not null or @postalCode is not null or @stateId is not null or @countryCode is not null)
				begin 
				-- create address
					exec @temp =  [Lookup].CreateAddress @address1, @address2, @city, @stateId, @postalCode, @countryCode;

					if @@ERROR <> 0 
						goto _failure
				end 
		end

	update [User] set AddressId = @temp, FirstName = @firstName, LastName = @lastName, PhoneNumber = @phoneNumber, DateOfBirth = @dateOfBirth
	where UserId = @userId

	_success:
		begin
			commit tran t1
			return
		end

	_failure:
		begin
			rollback tran t1
			return
		end
end
GO
PRINT N'Refreshing [Auth].[AcceptInvitation]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[AcceptInvitation]';


GO
PRINT N'Refreshing [Auth].[GetOrgAndSubRoles]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgAndSubRoles]';


GO
PRINT N'Refreshing [Auth].[GetOrganizationOwnerEmails]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrganizationOwnerEmails]';


GO
PRINT N'Refreshing [Auth].[GetOrgUserByEmail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgUserByEmail]';


GO
PRINT N'Refreshing [Auth].[GetOrgUserList]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgUserList]';


GO
PRINT N'Refreshing [Auth].[GetOrgUserRole]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgUserRole]';


GO
PRINT N'Refreshing [Auth].[GetPasswordHashFromUserId]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetPasswordHashFromUserId]';


GO
PRINT N'Refreshing [Auth].[GetRolesAndPermissions]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetRolesAndPermissions]';


GO
PRINT N'Refreshing [Auth].[GetUserContextInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetUserContextInfo]';


GO
PRINT N'Refreshing [Auth].[GetUsersWithSubscriptionToProductInOrganization]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetUsersWithSubscriptionToProductInOrganization]';


GO
PRINT N'Refreshing [Auth].[InviteUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[InviteUser]';


GO
PRINT N'Refreshing [Auth].[RemoveInvitation]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[RemoveInvitation]';


GO
PRINT N'Refreshing [Auth].[UpdateEmailConfirmed]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateEmailConfirmed]';


GO
PRINT N'Refreshing [Auth].[UpdateUserActiveOrg]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserActiveOrg]';


GO
PRINT N'Refreshing [Auth].[UpdateUserActiveSub]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserActiveSub]';


GO
PRINT N'Refreshing [Auth].[UpdateUserInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserInfo]';


GO
PRINT N'Refreshing [Auth].[UpdateUserLanguagePreference]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserLanguagePreference]';


GO
PRINT N'Refreshing [Auth].[UpdateUserPassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserPassword]';


GO
PRINT N'Refreshing [Auth].[UpdateUserPasswordResetCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserPasswordResetCode]';


GO
PRINT N'Refreshing [Auth].[UpdateUserPasswordUsingCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserPasswordUsingCode]';


GO
PRINT N'Refreshing [Billing].[GetBillingHistoryByOrg]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[GetBillingHistoryByOrg]';


GO
PRINT N'Refreshing [Pjm].[GetNextProjectIdAndSubUsers]...';


GO
EXECUTE sp_refreshsqlmodule N'[Pjm].[GetNextProjectIdAndSubUsers]';


GO
PRINT N'Refreshing [Pjm].[GetProjectEditInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Pjm].[GetProjectEditInfo]';


GO
PRINT N'Refreshing [Pjm].[GetProjectsForOrgAndUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[Pjm].[GetProjectsForOrgAndUser]';


GO
PRINT N'Refreshing [TimeTracker].[GetTimeEntriesByUserOverDateRange]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[GetTimeEntriesByUserOverDateRange]';


GO
PRINT N'Refreshing [TimeTracker].[GetTimeEntriesOverDateRange]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[GetTimeEntriesOverDateRange]';


GO
PRINT N'Refreshing [TimeTracker].[GetTimeEntryIndexInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[GetTimeEntryIndexInfo]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Lookup].[Address] WITH CHECK CHECK CONSTRAINT [FK_Address_Country];

ALTER TABLE [Lookup].[Address] WITH CHECK CHECK CONSTRAINT [FK_Address_State];

ALTER TABLE [Lookup].[OrganizationLocation] WITH CHECK CHECK CONSTRAINT [FK_OrganizationLocation_Address];

ALTER TABLE [Lookup].[Address] WITH CHECK CHECK CONSTRAINT [FK_Address_Country1];


GO
PRINT N'Update complete.';


GO


UPDATE [Lookup].[Address] SET  CountryCode = 
(Select [lookup].[Country].CountryCode FROM [Lookup].[Country] WHERE [Country].[CountryId] = [Address].[CountryId]);

Go
ALTER PROCEDURE [Auth].[GetUserInfo]
	@userId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [User].[UserId],
		   [User].[FirstName],
		   [User].[LastName],
		   [User].[DateOfBirth],
		   [User].[AddressId],
		   [User].[Email],
		   [User].[PhoneNumber],
		   [User].[LastUsedSubscriptionId],
		   [User].[LastUsedOrganizationId],
		   [User].[IsEmailConfirmed],
		   [User].[EmailConfirmationCode],
		   [PreferredLanguageId]
	FROM [Auth].[User]
	WITH (NOLOCK)
	JOIN [Lookup].[Address]			WITH (NOLOCK) ON [Address].[AddressId] = [User].[AddressId]
	WHERE [UserId] = @userId;

	DECLARE @addressId INT
	SET @addressId = (SELECT U.AddressId
					 FROM [Auth].[User] AS U
					 WHERE [UserId] = @userId)
	if(@addressId IS NOT NULL)
	BEGIN
		SELECT [Address].[AddressId],
			   [Address].[Address1],
			   [Address].[City],
			   [State].[StateName] AS 'State',
			   [Address].[StateId],
			   [Address].[CountryCode],
			   [Country].[CountryName] AS 'Country',
			   [Address].[PostalCode]
		FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
		WHERE [AddressId] = @addressId
	END

END
GO
PRINT N'Update complete.';
GO
ALTER PROCEDURE [Auth].[GetUserInfo]
	@userId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [User].[UserId],
		   [User].[FirstName],
		   [User].[LastName],
		   [User].[DateOfBirth],
		   [User].[AddressId],
		   [User].[Email],
		   [User].[PhoneNumber],
		   [User].[LastUsedSubscriptionId],
		   [User].[LastUsedOrganizationId],
		   [User].[IsEmailConfirmed],
		   [User].[EmailConfirmationCode],
		   [PreferredLanguageId]
	FROM [Auth].[User]
	WITH (NOLOCK)
	WHERE [UserId] = @userId;

	DECLARE @addressId INT
	SET @addressId = (SELECT U.AddressId
					 FROM [Auth].[User] AS U
					 WHERE [UserId] = @userId)
	if(@addressId IS NOT NULL)
	BEGIN
		SELECT [Address].[AddressId],
			   [Address].[Address1],
			   [Address].[City],
			   [State].[StateName] AS 'State',
			   [Address].[StateId],
			   [Address].[CountryCode],
			   [Country].[CountryName] AS 'Country',
			   [Address].[PostalCode]
		FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
		WHERE [AddressId] = @addressId
	END

END
GO
PRINT N'Update complete.';


GO


GO

