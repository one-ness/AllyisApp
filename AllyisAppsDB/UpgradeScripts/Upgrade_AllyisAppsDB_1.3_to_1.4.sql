/*
Deployment script for AllyisAppsDB_1.3_to_1.4 

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

BEGIN Transaction; 
/*
The column [Auth].[Invitation].[AccessCode] is being dropped, data loss could occur.

The column [Auth].[Invitation].[DateOfBirth] is being dropped, data loss could occur.

The type for column FirstName in table [Auth].[Invitation] is currently  NVARCHAR (40) NOT NULL but is being changed to  NVARCHAR (32) NOT NULL. Data loss could occur.

The type for column LastName in table [Auth].[Invitation] is currently  NVARCHAR (40) NOT NULL but is being changed to  NVARCHAR (32) NOT NULL. Data loss could occur.


ALL HANDELED 

IF EXISTS (select top 1 1 from [Auth].[Invitation])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
*/

/*
The column [Auth].[User].[LastUsedOrganizationId] is being dropped, data loss could occur.

The column DateOfBirth on table [Auth].[User] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

UPDATE Auth.[User] set DateOfBirth = DATEADD(year,-18,getUtcDate()) WHERE DateOfBirth IS NULL;
/*
Is email confirmed logic set is now set to work as expected. Aloow uers in that did not previously reqire an emial.
*/
Update Auth.[User] SET IsEmailConfirmed = 1 where IsEmailConfirmed = 0;

IF EXISTS (select top 1 1 from [Auth].[User] where DateOfBirth iS NULL)
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [Billing].[Subscription].[SubscriptionModifiedUtc] is being dropped, data loss could occur.

ALL HANDELED.
IF EXISTS (select top 1 1 from [Billing].[Subscription])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
*/
/*
The column [Expense].[ExpenseReport].[ReportDate] is being dropped, data loss could occur.
*/
/*

All HANDELED 
IF EXISTS (select top 1 1 from [Expense].[ExpenseReport])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
*/
PRINT N'Rename refactoring operation with key 52b32b4f-9b1c-4043-b7f4-87641f83ff97 is skipped, element [StaffingManager].[Position].[EmploymentType] (SqlSimpleColumn) will not be renamed to [EmploymentTypeId]';


GO
PRINT N'Rename refactoring operation with key abefad04-71e3-4b98-a32f-492f383c8847 is skipped, element [Auth].[Invitation].[Status] (SqlSimpleColumn) will not be renamed to StatusId';


GO
PRINT N'The following operation was generated from a refactoring log file 21b539e5-826f-4500-9fab-7063780ce0f5';

PRINT N'Rename [Auth].[RemoveInvitation] to DeleteInvitation';


GO
EXECUTE sp_rename @objname = N'[Auth].[RemoveInvitation]', @newname = N'DeleteInvitation', @objtype = N'OBJECT';


GO
PRINT N'Rename refactoring operation with key 7d101c52-1703-4eca-8686-50fbe419ebe2 is skipped, element [Auth].[Invitation].[DecisionDate] (SqlSimpleColumn) will not be renamed to DecisionDateUtc';


GO
PRINT N'Dropping [Expense].[trg_update_report_ModifiedUtc]...';


GO
DROP TRIGGER [Expense].[trg_update_report_ModifiedUtc];


GO
PRINT N'Dropping [Auth].[DF__User__EmailConfirmed]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [DF__User__EmailConfirmed];


GO
PRINT N'Dropping [Auth].[DF__User__PhoneNumberConfirmed]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [DF__User__PhoneNumberConfirmed];


GO
PRINT N'Dropping [Auth].[DF__User__TwoFactorEnabled]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [DF__User__TwoFactorEnabled];


GO
PRINT N'Dropping [Auth].[DF__User__AccessFailedCount]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [DF__User__AccessFailedCount];


GO
PRINT N'Dropping [Auth].[DF__User__LockoutEnabled]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [DF__User__LockoutEnabled];


GO
PRINT N'Dropping [Auth].[DF__User__UserCreatedUtc]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [DF__User__UserCreatedUtc];


GO
PRINT N'Dropping [Billing].[DF_Subscription_ModifiedUtc]...';


GO
ALTER TABLE [Billing].[Subscription] DROP CONSTRAINT [DF_Subscription_ModifiedUtc];


GO
PRINT N'Dropping [Auth].[FK_Logging_User]...';


GO
ALTER TABLE [Auth].[Logging] DROP CONSTRAINT [FK_Logging_User];


GO
PRINT N'Dropping [Auth].[FK_OrganizationUser_User]...';


GO
ALTER TABLE [Auth].[OrganizationUser] DROP CONSTRAINT [FK_OrganizationUser_User];


GO
PRINT N'Dropping [Billing].[FK_BillingHistory_User]...';


GO
ALTER TABLE [Billing].[BillingHistory] DROP CONSTRAINT [FK_BillingHistory_User];


GO
PRINT N'Dropping [Billing].[FK_SubscriptionUser_User]...';


GO
ALTER TABLE [Billing].[SubscriptionUser] DROP CONSTRAINT [FK_SubscriptionUser_User];


GO
PRINT N'Dropping [Expense].[FK_ExpenseReport_User]...';


GO
ALTER TABLE [Expense].[ExpenseReport] DROP CONSTRAINT [FK_ExpenseReport_User];


GO
PRINT N'Dropping [Auth].[FK_User_Organization]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [FK_User_Organization];


GO
PRINT N'Dropping [Auth].[FK_User_Subscription]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [FK_User_Subscription];


GO
PRINT N'Dropping [Auth].[FK_User_Language]...';


GO
ALTER TABLE [Auth].[User] DROP CONSTRAINT [FK_User_Language];


GO
PRINT N'Dropping [Pjm].[FK_ProjectUser_User]...';


GO
ALTER TABLE [Pjm].[ProjectUser] DROP CONSTRAINT [FK_ProjectUser_User];


GO
PRINT N'Dropping [TimeTracker].[FK_TimeEntry_User]...';


GO
ALTER TABLE [TimeTracker].[TimeEntry] DROP CONSTRAINT [FK_TimeEntry_User];


GO
PRINT N'Dropping [Auth].[CreateUserInvitation]...';


GO
DROP PROCEDURE [Auth].[CreateUserInvitation];


GO
PRINT N'Dropping [Auth].[DeleteUserInvitation]...';


GO
DROP PROCEDURE [Auth].[DeleteUserInvitation];


GO
PRINT N'Dropping [Auth].[GetOrgWithCountriesAndEmployeeId]...';


GO
DROP PROCEDURE [Auth].[GetOrgWithCountriesAndEmployeeId];


GO
PRINT N'Dropping [Auth].[GetUserInvitationsByInviteId]...';


GO
DROP PROCEDURE [Auth].[GetUserInvitationsByInviteId];


GO
PRINT N'Dropping [Auth].[InviteUser]...';


GO
DROP PROCEDURE [Auth].[InviteUser];


GO
PRINT N'Dropping [Auth].[UpdateUserActiveOrg]...';


GO
DROP PROCEDURE [Auth].[UpdateUserActiveOrg];


GO
PRINT N'Altering [aaUser]...';


GO
ALTER USER [aaUser]
    WITH LOGIN = [aaUser];


GO
PRINT N'Creating [StaffingManager]...';


GO
CREATE SCHEMA [StaffingManager]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Lookup].[TagTable]...';


GO
CREATE TYPE [Lookup].[TagTable] AS TABLE (
    [TagName] NVARCHAR (64) NOT NULL);


GO
PRINT N'Altering [Auth].[Invitation]...';


GO
ALTER TABLE [Auth].[Invitation] DROP COLUMN [AccessCode], COLUMN [DateOfBirth];


GO
ALTER TABLE [Auth].[Invitation] ALTER COLUMN [FirstName] NVARCHAR (32) NOT NULL;

ALTER TABLE [Auth].[Invitation] ALTER COLUMN [LastName] NVARCHAR (32) NOT NULL;


GO
ALTER TABLE [Auth].[Invitation]
    ADD [DecisionDateUtc] DATETIME2 (0) NULL,
        [StatusId]        INT           DEFAULT 0 NOT NULL;


GO
PRINT N'Starting rebuilding table [Auth].[User]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Auth].[tmp_ms_xx_User] (
    [UserId]                 INT              IDENTITY (111119, 3) NOT NULL,
    [FirstName]              NVARCHAR (32)    NOT NULL,
    [LastName]               NVARCHAR (32)    NOT NULL,
    [AddressId]              INT              NULL,
    [Email]                  NVARCHAR (384)   NOT NULL,
    [PasswordHash]           NVARCHAR (512)   NOT NULL,
    [IsEmailConfirmed]       BIT              CONSTRAINT [DF__User__EmailConfirmed] DEFAULT ((0)) NOT NULL,
    [IsPhoneNumberConfirmed] BIT              CONSTRAINT [DF__User__PhoneNumberConfirmed] DEFAULT ((0)) NOT NULL,
    [IsTwoFactorEnabled]     BIT              CONSTRAINT [DF__User__TwoFactorEnabled] DEFAULT ((0)) NOT NULL,
    [AccessFailedCount]      INT              CONSTRAINT [DF__User__AccessFailedCount] DEFAULT ((0)) NOT NULL,
    [IsLockoutEnabled]       BIT              CONSTRAINT [DF__User__LockoutEnabled] DEFAULT ((0)) NOT NULL,
    [UserCreatedUtc]         DATETIME2 (0)    CONSTRAINT [DF__User__UserCreatedUtc] DEFAULT (getutcdate()) NOT NULL,
    [MaxAmount]              DECIMAL (18)     CONSTRAINT [DF__User__MaxAmount] DEFAULT ((0)) NOT NULL,
    [PreferredLanguageId]    VARCHAR (16)     NULL,
    [DateOfBirth]            DATE             NOT NULL,
    [PhoneNumber]            VARCHAR (16)     NULL,
    [PhoneExtension]         VARCHAR (8)      NULL,
    [LastUsedSubscriptionId] INT              NULL,
    [LockoutEndDateUtc]      DATETIME2 (0)    NULL,
    [PasswordResetCode]      UNIQUEIDENTIFIER NULL,
    [EmailConfirmationCode]  UNIQUEIDENTIFIER NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_User1] PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ_User1] UNIQUE NONCLUSTERED ([Email] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Auth].[User])
    BEGIN
        SET IDENTITY_INSERT [Auth].[tmp_ms_xx_User] ON;
        INSERT INTO [Auth].[tmp_ms_xx_User] ([UserId], [FirstName], [LastName], [AddressId], [Email], [PasswordHash], [IsEmailConfirmed], [IsPhoneNumberConfirmed], [IsTwoFactorEnabled], [AccessFailedCount], [IsLockoutEnabled], [UserCreatedUtc], [PreferredLanguageId], [DateOfBirth], [PhoneNumber], [PhoneExtension], [LastUsedSubscriptionId], [LockoutEndDateUtc], [PasswordResetCode], [EmailConfirmationCode])
        SELECT   [UserId],
                 [FirstName],
                 [LastName],
                 [AddressId],
                 [Email],
                 [PasswordHash],
                 [IsEmailConfirmed],
                 [IsPhoneNumberConfirmed],
                 [IsTwoFactorEnabled],
                 [AccessFailedCount],
                 [IsLockoutEnabled],
                 [UserCreatedUtc],
                 [PreferredLanguageId],
                 [DateOfBirth],
                 [PhoneNumber],
                 [PhoneExtension],
                 [LastUsedSubscriptionId],
                 [LockoutEndDateUtc],
                 [PasswordResetCode],
                 [EmailConfirmationCode]
        FROM     [Auth].[User]
        ORDER BY [UserId] ASC;
        SET IDENTITY_INSERT [Auth].[tmp_ms_xx_User] OFF;
    END

DROP TABLE [Auth].[User];

EXECUTE sp_rename N'[Auth].[tmp_ms_xx_User]', N'User';

EXECUTE sp_rename N'[Auth].[tmp_ms_xx_constraint_PK_User1]', N'PK_User', N'OBJECT';

EXECUTE sp_rename N'[Auth].[tmp_ms_xx_constraint_UQ_User1]', N'UQ_User', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [Auth].[User].[IX_User]...';


GO
CREATE NONCLUSTERED INDEX [IX_User]
    ON [Auth].[User]([Email] ASC, [FirstName] ASC, [LastName] ASC);


GO
PRINT N'Altering [Billing].[Subscription]...';


GO
ALTER TABLE [Billing].[Subscription] DROP COLUMN [SubscriptionModifiedUtc];


GO
PRINT N'Altering [Expense].[ExpenseItem]...';


GO
ALTER TABLE [Expense].[ExpenseItem] ALTER COLUMN [AccountId] INT NOT NULL;


GO
PRINT N'Altering [Expense].[ExpenseReport]...';


GO
ALTER TABLE [Expense].[ExpenseReport] DROP COLUMN [ReportDate];


GO
ALTER TABLE [Expense].[ExpenseReport]
    ADD [ExpenseReportSubmittedUtc] DATETIME2 (0) CONSTRAINT [DF_ExpenseReport_SubmittedUtc] DEFAULT (getutcdate()) NULL;


GO
PRINT N'Creating [StaffingManager].[Position]...';


GO
CREATE TABLE [StaffingManager].[Position] (
    [PositionId]           INT            IDENTITY (123000, 3) NOT NULL,
    [OrganizationId]       INT            NOT NULL,
    [CustomerId]           INT            NULL,
    [AddressId]            INT            NOT NULL,
    [PositionCreatedUtc]   DATETIME2 (0)  NOT NULL,
    [PositionModifiedUtc]  DATETIME2 (0)  NOT NULL,
    [StartDate]            DATETIME2 (0)  NULL,
    [PositionStatusId]     INT            NOT NULL,
    [PositionTitle]        NVARCHAR (140) NOT NULL,
    [BillingRateFrequency] INT            NULL,
    [BillingRateAmount]    INT            NULL,
    [DurationMonths]       INT            NULL,
    [EmploymentTypeId]     INT            NOT NULL,
    [PositionCount]        INT            NOT NULL,
    [RequiredSkills]       NVARCHAR (MAX) NOT NULL,
    [JobResponsibilities]  NVARCHAR (MAX) NULL,
    [DesiredSkills]        NVARCHAR (MAX) NULL,
    [PositionLevelId]      INT            NOT NULL,
    [HiringManager]        NVARCHAR (140) NULL,
    [TeamName]             NVARCHAR (140) NULL,
    CONSTRAINT [PK_PositionId] PRIMARY KEY CLUSTERED ([PositionId] ASC)
);


GO
PRINT N'Creating [StaffingManager].[Position].[IX_AddressId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AddressId]
    ON [StaffingManager].[Position]([AddressId] ASC);


GO
PRINT N'Creating [StaffingManager].[EmploymentType]...';


GO
CREATE TABLE [StaffingManager].[EmploymentType] (
    [EmploymentTypeId]   INT           IDENTITY (13222, 3) NOT NULL,
    [OrganizationId]     INT           NOT NULL,
    [EmploymentTypeName] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_EmploymentTypeId] PRIMARY KEY CLUSTERED ([EmploymentTypeId] ASC)
);


GO
PRINT N'Creating [StaffingManager].[ApplicationStatus]...';


GO
CREATE TABLE [StaffingManager].[ApplicationStatus] (
    [ApplicationStatusId]   INT            IDENTITY (75, 19) NOT NULL,
    [OrganizationId]        INT            NOT NULL,
    [ApplicationStatusName] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_ApplicationStatus] PRIMARY KEY CLUSTERED ([ApplicationStatusId] ASC)
);


GO
PRINT N'Creating [StaffingManager].[ApplicationDocument]...';


GO
CREATE TABLE [StaffingManager].[ApplicationDocument] (
    [ApplicationDocumentId] INT            IDENTITY (111872, 7) NOT NULL,
    [ApplicationId]         INT            NOT NULL,
    [DocumentLink]          NVARCHAR (100) NOT NULL,
    [DocumentName]          NVARCHAR (32)  NOT NULL,
    CONSTRAINT [PK_ApplicationDocument] PRIMARY KEY CLUSTERED ([ApplicationDocumentId] ASC)
);


GO
PRINT N'Creating [StaffingManager].[Application]...';


GO
CREATE TABLE [StaffingManager].[Application] (
    [ApplicationId]          INT            IDENTITY (111874, 7) NOT NULL,
    [ApplicantId]            INT            NOT NULL,
    [PositionId]             INT            NOT NULL,
    [ApplicationCreatedUtc]  DATETIME2 (0)  NOT NULL,
    [ApplicationModifiedUtc] DATETIME2 (0)  NOT NULL,
    [ApplicationStatusId]    TINYINT        NOT NULL,
    [Notes]                  NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Application] PRIMARY KEY CLUSTERED ([ApplicationId] ASC)
);


GO
PRINT N'Creating [StaffingManager].[Applicant]...';


GO
CREATE TABLE [StaffingManager].[Applicant] (
    [ApplicantId] INT            IDENTITY (111873, 7) NOT NULL,
    [AddressId]   INT            NULL,
    [FirstName]   NVARCHAR (32)  NOT NULL,
    [LastName]    NVARCHAR (32)  NOT NULL,
    [Email]       NVARCHAR (100) NOT NULL,
    [PhoneNumber] VARCHAR (16)   NULL,
    [Notes]       NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Applicant] PRIMARY KEY CLUSTERED ([ApplicantId] ASC)
);


GO
PRINT N'Creating [StaffingManager].[Applicant].[IX_Email]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Email]
    ON [StaffingManager].[Applicant]([Email] ASC);


GO
PRINT N'Creating [StaffingManager].[Applicant].[IX_AddressId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AddressId]
    ON [StaffingManager].[Applicant]([AddressId] ASC);


GO
PRINT N'Creating [StaffingManager].[PositionTag]...';


GO
CREATE TABLE [StaffingManager].[PositionTag] (
    [PositionId] INT NOT NULL,
    [TagId]      INT NOT NULL
);


GO
PRINT N'Creating [StaffingManager].[PositionTag].[IX_PositionId_TagId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_PositionId_TagId]
    ON [StaffingManager].[PositionTag]([PositionId] ASC, [TagId] ASC);


GO
PRINT N'Creating [StaffingManager].[PositionStatus]...';


GO
CREATE TABLE [StaffingManager].[PositionStatus] (
    [PositionStatusId]   INT           IDENTITY (13222, 3) NOT NULL,
    [OrganizationId]     INT           NOT NULL,
    [PositionStatusName] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_PositionStatusId] PRIMARY KEY CLUSTERED ([PositionStatusId] ASC)
);


GO
PRINT N'Creating [StaffingManager].[PositionLevel]...';


GO
CREATE TABLE [StaffingManager].[PositionLevel] (
    [PositionLevelId]   INT           IDENTITY (13222, 3) NOT NULL,
    [OrganizationId]    INT           NOT NULL,
    [PositionLevelName] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_PositionLevelId] PRIMARY KEY CLUSTERED ([PositionLevelId] ASC)
);


GO
PRINT N'Creating [Expense].[ExpenseReportHistory]...';


GO
CREATE TABLE [Expense].[ExpenseReportHistory] (
    [HistoryId]       INT            NOT NULL,
    [ExpenseReportId] INT            NOT NULL,
    [UserId]          INT            NOT NULL,
    [Status]          INT            NOT NULL,
    [Text]            NVARCHAR (MAX) NOT NULL,
    [CreatedUtc]      DATETIME2 (2)  NOT NULL,
    [ModifiedUtc]     DATETIME2 (2)  NOT NULL,
    CONSTRAINT [PK_HistoryId] PRIMARY KEY CLUSTERED ([HistoryId] ASC)
);


GO
PRINT N'Creating [Lookup].[Tag]...';


GO
CREATE TABLE [Lookup].[Tag] (
    [TagId]   INT           IDENTITY (1331, 7) NOT NULL,
    [TagName] NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TagId] PRIMARY KEY CLUSTERED ([TagId] ASC)
);


GO
PRINT N'Creating [Lookup].[Tag].[IX_TagName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TagName]
    ON [Lookup].[Tag]([TagName] ASC);


GO
PRINT N'Creating [StaffingManager].[DF_Position_Organization]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD CONSTRAINT [DF_Position_Organization] DEFAULT ((0)) FOR [OrganizationId];


GO
PRINT N'Creating [StaffingManager].[DF_Position_Customer]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD CONSTRAINT [DF_Position_Customer] DEFAULT ((0)) FOR [CustomerId];


GO
PRINT N'Creating [StaffingManager].[DF_Position_Address]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD CONSTRAINT [DF_Position_Address] DEFAULT ((0)) FOR [AddressId];


GO
PRINT N'Creating unnamed constraint on [StaffingManager].[Position]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD DEFAULT (getutcdate()) FOR [PositionCreatedUtc];


GO
PRINT N'Creating unnamed constraint on [StaffingManager].[Position]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD DEFAULT (getutcdate()) FOR [PositionModifiedUtc];


GO
PRINT N'Creating [StaffingManager].[DF_Position_PositionStatus]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD CONSTRAINT [DF_Position_PositionStatus] DEFAULT ((0)) FOR [PositionStatusId];


GO
PRINT N'Creating [StaffingManager].[DF_Position_EmploymentType]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD CONSTRAINT [DF_Position_EmploymentType] DEFAULT ((0)) FOR [EmploymentTypeId];


GO
PRINT N'Creating unnamed constraint on [StaffingManager].[Position]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD DEFAULT ((0)) FOR [PositionCount];


GO
PRINT N'Creating [StaffingManager].[DF_Position_PositionLevel]...';


GO
ALTER TABLE [StaffingManager].[Position]
    ADD CONSTRAINT [DF_Position_PositionLevel] DEFAULT ((0)) FOR [PositionLevelId];


GO
PRINT N'Creating [StaffingManager].[DF_EmploymentType_Organization]...';


GO
ALTER TABLE [StaffingManager].[EmploymentType]
    ADD CONSTRAINT [DF_EmploymentType_Organization] DEFAULT ((0)) FOR [OrganizationId];


GO
PRINT N'Creating unnamed constraint on [StaffingManager].[Application]...';


GO
ALTER TABLE [StaffingManager].[Application]
    ADD DEFAULT (getutcdate()) FOR [ApplicationCreatedUtc];


GO
PRINT N'Creating unnamed constraint on [StaffingManager].[Application]...';


GO
ALTER TABLE [StaffingManager].[Application]
    ADD DEFAULT (getutcdate()) FOR [ApplicationModifiedUtc];


GO
PRINT N'Creating unnamed constraint on [StaffingManager].[Application]...';


GO
ALTER TABLE [StaffingManager].[Application]
    ADD DEFAULT ((1)) FOR [ApplicationStatusId];


GO
PRINT N'Creating [StaffingManager].[DF_PositionTag_Position]...';


GO
ALTER TABLE [StaffingManager].[PositionTag]
    ADD CONSTRAINT [DF_PositionTag_Position] DEFAULT ((0)) FOR [PositionId];


GO
PRINT N'Creating [StaffingManager].[DF_PositionTag_Tag]...';


GO
ALTER TABLE [StaffingManager].[PositionTag]
    ADD CONSTRAINT [DF_PositionTag_Tag] DEFAULT ((0)) FOR [TagId];


GO
PRINT N'Creating [StaffingManager].[DF_PositionStatus_Organization]...';


GO
ALTER TABLE [StaffingManager].[PositionStatus]
    ADD CONSTRAINT [DF_PositionStatus_Organization] DEFAULT ((0)) FOR [OrganizationId];


GO
PRINT N'Creating unnamed constraint on [StaffingManager].[PositionLevel]...';


GO
ALTER TABLE [StaffingManager].[PositionLevel]
    ADD DEFAULT ((0)) FOR [OrganizationId];


GO
PRINT N'Creating [Auth].[FK_Logging_User]...';


GO
ALTER TABLE [Auth].[Logging] WITH NOCHECK
    ADD CONSTRAINT [FK_Logging_User] FOREIGN KEY ([UserId]) REFERENCES [Auth].[User] ([UserId]);


GO
PRINT N'Creating [Auth].[FK_OrganizationUser_User]...';


GO
ALTER TABLE [Auth].[OrganizationUser] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationUser_User] FOREIGN KEY ([UserId]) REFERENCES [Auth].[User] ([UserId]);


GO
PRINT N'Creating [Billing].[FK_BillingHistory_User]...';


GO
ALTER TABLE [Billing].[BillingHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_BillingHistory_User] FOREIGN KEY ([UserId]) REFERENCES [Auth].[User] ([UserId]);


GO
PRINT N'Creating [Billing].[FK_SubscriptionUser_User]...';


GO
ALTER TABLE [Billing].[SubscriptionUser] WITH NOCHECK
    ADD CONSTRAINT [FK_SubscriptionUser_User] FOREIGN KEY ([UserId]) REFERENCES [Auth].[User] ([UserId]) ON DELETE CASCADE;


GO
PRINT N'Creating [Expense].[FK_ExpenseReport_User]...';


GO
ALTER TABLE [Expense].[ExpenseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_ExpenseReport_User] FOREIGN KEY ([SubmittedById]) REFERENCES [Auth].[User] ([UserId]);


GO
PRINT N'Creating [Auth].[FK_User_Subscription]...';


GO
ALTER TABLE [Auth].[User] WITH NOCHECK
    ADD CONSTRAINT [FK_User_Subscription] FOREIGN KEY ([LastUsedSubscriptionId]) REFERENCES [Billing].[Subscription] ([SubscriptionId]);


GO
PRINT N'Creating [Auth].[FK_User_Language]...';


GO
ALTER TABLE [Auth].[User] WITH NOCHECK
    ADD CONSTRAINT [FK_User_Language] FOREIGN KEY ([PreferredLanguageId]) REFERENCES [Lookup].[Language] ([CultureName]) ON DELETE SET DEFAULT;


GO
PRINT N'Creating [Pjm].[FK_ProjectUser_User]...';


GO
ALTER TABLE [Pjm].[ProjectUser] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectUser_User] FOREIGN KEY ([UserId]) REFERENCES [Auth].[User] ([UserId]);


GO
PRINT N'Creating [TimeTracker].[FK_TimeEntry_User]...';


GO
ALTER TABLE [TimeTracker].[TimeEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_TimeEntry_User] FOREIGN KEY ([UserId]) REFERENCES [Auth].[User] ([UserId]);


GO
PRINT N'Creating [StaffingManager].[FK_Position_Organization]...';


GO
ALTER TABLE [StaffingManager].[Position] WITH NOCHECK
    ADD CONSTRAINT [FK_Position_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [Auth].[Organization] ([OrganizationId]);


GO
PRINT N'Creating [StaffingManager].[FK_Position_Address]...';


GO
ALTER TABLE [StaffingManager].[Position] WITH NOCHECK
    ADD CONSTRAINT [FK_Position_Address] FOREIGN KEY ([AddressId]) REFERENCES [Lookup].[Address] ([AddressId]);


GO
PRINT N'Creating [StaffingManager].[FK_Position_Customer]...';


GO
ALTER TABLE [StaffingManager].[Position] WITH NOCHECK
    ADD CONSTRAINT [FK_Position_Customer] FOREIGN KEY ([CustomerId]) REFERENCES [Crm].[Customer] ([CustomerId]);


GO
PRINT N'Creating [StaffingManager].[FK_Position_PositionStatus]...';


GO
ALTER TABLE [StaffingManager].[Position] WITH NOCHECK
    ADD CONSTRAINT [FK_Position_PositionStatus] FOREIGN KEY ([PositionStatusId]) REFERENCES [StaffingManager].[PositionStatus] ([PositionStatusId]);


GO
PRINT N'Creating [StaffingManager].[FK_Position_PositionLevel]...';


GO
ALTER TABLE [StaffingManager].[Position] WITH NOCHECK
    ADD CONSTRAINT [FK_Position_PositionLevel] FOREIGN KEY ([PositionLevelId]) REFERENCES [StaffingManager].[PositionLevel] ([PositionLevelId]);


GO
PRINT N'Creating [StaffingManager].[FK_Position_EmploymentType]...';


GO
ALTER TABLE [StaffingManager].[Position] WITH NOCHECK
    ADD CONSTRAINT [FK_Position_EmploymentType] FOREIGN KEY ([EmploymentTypeId]) REFERENCES [StaffingManager].[EmploymentType] ([EmploymentTypeId]);


GO
PRINT N'Creating [StaffingManager].[FK_EmploymentType_OrganizationId]...';


GO
ALTER TABLE [StaffingManager].[EmploymentType] WITH NOCHECK
    ADD CONSTRAINT [FK_EmploymentType_OrganizationId] FOREIGN KEY ([OrganizationId]) REFERENCES [Auth].[Organization] ([OrganizationId]);


GO
PRINT N'Creating [StaffingManager].[FK_ApplicationStatus_Organization]...';


GO
ALTER TABLE [StaffingManager].[ApplicationStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_ApplicationStatus_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [Auth].[Organization] ([OrganizationId]);


GO
PRINT N'Creating [StaffingManager].[PK_ApplicationDocument_Application]...';


GO
ALTER TABLE [StaffingManager].[ApplicationDocument] WITH NOCHECK
    ADD CONSTRAINT [PK_ApplicationDocument_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [StaffingManager].[Application] ([ApplicationId]) ON DELETE CASCADE;


GO
PRINT N'Creating [StaffingManager].[FK_Application_Applicant]...';


GO
ALTER TABLE [StaffingManager].[Application] WITH NOCHECK
    ADD CONSTRAINT [FK_Application_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [StaffingManager].[Applicant] ([ApplicantId]);


GO
PRINT N'Creating [StaffingManager].[FK_Application_Position]...';


GO
ALTER TABLE [StaffingManager].[Application] WITH NOCHECK
    ADD CONSTRAINT [FK_Application_Position] FOREIGN KEY ([PositionId]) REFERENCES [StaffingManager].[Position] ([PositionId]);


GO
PRINT N'Creating [StaffingManager].[FK_Applicant_Address]...';


GO
ALTER TABLE [StaffingManager].[Applicant] WITH NOCHECK
    ADD CONSTRAINT [FK_Applicant_Address] FOREIGN KEY ([AddressId]) REFERENCES [Lookup].[Address] ([AddressId]);


GO
PRINT N'Creating [StaffingManager].[FK_PositionTag_Position]...';


GO
ALTER TABLE [StaffingManager].[PositionTag] WITH NOCHECK
    ADD CONSTRAINT [FK_PositionTag_Position] FOREIGN KEY ([PositionId]) REFERENCES [StaffingManager].[Position] ([PositionId]) ON DELETE CASCADE;


GO
PRINT N'Creating [StaffingManager].[FK_PositionTag_Tag]...';


GO
ALTER TABLE [StaffingManager].[PositionTag] WITH NOCHECK
    ADD CONSTRAINT [FK_PositionTag_Tag] FOREIGN KEY ([TagId]) REFERENCES [Lookup].[Tag] ([TagId]);


GO
PRINT N'Creating [StaffingManager].[FK_PositionStatus_Organization]...';


GO
ALTER TABLE [StaffingManager].[PositionStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_PositionStatus_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [Auth].[Organization] ([OrganizationId]);


GO
PRINT N'Creating [StaffingManager].[FK_PositionLevel_Organization]...';


GO
ALTER TABLE [StaffingManager].[PositionLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_PositionLevel_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [Auth].[Organization] ([OrganizationId]);


GO
PRINT N'Creating [Expense].[PK_ExpenseReportHistory_ReportId]...';


GO
ALTER TABLE [Expense].[ExpenseReportHistory] WITH NOCHECK
    ADD CONSTRAINT [PK_ExpenseReportHistory_ReportId] FOREIGN KEY ([ExpenseReportId]) REFERENCES [Expense].[ExpenseReport] ([ExpenseReportId]);


GO
PRINT N'Creating [Expense].[PK_ExpenseReportHistory_UserId]...';


GO
ALTER TABLE [Expense].[ExpenseReportHistory] WITH NOCHECK
    ADD CONSTRAINT [PK_ExpenseReportHistory_UserId] FOREIGN KEY ([UserId]) REFERENCES [Auth].[User] ([UserId]);


GO
PRINT N'Creating [Expense].[trg_update_ExpenseReportModifiedUtc]...';


GO

CREATE TRIGGER [Expense].trg_update_ExpenseReportModifiedUtc
ON [Expense].[ExpenseReport]
FOR UPDATE
AS
	UPDATE [Expense].[ExpenseReport]
	SET [ExpenseReportModifiedUtc] = SYSDATETIME()
	FROM [deleted] [d]
	WHERE [Expense].[ExpenseReport].[ExpenseReportId] = [d].[ExpenseReportId]
GO
PRINT N'Altering [Auth].[AcceptInvitation]...';


GO
ALTER PROCEDURE [Auth].[AcceptInvitation]
	@invitationId INT,
	@callingUserId INT
AS
BEGIN
	SET NOCOUNT ON;

	-- Retrieve the invitation information
	DECLARE @organizationId INT;
	DECLARE @organizationRole INT;
	DECLARE @email NVARCHAR(384);
	DECLARE @employeeId NVARCHAR(16);
	SELECT
		@organizationId = [OrganizationId],
		@organizationRole = [OrganizationRoleId],
		@email = [Email],
		@employeeId = [EmployeeId]
	FROM [Auth].[Invitation] WITH (NOLOCK)
	WHERE [Invitation].[InvitationId] = @invitationId AND [Invitation].[IsActive] = 1 AND [Invitation].StatusId = 0;

	IF @organizationId IS NOT NULL
	BEGIN -- Invitation found

		-- Retrieve invited user
		DECLARE @userId INT;
		SET @userId = (
			SELECT [UserId]
			FROM [Auth].[User] WITH (NOLOCK)
			WHERE [User].[Email] = @email
		)

		IF @userId IS NOT NULL AND @userId = @callingUserId
		BEGIN -- Invited user found and matches calling user id
			BEGIN TRANSACTION

			-- Add user to organization
			IF EXISTS (
				SELECT * FROM [Auth].[OrganizationUser] WITH (NOLOCK)
				WHERE [OrganizationUser].[UserId] = @userId AND [OrganizationUser].[OrganizationId] = @organizationId
			)
			BEGIN -- User already in organization
				UPDATE [Auth].[OrganizationUser]
				SET [OrganizationRoleId] = @organizationRole,
					[EmployeeId] = @employeeId
				WHERE [UserId] = @userId AND 
					[OrganizationId] = @organizationId;
			END
			ELSE
			BEGIN -- User not in organization
				INSERT INTO [Auth].[OrganizationUser]  (
					[UserId], 
					[OrganizationId], 
					[OrganizationRoleId], 
					[EmployeeId]
				)
				VALUES (
					@userId, 
					@organizationId,
					@organizationRole, 
					@employeeId
				);
			END

			UPDAtE [Auth].[Invitation]
			SET StatusId = 1, DecisionDateUtc = GETUTCDATE()
			WHERE [InvitationId] = @invitationId;
			
			SELECT @@ROWCOUNT;

			COMMIT
		END
	END
END
GO
PRINT N'Altering [Auth].[GetOrgManagementInfo]...';


GO
ALTER PROCEDURE [Auth].[GetOrgManagementInfo]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		[OrganizationId],
		[Organization].[OrganizationName],
		[SiteUrl],
		[Address].[AddressId],
		[Address].[Address1] AS 'Address',
		[Address].[City], 
		[State].[StateName] AS 'StateName', 
		[Country].[CountryName] AS 'CountryName', 
		[Address].[PostalCode], 
		[PhoneNumber], 
		[FaxNumber], 
		[Subdomain],
		[OrganizationCreatedUtc]

	FROM [Auth].[Organization] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE OrganizationId = @organizationId

	SELECT [OU].[OrganizationId],
	    [OU].[UserId],
		[OU].[OrganizationRoleId],
		[O].[OrganizationName] AS [OrganizationName],
		[OU].[EmployeeId],
		[U].[Email],
		[U].[FirstName],
		[U].[LastName]
    FROM [Auth].[OrganizationUser]	AS [OU]
	WITH (NOLOCK)
    INNER JOIN [Auth].[User]		AS [U] WITH (NOLOCK) 
		ON [U].[UserId] = [OU].[UserId]
	INNER JOIN [Auth].[Organization] AS [O] WITH (NOLOCK)
		ON [O].[OrganizationId] = [OU].[OrganizationId]
    WHERE [OU].[OrganizationId] = @organizationId
	ORDER BY [U].[LastName]

	SELECT	[Product].[ProductId],
		[Product].[ProductName] AS [ProductName],
		[Product].[AreaUrl],
		[Product].[Description],
		[Subscription].[SubscriptionId],
		[Organization].[OrganizationId],
		[Subscription].[SkuId],
		[Sku].[SkuName],
		[Subscription].[NumberOfUsers],
		[Subscription].[SubscriptionName],
		[Organization].[OrganizationName] AS [OrganizationName],
		[Sku].[SkuName] AS [SkuName]
	FROM [Billing].[Subscription] WITH (NOLOCK) 
	LEFT JOIN [Billing].[Sku]			WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
	LEFT JOIN [Auth].[Organization]	WITH (NOLOCK) ON [Organization].[OrganizationId] = [Subscription].[OrganizationId]
	LEFT JOIN [Billing].[Product]		WITH (NOLOCK) ON [Product].[ProductId] = [Sku].[ProductId]
	WHERE [Subscription].[OrganizationId] = @organizationId
	AND [Subscription].[IsActive] = 1
	AND [Product].IsActive = 1
	ORDER BY [Product].[ProductName]

	SELECT 
		[InvitationId],
		[Email],
		[FirstName],
		[LastName], 
		[OrganizationId], 
		[Invitation].[OrganizationRoleId],
		[OrganizationRoleName] AS [OrganizationRoleName],
		[EmployeeId]
	FROM [Auth].[Invitation] WITH (NOLOCK)
	LEFT JOIN [Auth].[OrganizationRole] WITH (NOLOCK) ON [OrganizationRole].[OrganizationRoleId] = [Invitation].[OrganizationRoleId]
	WHERE [OrganizationId] = @organizationId AND [IsActive] = 1 AND [StatusId] = 0

	SELECT [StripeTokenCustId]
	FROM [Billing].[StripeOrganizationCustomer] WITH (NOLOCK) 
	WHERE [OrganizationId] = @organizationId AND [IsActive] = 1 
END
GO
PRINT N'Altering [Auth].[GetUserInvitationsByOrgId]...';


GO
ALTER PROCEDURE [Auth].[GetUserInvitationsByOrgId]
	@organizationId INT
AS
	SET NOCOUNT ON;
	SELECT 
		[InvitationId],
		[Email],
		[FirstName],
		[LastName],  
		[OrganizationId], 
		[Invitation].[OrganizationRoleId],
		[OrganizationRoleName] AS [OrganizationRoleName],
		[EmployeeId]
	FROM [Auth].[Invitation] WITH (NOLOCK)
	LEFT JOIN [Auth].[OrganizationRole] WITH (NOLOCK) ON [OrganizationRole].[OrganizationRoleId] = [Invitation].[OrganizationRoleId]
	WHERE [OrganizationId] = @organizationId AND [IsActive] = 1
GO
PRINT N'Altering [Auth].[GetUserInvitationsByUserData]...';


GO
ALTER PROCEDURE [Auth].[GetUserInvitationsByUserData]
	@email NVARCHAR(384)
	
AS
	SET NOCOUNT ON;
SELECT 
	[InvitationId], 
	[Email], 
	[FirstName], 
	[LastName], 
	[OrganizationId],  
	[OrganizationRoleId],
	[EmployeeId] 
FROM [Auth].[Invitation]
WITH (NOLOCK)
WHERE [Email] = @email AND [IsActive] = 1
GO
PRINT N'Altering [Auth].[GetUserOrgsAndInvitationInfo]...';


GO
ALTER PROCEDURE [Auth].[GetUserOrgsAndInvitationInfo]
	@userId int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [User].[UserId],
			[User].[FirstName],
			[User].[LastName],
			[User].[DateOfBirth],
			[User].[Email],
			[User].[PhoneNumber],
			[User].[LastUsedSubscriptionId],
			[PreferredLanguageId]
	FROM [Auth].[User]
	WITH (NOLOCK)
	LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [User].[AddressId]
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [UserId] = @userId;

	SELECT [Auth].[Organization].[OrganizationId],
		   [Organization].[OrganizationName],
		   [SiteUrl],
		   [Address1] AS 'Address',
		   [Organization].[AddressId],
		   [City],
		   [Country].[CountryName] AS 'CountryName',
		   [State].[StateName] AS 'StateName',
		   [PostalCode],
		   [PhoneNumber],
		   [FaxNumber],
		   [Subdomain],
		   [Organization].[OrganizationCreatedUtc]
	FROM [Auth].[Organization] WITH (NOLOCK)
	RIGHT JOIN [Auth].[OrganizationUser]	WITH (NOLOCK) ON [OrganizationUser].[OrganizationId] = [Organization].[OrganizationId]
	LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [OrganizationUser].[UserId] = @userId 
		  AND [Auth].[Organization].[IsActive] = 1
	ORDER BY [OrganizationUser].[OrganizationRoleId] DESC, [Organization].[OrganizationName]

	SELECT 
		[InvitationId], 
		[Invitation].[Email], 
		[Invitation].[FirstName], 
		[Invitation].[LastName], 
		[Invitation].[OrganizationId],
		[Organization].[OrganizationName] AS 'OrganizationName',
		[OrganizationRoleId],
		[EmployeeId] 
	FROM [Auth].[User] WITH (NOLOCK)
	LEFT JOIN [Auth].[Invitation] WITH (NOLOCK) ON [User].[Email] = [Invitation].[Email]
	LEFT JOIN [Auth].[Organization] WITH (NOLOCK) ON [Invitation].[OrganizationId] = [Organization].[OrganizationId]
	WHERE [User].[UserId] = @userId AND [Invitation].[IsActive] = 1 AND [Invitation].StatusId = 0;

	DECLARE @addressId INT
	SET @addressId = (SELECT m.AddressId
				FROM [Auth].[User] AS m
				WHERE [UserId] = @userId)

	SELECT [Address].[Address1],
		   [Address].[City],
		   [State].[StateName] AS 'State',
		   [Country].[CountryName] AS 'Country',
		   [Address].[PostalCode]
	FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
	LEFT JOIN [Lookup].[Country] WITH (NOLOCK) ON [Country].CountryCode = [Address].CountryCode
	LEFT JOIN [Lookup].[State] WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [AddressId] = @addressId
END
GO
PRINT N'Altering [Auth].[DeleteInvitation]...';


GO
ALTER PROCEDURE [Auth].[DeleteInvitation]
	@invitationId INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRANSACTION
			DELETE FROM [Auth].[Invitation]
			WHERE [InvitationId] = @invitationId
	COMMIT
END
GO
PRINT N'Altering [Auth].[GetUserContext]...';


GO
ALTER procedure [Auth].[GetUserContext]
	@userId int
as
begin
	set nocount on
	-- return 3 result sets
	-- get user information
	select u.FirstName, u.LastName, u.UserId, u.Email, u.PreferredLanguageId, u.MaxAmount from [User] u with (nolock)
	where u.UserId = @userId;

	-- get list of organizations and the user role in each
	create table #OrgAndRole(OrganizationId int, OrganizationRoleId int, OrganizationName nvarchar(64))
	insert into #OrgAndRole(OrganizationId, OrganizationRoleId, OrganizationName) select ou.OrganizationId, ou.OrganizationRoleId, o.OrganizationName from OrganizationUser ou with (nolock)
	inner join Organization o with (nolock) on o.OrganizationId = ou.OrganizationId
	where ou.UserId = @userId and o.IsActive = 1
	select * from #OrgAndRole with (nolock)

	-- get the subscriptions of those organizations and the role of the user in those subscriptions
	select s.SubscriptionId, s.SubscriptionName,
	sku.SkuId, sku.SkuName, p.ProductId, p.ProductName, p.AreaUrl, su.ProductRoleId, s.OrganizationId from Billing.Subscription s with (nolock)
	inner join #OrgAndRole orgrole with (nolock) on orgrole.OrganizationId = s.OrganizationId
	inner join Billing.Sku sku with (nolock) on sku.SkuId = s.SkuId
	inner join Billing.Product p with (nolock) on p.ProductId = sku.ProductId
	inner join Billing.SubscriptionUser su with (nolock) on su.SubscriptionId = s.SubscriptionId
	where s.IsActive = 1 and su.UserId = @userId

	-- drop the temp table
	drop table #OrgAndRole
end
GO
PRINT N'Altering [Auth].[GetUserContextInfo]...';


GO
ALTER PROCEDURE [Auth].[GetUserContextInfo]
	@userId int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [U].[UserId],
		   [U].[FirstName],
		   [U].[LastName],
		   [U].[Email],
		   [U].[LastUsedSubscriptionId],
		   [U].[PreferredLanguageId],
		   [O].[OrganizationId],
		   [O].[OrganizationName] AS 'OrganizationName',
		   [OU].[OrganizationRoleId],
		   [SUB].[SubscriptionId],
		   [SUB].[SubscriptionName],
		   [SUB].[ProductId],
		   [SUB].[ProductName],
		   [SUB].[SkuId],
		   [SUB].[ProductRoleId],
		   [SUB].[AreaUrl]
	FROM [Auth].[User] AS [U] WITH (NOLOCK)
		LEFT JOIN [Auth].[OrganizationUser] AS [OU] WITH (NOLOCK) ON [U].[UserId] = [OU].[UserId]
		LEFT JOIN [Auth].[Organization] AS [O] WITH (NOLOCK) ON [OU].[OrganizationId] = [O].[OrganizationId]
		LEFT JOIN (
			SELECT	[S].[SubscriptionId],
					[S].[SubscriptionName],
					[PR].[ProductId],
					[P].[ProductName] AS 'ProductName',
					[P].[AreaUrl],
					[PR].[ProductRoleName] AS 'ProductRoleName',
					[S].[SkuId],
					[SU].[ProductRoleId],
					[SU].[UserId],
					[S].[OrganizationId]
			FROM [Billing].[SubscriptionUser] AS [SU] WITH (NOLOCK)
				JOIN [Billing].[Subscription] AS [S] WITH (NOLOCK) ON [SU].[SubscriptionId] = [S].SubscriptionId
				JOIN [Billing].[Sku] AS [SK] WITH (NOLOCK) ON [SK].[SkuId] = [S].[SkuId]
				JOIN [Auth].[ProductRole] AS [PR] WITH (NOLOCK) ON [SU].[ProductRoleId] = [PR].[ProductRoleId] AND [Sk].[ProductId] = [PR].[ProductId]
				LEFT JOIN [Billing].[Product] AS [P] WITH (NOLOCK) ON [PR].[ProductId] = [P].[ProductId]
			WHERE [S].[IsActive] = 1
		) [SUB] ON [SUB].[UserId] = [U].[UserId] AND [SUB].[OrganizationId] = [O].[OrganizationId]
	WHERE [U].[UserId] = @userId;
END
GO
PRINT N'Altering [Auth].[GetUserFromEmail]...';


GO
ALTER PROCEDURE [Auth].[GetUserFromEmail]
	@email NVARCHAR(384)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [UserId]
		,[FirstName]
		,[LastName]
		,[DateOfBirth]
		,[Address1] as 'Address'
		,[City]
		,[State].[StateName] AS 'State'
		,[Country].[CountryName] AS 'Country'
		,[PostalCode]
		,[Email]
		,[PhoneNumber]
		,[PhoneExtension]
		,[LastUsedSubscriptionId]
		,[PasswordHash]
		,[PreferredLanguageId]
		,[User].[IsEmailConfirmed]
	FROM [Auth].[User]
	WITH (NOLOCK)
	LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [User].[AddressId]
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Email] = @email;
END
GO
PRINT N'Altering [Auth].[GetUserInfo]...';


GO
ALTER PROCEDURE [Auth].[GetUserInfo]
	@userId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [User].[UserId],
		   [User].[FirstName],
		   [User].[LastName],
		   [User].[DateOfBirth],
		   [User].[AddressId],
		   [User].[Email],
		   [User].[PhoneNumber],
		   [User].[LastUsedSubscriptionId],
		   [User].[IsEmailConfirmed],
		   [User].[EmailConfirmationCode],
		   [PreferredLanguageId]
	FROM [Auth].[User]
	WITH (NOLOCK)
	WHERE [UserId] = @userId;

	DECLARE @addressId INT
	SET @addressId = (SELECT U.AddressId
					 FROM [Auth].[User] AS U
					 WHERE [UserId] = @userId)
	if(@addressId IS NOT NULL)
	BEGIN
		SELECT [Address].[AddressId],
			   [Address].[Address1],
			   [Address].[City],
			   [State].[StateName] AS 'State',
			   [Address].[StateId],
			   [Address].[CountryCode],
			   [Country].[CountryName] AS 'Country',
			   [Address].[PostalCode]
		FROM [Lookup].[Address] AS [Address] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
		WHERE [AddressId] = @addressId
	END

END
GO
PRINT N'Altering [Auth].[GetUsersWithSubscriptionToProductInOrganization]...';


GO
ALTER PROCEDURE [Auth].[GetUsersWithSubscriptionToProductInOrganization]
	@organizationId INT,
	@productId INT 
AS
BEGIN
	SET NOCOUNT ON;
SELECT [User].[UserId],
	   [User].[FirstName],
	   [User].[LastName],
	   [User].[Email],
	   [User].[MaxAmount]
FROM [Auth].[User] WITH (NOLOCK) 
LEFT JOIN [Billing].[SubscriptionUser]	WITH (NOLOCK) ON [SubscriptionUser].[UserId] = [User].[UserId]
LEFT JOIN [Billing].[Subscription]		WITH (NOLOCK) ON [Subscription].[SubscriptionId] = [SubscriptionUser].[SubscriptionId]
WHERE 
	[Subscription].[SubscriptionId] = (
	SELECT [SubscriptionId] 
	FROM [Billing].[Subscription] WITH (NOLOCK) 
	LEFT JOIN [Billing].[Sku]		WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
	LEFT JOIN [Auth].[Organization]	WITH (NOLOCK) ON [Organization].[OrganizationId] = [Subscription].[OrganizationId]
	WHERE [Subscription].[OrganizationId] = @organizationId
		AND [Sku].[ProductId] = @productId
		AND [Subscription].[IsActive] = 1
	)
ORDER BY [User].[LastName]
END
GO
PRINT N'Altering [TimeTracker].[GetTimeEntryIndexInfo]...';


GO
ALTER PROCEDURE [TimeTracker].[GetTimeEntryIndexInfo]
	@organizationId INT,
	@userId INT,
	@productId INT,
	@startingDate DATE,
	@endingDate DATE
AS
	SET NOCOUNT ON;

	-- Settings is declared as a table here so that the StartOfWeek field can be used in other Select
	-- blocks lower in this same stored procedure, while also letting the settings table itself be returned
	DECLARE @settings TABLE (
		StartOfWeek INT,
		IsLockDateUsed INT,
		LockDatePeriod VARCHAR(10),
		LockDateQuantity INT
	);
	INSERT INTO @settings (StartOfWeek, IsLockDateUsed, LockDatePeriod, LockDateQuantity)
	SELECT [StartOfWeek], [IsLockDateUsed], [LockDatePeriod], [LockDateQuantity]
	FROM [TimeTracker].[Setting] 
	WITH (NOLOCK) 
	WHERE [OrganizationId] = @organizationId

	-- Starting and Ending date parameters are adjusted if the input is null, using the StartOfWeek from above
	DECLARE @startOfWeek INT;
	SET @startOfWeek = (
		SELECT TOP 1
			[StartOfWeek]
		FROM @settings
	)
	DECLARE @todayDayOfWeek INT;
	SET @todayDayOfWeek = ((6 + DATEPART(dw, GETDATE()) + @@dATEFIRST) % 7);

	IF(@startingDate IS NULL)
	BEGIN
		DECLARE @daysIntoWeek INT;
		IF (@todayDayOfWeek < @startOfWeek)
			SET @daysIntoWeek = @startOfWeek - @todayDayOfWeek - 7;
		ELSE
			SET @daysIntoWeek = @startOfWeek - @todayDayOfWeek;
		SET @startingDate = DATEADD(dd, @daysIntoWeek, GETDATE());
	END

	IF(@endingDate IS NULL)
	BEGIN
		DECLARE @daysLeftInWeek INT;
		IF (@todayDayOfWeek < @startOfWeek)
			SET @daysLeftInWeek = @startOfWeek - @todayDayOfWeek - 1;
		ELSE
			SET @daysLeftInWeek = @startOfWeek - @todayDayOfWeek + 6;
		SET @endingDate = DATEADD(dd, @daysLeftInWeek, GETDATE());
	END

	-- Begin select statements

	SELECT * FROM @settings

	
	SELECT [PayClassId], [PayClassName], [OrganizationId] FROM [Hrm].[PayClass] WITH (NOLOCK) WHERE [OrganizationId] = @organizationId;


	SELECT [HolidayId], [HolidayName], [Date], [OrganizationId] FROM [Hrm].[Holiday] WITH (NOLOCK) WHERE [OrganizationId] = @organizationId ORDER BY [Date];


	SELECT	[Project].[ProjectId],
			[Project].[CustomerId],
			[Customer].[OrganizationId],
			[Project].[ProjectCreatedUtc],
			[Project].[StartUtc] as [StartDate],
			[Project].[EndUtc] as [EndDate],
			[Project].[ProjectName] AS [ProjectName],
			[Project].[IsActive],
			[Project].[IsHourly] AS [IsHourly],
			[Organization].[OrganizationName] AS [OrganizationName],
			[Customer].[CustomerName] AS [CustomerName],
			[Customer].[CustomerOrgId],
			[Customer].[IsActive] AS [IsCustomerActive],
			[ProjectUser].[IsActive] AS [IsUserActive],
			[OrganizationRoleId],
			[ProjectOrgId]
	FROM (
		(SELECT [OrganizationId], [UserId], [OrganizationRoleId]
		FROM [Auth].[OrganizationUser] WITH (NOLOCK) WHERE [UserId] = @userId AND [OrganizationId] = @organizationId)
		AS [OrganizationUser]
		JOIN [Auth].[Organization]		WITH (NOLOCK) ON [OrganizationUser].[OrganizationId] = [Organization].[OrganizationId]
		JOIN [Crm].[Customer]		WITH (NOLOCK) ON [Customer].[OrganizationId] = [Organization].[OrganizationId]
		JOIN ( [Pjm].[Project]
			JOIN [Pjm].[ProjectUser] WITH (NOLOCK) ON [ProjectUser].[ProjectId] = [Project].[ProjectId]
		)
										ON [Project].[CustomerId] = [Customer].[CustomerId]
										AND [ProjectUser].[UserId] = [OrganizationUser].[UserId]
	
	)
	UNION ALL
	SELECT	[ProjectId],
			[CustomerId],
			0,
			[ProjectCreatedUtc],
			[StartUtc],
			[EndUtc],
			[ProjectName],
			[IsActive],
			[IsHourly],
			(SELECT [OrganizationName] FROM [Auth].[Organization] WITH (NOLOCK) WHERE [OrganizationId] = 0),
			(SELECT [CustomerName] FROM [Crm].[Customer] WITH (NOLOCK) WHERE [CustomerId] = 0),
			NULL,
			0,
			0,
			0,
			[ProjectOrgId]
			FROM [Pjm].[Project] WITH (NOLOCK) WHERE [ProjectId] = 0
	ORDER BY [Project].[ProjectName]

	SELECT [User].[UserId],
		[User].[FirstName],
		[User].[LastName],
		[User].[Email]
	FROM [Auth].[User] WITH (NOLOCK) 
	LEFT JOIN [Billing].[SubscriptionUser]	WITH (NOLOCK) ON [SubscriptionUser].[UserId] = [User].[UserId]
	LEFT JOIN [Billing].[Subscription]		WITH (NOLOCK) ON [Subscription].[SubscriptionId] = [SubscriptionUser].[SubscriptionId]
	WHERE 
		[Subscription].[SubscriptionId] = (
		SELECT [SubscriptionId] 
		FROM [Billing].[Subscription] WITH (NOLOCK) 
		LEFT JOIN [Billing].[Sku]		WITH (NOLOCK) ON [Sku].[SkuId] = [Subscription].[SkuId]
		LEFT JOIN [Auth].[Organization]	WITH (NOLOCK) ON [Organization].[OrganizationId] = [Subscription].[OrganizationId]
		WHERE [Subscription].[OrganizationId] = @organizationId
			AND [Sku].[ProductId] = @productId
			AND [Subscription].[IsActive] = 1
		)
	ORDER BY [User].[LastName]

	SELECT DISTINCT [TimeEntryId] 
		,[User].[UserId] AS [UserId]
		,[User].[FirstName] AS [FirstName]
		,[User].[LastName] AS [LastName]
		,[User].[Email]
		,[OrganizationUser].[EmployeeId]
		,[TimeEntry].[ProjectId]
		,[TimeEntry].[PayClassId]
		,[PayClass].[PayClassName] AS [PayClassName]
		,[Date]
		,[Duration]
		,[Description]
	FROM [TimeTracker].[TimeEntry] WITH (NOLOCK) 
	JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [TimeEntry].[UserId]
	JOIN [Hrm].[PayClass] WITH (NOLOCK) ON [PayClass].[PayClassId] = [TimeEntry].[PayClassId]
	JOIN [Auth].[OrganizationUser] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId] AND [OrganizationUser].[OrganizationId] = @organizationId
	WHERE [User].[UserId] = @userId
		AND [Date] >= @startingDate
		AND [Date] <= @endingDate
		AND [PayClass].[OrganizationId] = @organizationId
	ORDER BY [Date] ASC
GO
PRINT N'Altering [Billing].[GetSubscriptionDetailsById]...';


GO
ALTER PROCEDURE [Billing].[GetSubscriptionDetailsById]
	@subscriptionId INT
AS
	SET NOCOUNT ON;
SELECT [OrganizationId]
      ,[SkuId]
	  ,[NumberOfUsers]
      ,[SubscriptionCreatedUtc]
      ,[IsActive]
	  ,[SubscriptionName] As 'Name'
FROM [Billing].[Subscription] WITH (NOLOCK) 
WHERE [SubscriptionId] = @subscriptionId AND [IsActive] = 1
GO
PRINT N'Altering [Expense].[CreateExpenseItem]...';


GO
ALTER PROCEDURE [Expense].[CreateExpenseItem]
	@itemDescription NVARCHAR(100),
	@transactionDate DATETIME2(0),
	@amount DECIMAL(18, 2),
	@expenseReportId INT,
	@isBillableToCustomer BIT,
	@accountId INT
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [Expense].[ExpenseItem]
		([ItemDescription],
		[TransactionDate],
		[Amount],
		[ExpenseReportId],
		[IsBillableToCustomer],
		[AccountId])
	VALUES (@itemDescription,
		@transactionDate,
		@amount,
		@expenseReportId,
		@isBillableToCustomer,
		@accountId);
END
GO
PRINT N'Altering [Expense].[UpdateExpenseItem]...';


GO
ALTER PROCEDURE [Expense].[UpdateExpenseItem]
	@expenseItemId INT,
	@itemDescription NVARCHAR(100),
	@transactionDate DATETIME2(0),
	@amount DECIMAL(18, 2),
	@expenseReportId INT,
	@isBillableToCustomer BIT,
	@accountId INT
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE [Expense].[ExpenseItem]
	SET 
		[ItemDescription] = @itemDescription,
		[TransactionDate] = @transactionDate,
		[Amount] = @amount,
		[ExpenseReportId] = @expenseReportId,
		[IsBillableToCustomer] = @isBillableToCustomer,
		[AccountId] = @accountId
	WHERE [ExpenseItemId] = @expenseItemId;
END
GO
PRINT N'Altering [Expense].[CreateExpenseReport]...';


GO
ALTER PROCEDURE [Expense].[CreateExpenseReport]
	@reportTitle NVARCHAR(100),
	@organizationId INT,
	@submittedById INT,
	@reportStatus TINYINT,
	@businessJustification NVARCHAR(100),
	@createdUtc DATETIME2,
	@modifiedUtc DATETIME2,
	@submittedUtc DATETIME2,
	@reportId INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [Expense].[ExpenseReport]
		([ReportTitle],
		[OrganizationId],
		[SubmittedById],
		[ReportStatus],
		[BusinessJustification],
		[ExpenseReportCreatedUtc],
		[ExpenseReportModifiedUtc],
		[ExpenseReportSubmittedUtc])
	VALUES (@reportTitle,
		@organizationId,
		@submittedById,
		@reportStatus,
		@businessJustification,
		@createdUtc,
		@modifiedUtc,
		@submittedUtc);

	SELECT IDENT_CURRENT('[Expense].[ExpenseReport]');
END
GO
PRINT N'Altering [Expense].[GetExpenseReportByExpenseReportId]...';


GO
ALTER PROCEDURE [Expense].[GetExpenseReportByExpenseReportId]
	@expenseReportId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		[ExpenseReportId],
		[ReportTitle],
		[OrganizationId],
		[SubmittedById],
		[ReportStatus],
		[BusinessJustification],
		[ExpenseReportCreatedUtc],
		[ExpenseReportModifiedUtc],
		[ExpenseReportSubmittedUtc]
	FROM [Expense].[ExpenseReport] WITH (NOLOCK)
	WHERE ExpenseReportId = @expenseReportId
END
GO
PRINT N'Altering [Expense].[GetExpenseReportsByOrganizationId]...';


GO
ALTER PROCEDURE [Expense].[GetExpenseReportsByOrganizationId]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		[ExpenseReportId],
		[ReportTitle],
		[OrganizationId],
		[SubmittedById],
		[ReportStatus],
		[BusinessJustification],
		[ExpenseReportCreatedUtc],
		[ExpenseReportModifiedUtc],
		[ExpenseReportSubmittedUtc]
	FROM [Expense].[ExpenseReport] WITH (NOLOCK)
	WHERE OrganizationId = @organizationId
END
GO
PRINT N'Altering [Expense].[GetExpenseReportsBySubmittedById]...';


GO
ALTER PROCEDURE [Expense].[GetExpenseReportsBySubmittedById]
	@submittedById INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		[ExpenseReportId],
		[ReportTitle],
		[OrganizationId],
		[SubmittedById],
		[ReportStatus],
		[BusinessJustification],
		[ExpenseReportCreatedUtc],
		[ExpenseReportModifiedUtc],
		[ExpenseReportSubmittedUtc]
	FROM [Expense].[ExpenseReport] WITH (NOLOCK)
	WHERE SubmittedById = @submittedById
END
GO
PRINT N'Altering [Expense].[UpdateExpenseReport]...';


GO
ALTER PROCEDURE [Expense].[UpdateExpenseReport]
	@expenseReportId INT,
	@reportTitle NVARCHAR(100),
	@organizationId INT,
	@submittedById INT,
	@reportStatus TINYINT,
	@businessJustification NVARCHAR(100),
	@submittedUtc DATETIME2 (0)
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE [Expense].[ExpenseReport]
	SET
		[ReportTitle] = @reportTitle,
		[ReportStatus] = @reportStatus,
		[BusinessJustification] = @businessJustification,
		[ExpenseReportSubmittedUtc] = @submittedUtc
	WHERE [ExpenseReportId] = @expenseReportId;
END
GO
PRINT N'Altering [Lookup].[UpdateAddress]...';


GO
ALTER procedure [Lookup].[UpdateAddress]
	@addressId int,
	@address1 nvarchar(64),
	@address2 nvarchar(64),
	@city nvarchar(32),
	@stateId smallint,
	@postalCode nvarchar(16),
	@countryCode varchar(8)
as
begin
	set nocount on
	update [Address] set Address1 = @address1, Address2 = @address2, City = @city, StateId = @stateId, CountryCode = @countryCode, PostalCode = @postalCode
	where AddressId = @addressId
end
GO
PRINT N'Creating [StaffingManager].[CreateApplicationDocument]...';


GO
CREATE PROCEDURE [StaffingManager].[CreateApplicationDocument]
	@applicationId INT,
	@documentLink NVARCHAR (100),
	@documentName NVARCHAR (32)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRANSACTION
		INSERT INTO [StaffingManager].[ApplicationDocument]
			([ApplicationId],
			[DocumentLink],
			[DocumentName])
		VALUES
			(@applicationId,
			@documentLink,
			@documentName)

		SELECT SCOPE_IDENTITY();
	COMMIT TRANSACTION
END
GO
PRINT N'Creating [StaffingManager].[CreateApplication]...';


GO
CREATE PROCEDURE [StaffingManager].[CreateApplication]
	@applicantId INT,
	@positionId INT,
	@applicationStatusId TINYINT,
	@notes NVARCHAR (MAX)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRANSACTION
		INSERT INTO [StaffingManager].[Application]
			([ApplicantId],
			[PositionId],
			[ApplicationStatusId],
			[Notes])
		VALUES
			(@applicantId,
			@positionId,
			@applicationStatusId,
			@notes);

		SELECT SCOPE_IDENTITY();
	COMMIT TRANSACTION
END
GO
PRINT N'Creating [StaffingManager].[CreateApplicant]...';


GO
CREATE PROCEDURE [StaffingManager].[CreateApplicant]
	@email NVARCHAR (100),
	@firstName NVARCHAR (32),
	@lastName NVARCHAR (32),
	@phoneNumber NVARCHAR (16),
	@notes NVARCHAR (MAX),
	@address1 nvarchar(64),
	@address2 nvarchar(64),
	@city nvarchar(32),
	@stateId smallint,
	@postalCode nvarchar(16),
	@countryCode varchar(8)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRANSACTION
		EXEC [Lookup].[CreateAddress]
			@address1,
			@address2,
			@city,
			@stateId,
			@postalCode,
			@countryCode

		INSERT INTO [StaffingManager].[Applicant]
			([AddressId],
			[FirstName],
			[LastName],
			[Email],
			[PhoneNumber],
			[Notes])
		VALUES
			(IDENT_CURRENT('[Lookup].[Address]'),
			@firstName,
			@lastName,
			@email,
			@phoneNumber,
			@notes);

		SELECT IDENT_CURRENT('[StaffingManager].[Applicant]') AS [ApplicantId];
	COMMIT TRANSACTION
END
GO
PRINT N'Creating [StaffingManager].[UpdatePosition]...';


GO
CREATE PROCEDURE [StaffingManager].[UpdatePosition]
	@positionId INT,
	@organizationId INT,
	@customerId INT,
	@addressId INT,
	@startDate DATETIME2(0),
	@positionStatus INT,
	@positionTitle NVARCHAR(140),
	@billingRateFrequency INT,
	@billingRateAmount INT,
	@durationMonths INT,
	@employmentType INT,
	@positionCount INT,
	@requiredSkills NVARCHAR (MAX),
	@jobResponsibilities NVARCHAR (MAX),
	@desiredSkills NVARCHAR (MAX),
	@positionLevel NVARCHAR (140),
	@hiringManager NVARCHAR (140),
	@teamName NVARCHAR (140),
	@address NVARCHAR (64),
	@city NVARCHAR(32),
	@state NVARCHAR(32),
	@country NVARCHAR(32),
	@postalCode NVARCHAR(16)

AS
BEGIN
	UPDATE [StaffingManager].[Position] 
	SET [OrganizationId] = @organizationId, 
		[CustomerId] = @customerId, 
		[AddressId] = @addressId,
		[StartDate] = @startDate, 
		[PositionStatusId] = @positionStatus, 
		[PositionTitle] = @positionTitle,
		[BillingRateFrequency] = @billingRateFrequency,
		[BillingRateAmount] = @billingRateAmount,
		[DurationMonths] = @durationMonths,
		[EmploymentTypeId] = @employmentType,
		[PositionCount] = @positionCount,
		[RequiredSkills] = @requiredSkills,
		[JobResponsibilities] = @jobResponsibilities,
		[DesiredSkills] = @desiredSkills,
		[PositionLevelId] = @positionLevel,
		[HiringManager] = @hiringManager,
		[TeamName] = @teamName,
		[PositionModifiedUtc] = SYSUTCDATETIME()
	WHERE [PositionId] = @positionId

	SET NOCOUNT ON
	UPDATE [Lookup].[Address] SET 
		[Address1] = @address,
		[City] = @city,
		[StateId] = @state,
		[CountryId] = @country,
		[PostalCode] = @postalCode
	WHERE [AddressId] = @addressId
END
GO
PRINT N'Creating [StaffingManager].[UpdateApplicationDocument]...';


GO
CREATE PROCEDURE [StaffingManager].[UpdateApplicationDocument]
	@applicationDocumentId INT,
	@documentLink NVARCHAR (100),
	@documentName NVARCHAR (32)
AS
BEGIN
	UPDATE [StaffingManager].[ApplicationDocument] SET
		[DocumentLink] = @documentLink,
		[DocumentName] = @documentName
	WHERE [ApplicationDocumentId] = @applicationDocumentId
END
GO
PRINT N'Creating [StaffingManager].[UpdateApplication]...';


GO
CREATE PROCEDURE [StaffingManager].[UpdateApplication]
	@applicationId INT,
	@applicationStatusId TINYINT,
	@notes NVARCHAR (MAX)
AS
BEGIN
	UPDATE [StaffingManager].[Application] SET
		[ApplicationStatusId] = @applicationStatusId,
		[Notes] = @notes
	WHERE [ApplicationId] = @applicationId
END
GO
PRINT N'Creating [StaffingManager].[UpdateApplicant]...';


GO
CREATE PROCEDURE [StaffingManager].[UpdateApplicant]
	@applicantId INT,
	@addressId INT,
	@email NVARCHAR (100),
	@firstName NVARCHAR (32),
	@lastName NVARCHAR (32),
	@address NVARCHAR (64),
	@city NVARCHAR(32),
	@state NVARCHAR(32),
	@country NVARCHAR(32),
	@postalCode NVARCHAR(16),
	@phoneNumber NVARCHAR (16),
	@notes NVARCHAR (MAX)
AS
BEGIN
	BEGIN TRANSACTION
		SET NOCOUNT ON
		UPDATE [Lookup].[Address] SET 
			[Address1] = @address,
			[City] = @city,
			[StateId] = @state,
			[CountryId] = @country,
			[PostalCode] = @postalCode
		WHERE [AddressId] = @addressId

		SET NOCOUNT OFF
		UPDATE [StaffingManager].[Applicant] SET
			[FirstName] = @firstName,
			[LastName] = @lastName,
			[Email] = @email,
			[PhoneNumber] = @phoneNumber,
			[Notes] = @notes
		WHERE [ApplicantId] = @applicantId
	COMMIT TRANSACTION
END
GO
PRINT N'Creating [StaffingManager].[GetStaffingIndexInfoFiltered]...';


GO
CREATE PROCEDURE [StaffingManager].[GetStaffingIndexInfoFiltered]
	@organizationId INT,
	@status NVARCHAR(32),
	@type NVARCHAR(32),
	@tags [Lookup].[TagTable] READONLY
AS
BEGIN
	DECLARE @sSQL NVARCHAR(2000), @Where NVARCHAR(1000) = ''
	SET @sSQL =
		'SELECT DISTINCT [PositionId],
			[OrganizationId],
			[CustomerId],
			[Position].[AddressId],
			[StartDate], 
			[PositionStatusId],
			[PositionTitle], 
			[BillingRateFrequency],
			[BillingRateAmount],
			[DurationMonths],
			[EmploymentTypeId],
			[PositionCount],
			[RequiredSkills],
			[JobResponsibilities],
			[DesiredSkills],
			[PositionLevelId],
			[HiringManager],
			[TeamName],
			[Address].[Address1],
			[Address].[Address2],
			[Address].[City],
			[State].[StateName],
			[Country].[CountryName],
			[Address].[PostalCode],
			[Customer].[CustomerId],
			[Customer].[CustomerName],
			[Customer].[AddressId],
			[Customer].[ContactEmail],
			[Customer].[ContactPhoneNumber],
			[Customer].[FaxNumber],
			[Customer].[Website],
			[Customer].[EIN],
			[Customer].[CustomerCreatedUtc],
			[Customer].[OrganizationId],
			[Customer].[CustomerOrgId],
			[Customer].[IsActive]
		FROM [StaffingManager].[Position]
		LEFT JOIN [StaffingManager].[PositionTag]	WITH (NOLOCK) ON [PositionTag].[PositionId] = [Position].[PositionId]
			 JOIN [Lookup].[Tag]					WITH (NOLOCK) ON [PositionTag].[TagId] = [Tag].[TagId]
		LEFT JOIN [Lookup].[Address]				WITH (NOLOCK) ON [Address].[AddressId] = [Position].[AddressId]
		LEFT JOIN [Lookup].[Country]				WITH (NOLOCK) ON [Country].[CountryId] = [Address].[CountryId]
		LEFT JOIN [Lookup].[State]					WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
		LEFT JOIN [CRM].[Customer]					WITH (NOLOCK) ON [Customer].[CustomerId] = [Position].[CustomerId]
		WHERE [Position].[OrganizationId] = @organizationId '
	IF @status is not null
		SET @Where = @Where + 'AND [PositionStatusName] = @_Status '
	IF @type is not null
		SET @Where = @Where + 'AND [EmploymentTypeName] = @_Type '
	IF (SELECT count(*) from @tags) > 0
		SET @Where = @Where + 'AND [Tag].[TagName] IN (SELECT [TagName] FROM @_Tags) '
	EXEC sp_executesql @sSQL,
	N'@_Status NVARCHAR, @_Type NVARCHAR, @_Tags [Lookup].[TagTable] READONLY',
	@_Status = @status, @_Type = @type, @_Tags = @tags

	-- Select all tags from the positions
	SELECT
		[Tag].[TagId],
		[Tag].[TagName],
		[Position].[PositionId]
	FROM [StaffingManager].[Position]
		JOIN [StaffingManager].[PositionTag] ON [PositionTag].[PositionId] = [Position].[PositionId]
		JOIN [Lookup].[Tag] ON [PositionTag].[TagId] = [Tag].[TagId]
	WHERE [Position].[OrganizationId] = @organizationId
	
	-- Select all Employment Types from the org
		SELECT [EmploymentTypeId],
		[OrganizationId],
		[EmploymentTypeName]
	FROM [StaffingManager].[EmploymentType]
	WHERE [EmploymentType].[OrganizationId] = @organizationId

	-- Select all Position Levels from the org
	SELECT [PositionLevelId],
		[OrganizationId],
		[PositionLevelName]
	FROM [StaffingManager].[PositionLevel]
	WHERE [PositionLevel].[OrganizationId] = @organizationId

	-- Select all Position Status' from the org
		SELECT [PositionStatusId],
		[OrganizationId],
		[PositionStatusName]
	FROM [StaffingManager].[PositionStatus]
	WHERE [PositionStatus].[OrganizationId] = @organizationId
	
	-- Select all Positions Customers from the org
	SELECT [CustomerId],
		   [CustomerName],
		   [AddressId],
		   [ContactEmail],
		   [ContactPhoneNumber],
		   [FaxNumber],
		   [Website],
		   [EIN],
		   [CustomerCreatedUtc],
		   [OrganizationId],
		   [CustomerOrgId],
		   [IsActive]
	FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK)
	WHERE [Customer].[OrganizationId] = @organizationId
END
GO
PRINT N'Creating [StaffingManager].[CreatePosition]...';


GO
CREATE PROCEDURE [StaffingManager].[CreatePosition]
	@organizationId INT,
	@customerId INT,
	@addressId INT,  
	@startDate DATETIME2(0), 
	@positionStatus INT,
	@positionTitle NVARCHAR(140), 
	@billingRateFrequency INT,
	@billingRateAmount INT,
	@durationMonths INT,
	@employmentType INT,
	@positionCount INT,
	@requiredSkills NVARCHAR (MAX),
	@jobResponsibilities NVARCHAR (MAX),
	@desiredSkills NVARCHAR (MAX),
	@positionLevel NVARCHAR (140),
	@hiringManager NVARCHAR (140),
	@teamName NVARCHAR (140)
AS
BEGIN
	SET NOCOUNT ON;
		INSERT INTO [StaffingManager].[Position] 
		([OrganizationId], 
		[CustomerId], 
		[AddressId],
		[StartDate], 
		[PositionStatusId], 
		[PositionTitle],
		[BillingRateFrequency],
		[BillingRateAmount],
		[DurationMonths],
		[EmploymentTypeId],
		[PositionCount],
		[RequiredSkills],
		[JobResponsibilities],
		[DesiredSkills],
		[PositionLevelId],
		[HiringManager],
		[TeamName])
	VALUES 	
		(@organizationId, 
		@customerId, 
		@addressId,
		@startDate, 
		@positionStatus, 
		@positionTitle,
		@billingRateFrequency,
		@billingRateAmount,
		@durationMonths,
		@employmentType,
		@positionCount,
		@requiredSkills,
		@jobResponsibilities,
		@desiredSkills,
		@positionLevel,
		@hiringManager,
		@teamName)
		
	SELECT
		IDENT_CURRENT('[StaffingManager].[Position]') AS [PositionId];
END
GO
PRINT N'Creating [StaffingManager].[GetApplicationAndDocumentsById]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicationAndDocumentsById]
	@applicationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [StaffingManager].[Application] WHERE [ApplicationId] = @applicationId
	SELECT * FROM [StaffingManager].[ApplicationDocument] WHERE [ApplicationId] = @applicationId
END
GO
PRINT N'Creating [StaffingManager].[GetPositionsByorganizationId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetPositionsByorganizationId]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [PositionId],
		[OrganizationId],
		[CustomerId],
		[Position].[AddressId],
		[StartDate], 
		[PositionStatusId],
		[PositionTitle], 
		[BillingRateFrequency],
		[BillingRateAmount],
		[DurationMonths],
		[EmploymentTypeId],
		[PositionCount],
		[RequiredSkills],
		[JobResponsibilities],
		[DesiredSkills],
		[PositionLevelId],
		[HiringManager],
		[TeamName],
		[Address].[Address1],
		[Address].[Address2],
		[Address].[City],
		[State].[StateName],
		[Country].[CountryName],
		[Address].[PostalCode]
	FROM [StaffingManager].[Position]
	LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Position].[AddressId]
	LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryId] = [Address].[CountryCode]
	LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Position].[OrganizationId] = @organizationId
	ORDER BY [StaffingManager].[Position].[PositionCreatedUtc] DESC

	-- Select all tags from the position
	SELECT
		[Tag].[TagId],
		[Tag].[TagName],
		[Position].[PositionId]
	FROM [StaffingManager].[Position]
		JOIN [StaffingManager].[PositionTag] ON [PositionTag].[PositionId] = [Position].[PositionId]
		JOIN [Lookup].[Tag] ON [PositionTag].[TagId] = [Tag].[TagId]
	WHERE [Position].[OrganizationId] = @organizationId
END
GO
PRINT N'Creating [StaffingManager].[GetPosition]...';


GO
CREATE PROCEDURE [StaffingManager].[GetPosition]
	@positionId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [Position].[PositionId],
		[Position].[OrganizationId],
		[CustomerId],
		[Position].[AddressId],  
		[StartDate], 
		[Position].[PositionStatusId],
		[PositionTitle], 
		[BillingRateFrequency],
		[BillingRateAmount],
		[DurationMonths],
		[Position].[EmploymentTypeId],
		[PositionCount],
		[RequiredSkills],
		[JobResponsibilities],
		[DesiredSkills],
		[Position].[PositionLevelId],
		[HiringManager],
		[TeamName],
		[Address].[Address1],
		[Address].[City],
		[State].[StateName],
		[Country].[CountryName],
		[Address].[PostalCode],
		[EmploymentType].[EmploymentTypeName],
		[PositionStatus].[PositionStatusName],
		[PositionLevel].[PositionLevelName]
	FROM [StaffingManager].[Position]
	LEFT JOIN [Lookup].[Address]		WITH (NOLOCK) ON [Address].[AddressId] = [Position].[AddressId]
	LEFT JOIN [Lookup].[Country]		WITH (NOLOCK) ON [Country].[CountryId] = [Address].[CountryId]
	LEFT JOIN [Lookup].[State]			WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	LEFT JOIN [StaffingManager].[PositionTag]	WITH (NOLOCK) ON [PositionTag].[PositionId] = [Position].[PositionId]
	LEFT JOIN [StaffingManager].[EmploymentType] WITH (NOLOCK) ON [EmploymentType].[EmploymentTypeId] = [Position].[EmploymentTypeId]
	LEFT JOIN [StaffingManager].[PositionStatus] WITH (NOLOCK) ON [PositionStatus].[PositionStatusId] = [Position].[PositionStatusId]
	LEFT JOIN [StaffingManager].[PositionLevel] WITH (NOLOCK) ON [PositionLevel].[PositionLevelId] = [Position].[PositionLevelId]
	WHERE [Position].[PositionId] = @positionId

	-- Select all tags from the position
	SELECT
		[Tag].[TagId],
		[Tag].[TagName]
	FROM [StaffingManager].[Position]
		JOIN [StaffingManager].[PositionTag] ON [PositionTag].[PositionId] = [Position].[PositionId]
		JOIN [Lookup].[Tag] ON [PositionTag].[TagId] = [Tag].[TagId]
	WHERE [Position].[PositionId] = @positionId
END
GO
PRINT N'Creating [StaffingManager].[GetApplicantByApplicationId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicantByApplicationId]
	@applicationId INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @applicantId INT
	SELECT @applicantId = [ApplicantId] FROM [StaffingManager].[Application] WHERE [ApplicationId] = @applicationId
	
	SELECT * FROM [StaffingManager].[Applicant] WHERE [ApplicantId] = @applicantId
END
GO
PRINT N'Creating [StaffingManager].[GetApplicationDocumentsById]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicationDocumentsById]
	@applicationDocumentId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [StaffingManager].[ApplicationDocument] WHERE [ApplicationDocumentId] = @applicationDocumentId
END
GO
PRINT N'Creating [StaffingManager].[GetApplicationsByApplicantId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicationsByApplicantId]
	@applicantId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [StaffingManager].[Application] WHERE [ApplicantId] = @applicantId
END
GO
PRINT N'Creating [StaffingManager].[GetApplicantById]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicantById]
	@applicant INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [StaffingManager].[Applicant] WHERE [ApplicantId] = @applicant
END
GO
PRINT N'Creating [StaffingManager].[GetApplicationDocumentsByApplicationId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicationDocumentsByApplicationId]
	@applicationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [StaffingManager].[ApplicationDocument] WHERE [ApplicationId] = @applicationId
END
GO
PRINT N'Creating [StaffingManager].[GetApplicationsByPositionId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicationsByPositionId]
	@positionId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [StaffingManager].[Application] WHERE [PositionId] = @positionId
END
GO
PRINT N'Creating [StaffingManager].[GetApplicationById]...';


GO
CREATE PROCEDURE [StaffingManager].[GetApplicationById]
	@applicationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [StaffingManager].[Application] WHERE [ApplicationId] = @applicationId
END
GO
PRINT N'Creating [StaffingManager].[DeleteApplicationDocument]...';


GO
CREATE PROCEDURE [StaffingManager].[DeleteApplicationDocument]
	@applicationDocumentId INT
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM [StaffingManager].[ApplicationDocument] WHERE [ApplicationDocumentId] = @applicationDocumentId
END
GO
PRINT N'Creating [StaffingManager].[DeleteApplication]...';


GO
CREATE PROCEDURE [StaffingManager].[DeleteApplication]
	@applicationId INT
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM [StaffingManager].[Application] WHERE [ApplicationId] = @applicationId
END
GO
PRINT N'Creating [StaffingManager].[DeleteApplicant]...';


GO
CREATE PROCEDURE [StaffingManager].[DeleteApplicant]
	@applicantId INT
AS
BEGIN
	SET NOCOUNT ON

	DELETE FROM [Lookup].[Address]
	WHERE [AddressId] IN
		(SELECT [AddressId]
		FROM [StaffingManager].[Applicant]
		WHERE [ApplicantId] = @applicantId)

	DELETE FROM [StaffingManager].[Applicant] WHERE [ApplicantId] = @applicantId
END
GO
PRINT N'Creating [StaffingManager].[DeletePosition]...';


GO
CREATE PROCEDURE [StaffingManager].[DeletePosition]
	@positionId INT
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM [StaffingManager].[Position] WHERE [PositionId] = @positionId
END
GO
PRINT N'Creating [StaffingManager].[GetEmploymentTypeById]...';


GO
CREATE PROCEDURE [StaffingManager].[GetEmploymentTypeById]
	@employmentTypeId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [EmploymentTypeId],
		[OrganizationId],
		[EmploymentTypeName]
	FROM [StaffingManager].[EmploymentType]
	WHERE [EmploymentType].[OrganizationId] = @employmentTypeId
END
GO
PRINT N'Creating [StaffingManager].[GetPositionStatusById]...';


GO
CREATE PROCEDURE [StaffingManager].[GetPositionStatusById]
	@positionStatusId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [PositionStatusId],
		[OrganizationId],
		[PositionStatusName]
	FROM [StaffingManager].[PositionStatus]
	WHERE [PositionStatus].[OrganizationId] = @positionStatusId
END
GO
PRINT N'Creating [StaffingManager].[GetPositionLevelById]...';


GO
CREATE PROCEDURE [StaffingManager].[GetPositionLevelById]
	@PositionLevelId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [PositionLevelId],
		[OrganizationId],
		[PositionLevelName]
	FROM [StaffingManager].[PositionLevel]
	WHERE [PositionLevel].[OrganizationId] = @PositionLevelId
END
GO
PRINT N'Creating [StaffingManager].[GetEmploymentTypesByOrganizationId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetEmploymentTypesByOrganizationId]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [EmploymentTypeId],
		[OrganizationId],
		[EmploymentTypeName]
	FROM [StaffingManager].[EmploymentType]
	WHERE [EmploymentType].[OrganizationId] = @organizationId
	ORDER BY [StaffingManager].[EmploymentType].[EmploymentTypeName] DESC
END
GO
PRINT N'Creating [StaffingManager].[GetPositionStatusesByOrganizationId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetPositionStatusesByOrganizationId]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [PositionStatusId],
		[OrganizationId],
		[PositionStatusName]
	FROM [StaffingManager].[PositionStatus]
	WHERE [PositionStatus].[OrganizationId] = @organizationId
	ORDER BY [StaffingManager].[PositionStatus].[PositionStatusName] DESC
END
GO
PRINT N'Creating [StaffingManager].[GetPositionLevelsByorganizationId]...';


GO
CREATE PROCEDURE [StaffingManager].[GetPositionLevelsByorganizationId]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [PositionLevelId],
		[OrganizationId],
		[PositionLevelName]
	FROM [StaffingManager].[PositionLevel]
	WHERE [PositionLevel].[OrganizationId] = @organizationId
	ORDER BY [StaffingManager].[PositionLevel].[PositionLevelName] DESC
END
GO
PRINT N'Creating [StaffingManager].[DeleteEmploymentType]...';


GO
CREATE PROCEDURE [StaffingManager].[DeleteEmploymentType]
	@employmentTypeId INT
	
AS
BEGIN
	DELETE FROM [StaffingManager].[EmploymentType] WHERE [EmploymentTypeId] = @employmentTypeId
END
GO
PRINT N'Creating [StaffingManager].[DeletePositionStatus]...';


GO
CREATE PROCEDURE [StaffingManager].[DeletePositionStatus]
	@positionStatusId INT
	
AS
BEGIN
	DELETE FROM [StaffingManager].[PositionStatus] WHERE [PositionStatusId] = @positionStatusId
END
GO
PRINT N'Creating [StaffingManager].[DeletePositionLevel]...';


GO
CREATE PROCEDURE [StaffingManager].[DeletePositionLevel]
	@positionLevelId INT
	
AS
BEGIN
	DELETE FROM [StaffingManager].[PositionLevel] WHERE [PositionLevelId] = @positionLevelId
END
GO
PRINT N'Creating [StaffingManager].[CreatePositionStatus]...';


GO
CREATE PROCEDURE [StaffingManager].[CreatePositionStatus]
	@organizationId		INT,
	@positionStatusName NVARCHAR(32)

AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO [StaffingManager].[PositionStatus] 
		([OrganizationId],
		[PositionStatusName])
	VALUES 	 
		(@organizationId,
		@positionStatusName)
END
GO
PRINT N'Creating [StaffingManager].[CreatePositionLevel]...';


GO
CREATE PROCEDURE [StaffingManager].[CreatePositionLevel]
	@organizationId		INT,
	@positionLevelName NVARCHAR(32)

AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO [StaffingManager].[PositionLevel] 
		([OrganizationId],
		[PositionLevelName])
	VALUES
		(@organizationId,
		@positionLevelName)
END
GO
PRINT N'Creating [StaffingManager].[CreateEmploymentType]...';


GO
CREATE PROCEDURE [StaffingManager].[CreateEmploymentType]
	@organizationId		INT,
	@employmentTypeName NVARCHAR(32)

AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO [StaffingManager].[EmploymentType] 
		([OrganizationId],
		[EmploymentTypeName])
	VALUES 	 
		(@organizationId,
		@employmentTypeName)
END
GO
PRINT N'Creating [StaffingManager].[GetStaffingIndexInfo]...';


GO
CREATE PROCEDURE [StaffingManager].[GetStaffingIndexInfo]
	@organizationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [Position].[PositionId],
		[Position].[OrganizationId],
		[Position].[CustomerId],
		[Position].[AddressId],
		[PositionCreatedUtc],
		[PositionModifiedUtc],
		[StartDate], 
		[PositionStatusId],
		[PositionTitle], 
		[BillingRateFrequency],
		[BillingRateAmount],
		[DurationMonths],
		[EmploymentTypeId],
		[PositionCount],
		[RequiredSkills],
		[JobResponsibilities],
		[DesiredSkills],
		[PositionLevelId],
		[HiringManager],
		[TeamName],
		[Address].[Address1],
		[Address].[Address2],
		[Address].[City],
		[State].[StateName],
		[Country].[CountryName],
		[Address].[PostalCode]
	FROM [StaffingManager].[Position]
	LEFT JOIN [StaffingManager].[PositionTag]	WITH (NOLOCK) ON [PositionTag].[PositionId] = [Position].[PositionId]
		 JOIN [Lookup].[Tag]					WITH (NOLOCK) ON [PositionTag].[TagId] = [Tag].[TagId]
	LEFT JOIN [Lookup].[Address]				WITH (NOLOCK) ON [Address].[AddressId] = [Position].[AddressId]
	LEFT JOIN [Lookup].[Country]				WITH (NOLOCK) ON [Country].[CountryId] = [Address].[CountryId]
	LEFT JOIN [Lookup].[State]					WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE [Position].[OrganizationId] = @organizationId
	ORDER BY [StaffingManager].[Position].[PositionCreatedUtc] DESC

	-- Select all tags from the positions
	SELECT
		[Tag].[TagId],
		[Tag].[TagName],
		[Position].[PositionId]
	FROM [StaffingManager].[Position]
		JOIN [StaffingManager].[PositionTag] ON [PositionTag].[PositionId] = [Position].[PositionId]
		JOIN [Lookup].[Tag] ON [PositionTag].[TagId] = [Tag].[TagId]
	WHERE [Position].[OrganizationId] = @organizationId
	
	-- Select all Employment Types from the org
		SELECT [EmploymentTypeId],
		[OrganizationId],
		[EmploymentTypeName]
	FROM [StaffingManager].[EmploymentType]
	WHERE [EmploymentType].[OrganizationId] = @organizationId

	-- Select all Position Levels from the org
	SELECT [PositionLevelId],
		[OrganizationId],
		[PositionLevelName]
	FROM [StaffingManager].[PositionLevel]
	WHERE [PositionLevel].[OrganizationId] = @organizationId

	-- Select all Position Status' from the org
		SELECT [PositionStatusId],
		[OrganizationId],
		[PositionStatusName]
	FROM [StaffingManager].[PositionStatus]
	WHERE [PositionStatus].[OrganizationId] = @organizationId
	
	-- Select all Customers for each position
	SELECT 
		[Customer].[CustomerId],
		[Customer].[CustomerName],
		[Customer].[AddressId],
		[Customer].[ContactEmail],
		[Customer].[ContactPhoneNumber],
		[Customer].[FaxNumber],
		[Customer].[Website],
		[Customer].[EIN],
		[Customer].[CustomerCreatedUtc],
		[Customer].[OrganizationId],
		[Customer].[CustomerOrgId],
		[Customer].[IsActive]
    FROM [Crm].[Customer] AS [Customer] WITH (NOLOCK)
    WHERE [Customer].[OrganizationId] = @organizationId
END
GO
PRINT N'Creating [StaffingManager].[DeletePositionTag]...';


GO
CREATE PROCEDURE [StaffingManager].[DeletePositionTag]
	@tagId INT,
	@positionId INT
	
AS
BEGIN
	DELETE FROM [StaffingManager].[PositionTag] WHERE [TagId] = @tagId AND [PositionId] = @positionId
END
GO
PRINT N'Creating [StaffingManager].[CreatePositionTag]...';


GO
CREATE PROCEDURE [StaffingManager].[CreatePositionTag]
	@tagId INT,
	@positionId INT

AS
BEGIN
	SET NOCOUNT ON;
		INSERT INTO [StaffingManager].[PositionTag] 
		([TagId], 
		[PositionId])
	VALUES 	
		(@tagId, 
		@positionId)
END
GO
PRINT N'Creating [StaffingManager].[CreatePositionTags]...';


GO
CREATE PROCEDURE [StaffingManager].[CreatePositionTags]
	@tags [Lookup].[TagTable] READONLY,
	@positionId INT
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRANSACTION
		-- COMMENT: Insert the tags into [Tag] if they don't already exist there
		INSERT INTO [Lookup].[Tag] ([TagName])
		SELECT [NEWTAGS].[TagName]
		FROM @tags AS [NEWTAGS]
		WHERE NOT EXISTS
			(SELECT [TagName]
			FROM [Lookup].[Tag]
			WHERE [Tag].[TagName] = [NEWTAGS].[TagName])

		-- Get the tag ids of the newly created tags from the previous statement
		DECLARE @tagIds TABLE ([TagId] INT)
		INSERT INTO @tagIds
		SELECT [TagId]
		FROM [Lookup].[Tag]
		WHERE [Tag].[TagName] IN
			(SELECT [TagName] FROM @tags)
	
		-- Insert all the new tags into [PositionTag]
		INSERT INTO [StaffingManager].[PositionTag] ([PositionId], [TagId])
		SELECT @positionId, [TagId]
		FROM @tagIds
	COMMIT TRANSACTION
END
GO
PRINT N'Creating [StaffingManager].[GetPositionTagsByPosition]...';


GO
CREATE PROCEDURE [StaffingManager].[GetPositionTagsByPosition]
	@PositionId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		@PositionId AS [PositionId],
		[PositionTag].[TagId],
		[Tag].[TagName]
	FROM [StaffingManager].[PositionTag]
		JOIN [Lookup].[Tag]
		ON [Tag].[TagId] = [PositionTag].[TagId]
	WHERE [PositionTag].[PositionId] = @PositionId; 
END
GO
PRINT N'Creating [Auth].[CreateInvitation]...';


GO
CREATE PROCEDURE [Auth].[CreateInvitation]
	@userId INT,
	@email NVARCHAR(384),
	@firstName NVARCHAR(40),
	@lastName NVARCHAR(40),
	@organizationId INT,
	@organizationRole INT,
	@employeeId NVARCHAR(16)
AS

BEGIN
	SET NOCOUNT ON;
	IF EXISTS (
		SELECT * FROM [Auth].[OrganizationUser] WITH (NOLOCK)
		INNER JOIN [Auth].[User] WITH (NOLOCK) ON [User].[UserId] = [OrganizationUser].[UserId]
		WHERE [Email] = @email AND [OrganizationId] = @organizationId
	)
	BEGIN
		SELECT -1 --Indicates the user is already in the organization
	END
	ELSE
	BEGIN
		-- Check for existing employee id
		IF EXISTS (
			SELECT * FROM [Auth].[OrganizationUser] WITH (NOLOCK)
			WHERE [OrganizationId] = @organizationId AND [EmployeeId] = @employeeId
		) OR EXISTS (
			SELECT * FROM [Auth].[Invitation] WITH (NOLOCK)
			WHERE [OrganizationId] = @organizationId AND [IsActive] = 1 AND [EmployeeId] = @employeeId
		)
		BEGIN
			SELECT -2 -- Indicates employee id already taken
		END
		ELSE
		BEGIN
			INSERT INTO [Auth].[Invitation] 
				([Email], 
				[FirstName], 
				[LastName], 
				[OrganizationId],  
				[IsActive], 
				[OrganizationRoleId],
				[EmployeeId]
				)
			VALUES 
				(@email, 
				@firstName, 
				@lastName, 
				@organizationId,  
				1, 
				@organizationRole, 
				@employeeId
				);

			-- Return invitation id
			SELECT SCOPE_IDENTITY()

			-- Return first and last names of inviting user
			SELECT [FirstName] FROM [Auth].[User] WITH (NOLOCK) WHERE [UserId] = @userId
			SELECT [LastName] FROM [Auth].[User] WITH (NOLOCK) WHERE [UserId] = @userId
		END
	END
END
GO
PRINT N'Creating [Auth].[GetOrgWithNextEmployeeId]...';


GO
CREATE PROCEDURE [Auth].[GetOrgWithNextEmployeeId]
	@organizationId int,
	@userId int
AS
	SELECT 
		[OrganizationId],
		[Organization].[OrganizationName],
		[SiteUrl], 
		[Organization].[AddressId],
		[Address].[Address1] AS 'Address',
		[Address].[City], 
		[State].[StateName] AS 'StateName', 
		[Country].[CountryName] AS 'CountryName', 
		[State].[StateId],
		[Country].[CountryCode] AS 'CountryCode',
		[Address].[PostalCode], 
		[PhoneNumber], 
		[FaxNumber], 
		[Subdomain],
		[OrganizationCreatedUtc] AS 'CreatedUtc'

	FROM [Auth].[Organization] WITH (NOLOCK)
		LEFT JOIN [Lookup].[Address]	WITH (NOLOCK) ON [Address].[AddressId] = [Organization].[AddressId]
		LEFT JOIN [Lookup].[Country]	WITH (NOLOCK) ON [Country].[CountryCode] = [Address].[CountryCode]
		LEFT JOIN [Lookup].[State]		WITH (NOLOCK) ON [State].[StateId] = [Address].[StateId]
	WHERE OrganizationId = @organizationId


	SELECT [EmployeeId]
	FROM [Auth].[OrganizationUser] WITH (NOLOCK)
	WHERE [OrganizationUser].[OrganizationId] = @organizationId AND [OrganizationUser].[UserId] = @userId
GO
PRINT N'Creating [Auth].[GetUser]...';


GO
CREATE procedure [Auth].[GetUser]
	@userId int
as
begin
	set nocount on

	-- get user information with address
	select u.*, a.*, s.StateName as 'State', c.CountryName as 'Country' from [User] u with (nolock)
	left join [Lookup].[Address] a with (nolock) on a.AddressId = u.AddressId
	left join [Lookup].[State] s with (nolock) on s.StateId = a.StateId
	left join [Lookup].[Country] c with (nolock) on c.CountryCode = a.CountryCode
	where u.UserId = @userId

	-- get list of organizations and the user role in each
	select o.*, ou.*, a.*, s.StateName as 'State', c.CountryName as 'Country' from Organization o with (nolock)
	inner join OrganizationUser ou with (nolock) on ou.OrganizationId = o.OrganizationId
	left join Lookup.Address a with (nolock) on a.AddressId = o.AddressId
	left join [Lookup].[State] s with (nolock) on s.StateId = a.StateId
	left join [Lookup].[Country] c with (nolock) on c.CountryCode = a.CountryCode
	where ou.UserId = @userId AND o.IsActive = 1 

	-- get a list of subscriptions and the user role in each
	select s.*, su.*, sku.SkuId, p.ProductId, p.ProductName, p.AreaUrl from Billing.Subscription s with (nolock)
	inner join Billing.SubscriptionUser su with (nolock) on su.SubscriptionId = s.SubscriptionId
	inner join Organization o with (nolock) on o.OrganizationId = s.OrganizationId
	inner join OrganizationUser ou with (nolock) on ou.OrganizationId = o.OrganizationId
	inner join Billing.Sku sku with (nolock) on sku.SkuId = s.SkuId
	inner join Billing.Product p with (nolock) on p.ProductId = sku.ProductId
	where ou.UserId = @userId and su.UserId = @userId and o.IsActive = 1 and s.IsActive = 1

	SELECT 
		[InvitationId], 
		[Invitation].[Email], 
		[Invitation].[FirstName], 
		[Invitation].[LastName],  
		[Invitation].[OrganizationId],
		[Organization].[OrganizationName] AS 'OrganizationName', 
		[OrganizationRoleId],
		[EmployeeId] 
	FROM [Auth].[User] WITH (NOLOCK)
	LEFT JOIN [Auth].[Invitation] WITH (NOLOCK) ON [User].[Email] = [Invitation].[Email]
	LEFT JOIN [Auth].[Organization] WITH (NOLOCK) ON [Invitation].[OrganizationId] = [Organization].[OrganizationId]
	WHERE [User].[UserId] = @userId AND [Invitation].[IsActive] = 1 and [Invitation].[DecisionDateUtc] is null

end
GO
PRINT N'Creating [Auth].[GetUserInvitationByInviteId]...';


GO
CREATE PROCEDURE [Auth].[GetUserInvitationByInviteId]
	@inviteId INT
AS
	SET NOCOUNT ON;
	SELECT 
		[InvitationId],
		[Email],
		[FirstName],
		[LastName], 
		[OrganizationId], 
		[Invitation].[OrganizationRoleId],
		[Auth].[Organization].[OrganizationName],
		[Auth].[OrganizationRole].[OrganizationRoleName],
		[EmployeeId],
		[Invitation].[StatusId]
	FROM [Auth].[Invitation] WITH (NOLOCK)
	LEFT JOIN [Auth].[OrganizationRole] WITH (NOLOCK) ON [OrganizationRole].[OrganizationRoleId] = [Invitation].[OrganizationRoleId]
	LEFT JOIN [Auth].[Organizaion] WITH (NOLOCK) ON [Auth].[Organization].OrganizationId =  [Invitation].[OrganizationId] 
	WHERE [InvitationId] = @inviteId AND [IsActive] = 1
GO
PRINT N'Creating [Auth].[RejectInvitation]...';


GO
CREATE PROCEDURE [Auth].[RejectInvitation]
	@invitationId INT
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE [Auth].[Invitation] 
	SET    [StatusId] = -1, DecisionDateUtc = GETUTCDATE()
	WHERE [InvitationId] = @invitationId;
END
GO
PRINT N'Creating [Auth].[UpdateUserMaxAmount]...';


GO
CREATE PROCEDURE [Auth].[UpdateUserMaxAmount]
	@userId int,
	@maxAmount nvarchar(512)
AS
BEGIN
	SET NOCOUNT ON
	UPDATE [Auth].[User]
	SET [MaxAmount] = @maxAmount
	WHERE [UserId] = @userId
END
GO
PRINT N'Creating [Billing].[GetSubscriptionName]...';


GO
CREATE PROCEDURE [Billing].[GetSubscriptionName]
	@subScriptionId int
AS
	SELECT Subscription.SubscriptionName
	FROM 
	Billing.Subscription
	Where Subscription.SubscriptionId = @subScriptionId
GO
PRINT N'Creating [Crm].[CreateCustomer]...';


GO
CREATE PROCEDURE [Crm].[CreateCustomer]
	@customerName NVARCHAR(32),
    @addressId INT,
	@contactEmail NVARCHAR(384), 
    @contactPhoneNumber VARCHAR(16),
	@faxNumber VARCHAR(16),
	@website NVARCHAR(128),
	@eIN NVARCHAR(16),
	@organizationId INT,
	@customerOrgId NVARCHAR(16)
AS
BEGIN
	SET NOCOUNT ON;
		INSERT INTO [Crm].[Customer] 
			([CustomerName], 
			[AddressId],
			[ContactEmail], 
			[ContactPhoneNumber], 
			[FaxNumber], 
			[Website], 
			[EIN], 
			[OrganizationId], 
			[CustomerOrgId])
		VALUES (@customerName, 
			@addressId,
			@contactEmail, 
			@contactPhoneNumber, 
			@faxNumber, 
			@website, 
			@eIN, 
			@organizationId, 
			@customerOrgId);
	
	SELECT
		SCOPE_IDENTITY();
END
GO
PRINT N'Creating [Expense].[AddReportHistory]...';


GO
CREATE PROCEDURE [Expense].[AddReportHistory]
	@userId INT,
	@reportId INT,
	@text NVARCHAR(MAX)
AS
BEGIN
	
	INSERT INTO [Expense].[ExpenseReportHistory]
		([UserId],
		[ExpenseReportId],
		[Text])
	VALUES (@userId,
		@reportId,
		@text);
END
GO
PRINT N'Creating [Expense].[CreateExpenseHistory]...';


GO
CREATE PROCEDURE [Expense].[CreateExpenseHistory]
	@historyId INT,
	@reportId INT,
	@userId INT,
	@status INT,
	@text NVARCHAR(MAX),
	@createdUtc datetime2(2),
	@modifiedUtc datetime2(2)
AS
BEGIN

	INSERT INTO [Expense].ExpenseReportHistory
		([HistoryId],
		[ExpenseReportId],
		[UserId],
		[CreatedUtc],
		[ModifiedUtc],
		[Text],
		[Status])
	VALUES (@historyId,
		@reportId,
		@userId,
		@createdUtc,
		@modifiedUtc,
		@text,
		@status);
END
GO
PRINT N'Creating [Expense].[GetExpenseHistory]...';


GO
CREATE PROCEDURE [Expense].[GetExpenseHistory]
	@reportId INT
AS
BEGIN

	SELECT
		[HistoryId],
		[ExpenseReportId],
		[UserId],
		[Status],
		[Text],
		[CreatedUtc],
		[ModifiedUtc]
	FROM 
		[Expense].[ExpenseReportHistory] AS [ERH]
	WHERE
		[ERH].[ExpenseReportId] = @reportId
END
GO
PRINT N'Creating [Expense].[GetExpenseItemsByExpenseReportId]...';


GO
CREATE PROCEDURE [Expense].[GetExpenseItemsByExpenseReportId]
	@reportId INT
AS

BEGIN
	SELECT [ExpenseItemId],
	[ItemDescription],
	[TransactionDate],
	[Amount],
	[ExpenseReportId],
	[AccountId],
	[IsBillableToCustomer],
	[ExpenseItemCreatedUtc],
	[ExpenseItemModifiedUtc]
	FROM [Expense].[ExpenseItem] AS [EI]
	WHERE [EI].[ExpenseReportId] = @reportId

END
GO
PRINT N'Creating [Expense].[GetReportHistory]...';


GO
CREATE PROCEDURE [Expense].[GetReportHistory]
	@reportId INT
AS
BEGIN
	SELECT	[ExpenseReportId],
	[UserId],
	[ERH].ModifiedUtc
	[Text]
	FROM [Expense].[ExpenseReportHistory] AS [ERH]
	WHERE [ERH].[ExpenseReportId] = @reportId
END
GO
PRINT N'Creating [Expense].[UpdateExpenseHistory]...';


GO
CREATE PROCEDURE [Expense].[UpdateExpenseHistory]
	@historyId INT,
	@text NVARCHAR(MAX)
AS

BEGIN

	UPDATE [Expense].[ExpenseReportHistory]
	SET
		[ModifiedUtc] = GETUTCDATE(),
		[Text] = @text
	WHERE [ExpenseReportHistory].[HistoryId] = @historyId;
END
GO
PRINT N'Creating [Finance].[GetAccounts]...';


GO
CREATE PROCEDURE [Finance].[GetAccounts]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		[A].[AccountId],
		[A].[AccountName],
		[A].[IsActive],
		[A].[AccountTypeId],
		[T].[AccountTypeName],
		[A].[ParentAccountId]
	FROM [Finance].[Account] AS [A] WITH (NOLOCK)
		LEFT JOIN [Finance].[AccountType] AS [T] WITH (NOLOCK) ON [T].[AccountTypeId] = [A].[AccountTypeId]
END
GO
PRINT N'Creating [Lookup].[CreateTag]...';


GO
CREATE PROCEDURE [Lookup].[CreateTag]
	@tagName NVARCHAR(32)

AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO [Lookup].[Tag] 
		([TagName])
	VALUES 	 
		(@tagName)
END
GO
PRINT N'Creating [Lookup].[DeleteTag]...';


GO
CREATE PROCEDURE [Lookup].[DeleteTag]
	@tagId INT
	
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM [Lookup].[Tag] WHERE [TagId] = @tagId
END
GO
PRINT N'Creating [Lookup].[GetTags]...';


GO
CREATE PROCEDURE [Lookup].[GetTags]
AS
BEGIN
	SELECT * FROM [Lookup].[Tag];
END
GO
PRINT N'Creating [Lookup].[GetTagsByPositionId]...';


GO
CREATE PROCEDURE [Lookup].[GetTagsByPositionId]
	@positionId INT
AS
BEGIN
	SELECT
		[T].[TagId],
		[T].[TagName]
	FROM [Lookup].[Tag] [T]
		JOIN [StaffingManager].[PositionTag] [PT] ON [PT].[TagId] = [T].[TagId]
	WHERE [PT].[PositionId] = @positionId
END
GO
PRINT N'Creating [Lookup].[SetupTag]...';


GO
CREATE PROCEDURE [Lookup].[SetupTag]
	@positionId INT,
	@tagName NVARCHAR(32)

AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRANSACTION
		EXEC [Lookup].[CreateTag] @tagName;

		DECLARE @tagId INT = IDENT_CURRENT('[StaffingManager].[TagId]');

		EXEC [StaffingManager].[CreatePositionTag] @tagId, @positionId;

		SELECT IDENT_CURRENT('[StaffingManager].[TagId]');
	COMMIT TRANSACTION
END
GO
PRINT N'Creating [StaffingManager].[SetupPosition]...';


GO
CREATE PROCEDURE [StaffingManager].[SetupPosition]
	@organizationId INT,
	@customerId INT,
	@startDate DATETIME2(0), 
	@positionStatus INT,
	@positionTitle NVARCHAR(140), 
	@billingRateFrequency INT,
	@billingRateAmount INT,
	@durationMonths INT,
	@employmentType INT,
	@positionCount INT,
	@requiredSkills NVARCHAR (MAX),
	@jobResponsibilities NVARCHAR (MAX),
	@desiredSkills NVARCHAR (MAX),
	@positionLevel NVARCHAR (140),
	@hiringManager NVARCHAR (140),
	@teamName NVARCHAR (140),
	@address1 NVARCHAR (64),
	@address2 NVARCHAR (64),
	@city NVARCHAR(32),
	@stateId SMALLINT,
	@postalCode NVARCHAR(16),
	@countryCode VARCHAR(8),
	@tags [Lookup].[TagTable] READONLY
AS
BEGIN TRANSACTION

	EXEC [Lookup].[CreateAddress]
		@address1,
		@address2,
		@city,
		@stateId,
		@postalCode,
		@countryCode
		
		DECLARE @addressId INT
		SET @addressId = IDENT_CURRENT('[Lookup].[Address]')

	EXEC [StaffingManager].[CreatePosition]
		@organizationId,
		@customerId,
		@addressId,  
		@startDate, 
		@positionStatus,
		@positionTitle, 
		@billingRateFrequency,
		@billingRateAmount,
		@durationMonths,
		@employmentType,
		@positionCount,
		@requiredSkills,
		@jobResponsibilities,
		@desiredSkills,
		@positionLevel,
		@hiringManager,
		@teamName
	
		DECLARE @positionId INT
		SET @positionId = IDENT_CURRENT('[StaffingManager].[Position]')

	EXEC [StaffingManager].[CreatePositionTags]
		@tags,
		@positionId

	SELECT @positionId
COMMIT TRANSACTION
GO
PRINT N'Refreshing [Auth].[DeleteOrg]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[DeleteOrg]';


GO
PRINT N'Refreshing [Auth].[GetAddMemberInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetAddMemberInfo]';


GO
PRINT N'Refreshing [Auth].[UpdateMember]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateMember]';


GO
PRINT N'Refreshing [Auth].[CreateUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[CreateUser]';


GO
PRINT N'Refreshing [Auth].[GetOrgAndSubRoles]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgAndSubRoles]';


GO
PRINT N'Refreshing [Auth].[GetOrganizationOwnerEmails]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrganizationOwnerEmails]';


GO
PRINT N'Refreshing [Auth].[GetOrgUserByEmail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgUserByEmail]';


GO
PRINT N'Refreshing [Auth].[GetOrgUserList]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgUserList]';


GO
PRINT N'Refreshing [Auth].[GetOrgUserRole]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetOrgUserRole]';


GO
PRINT N'Refreshing [Auth].[GetPasswordHashFromUserId]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetPasswordHashFromUserId]';


GO
PRINT N'Refreshing [Auth].[GetRolesAndPermissions]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetRolesAndPermissions]';


GO
PRINT N'Refreshing [Auth].[GetUserProfile]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetUserProfile]';


GO
PRINT N'Refreshing [Auth].[UpdateEmailConfirmed]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateEmailConfirmed]';


GO
PRINT N'Refreshing [Auth].[UpdateUserActiveSub]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserActiveSub]';


GO
PRINT N'Refreshing [Auth].[UpdateUserInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserInfo]';


GO
PRINT N'Refreshing [Auth].[UpdateUserLanguagePreference]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserLanguagePreference]';


GO
PRINT N'Refreshing [Auth].[UpdateUserPassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserPassword]';


GO
PRINT N'Refreshing [Auth].[UpdateUserPasswordResetCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserPasswordResetCode]';


GO
PRINT N'Refreshing [Auth].[UpdateUserPasswordUsingCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserPasswordUsingCode]';


GO
PRINT N'Refreshing [Billing].[GetBillingHistoryByOrg]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[GetBillingHistoryByOrg]';


GO
PRINT N'Refreshing [Pjm].[GetNextProjectIdAndSubUsers]...';


GO
EXECUTE sp_refreshsqlmodule N'[Pjm].[GetNextProjectIdAndSubUsers]';


GO
PRINT N'Refreshing [Pjm].[GetProjectEditInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Pjm].[GetProjectEditInfo]';


GO
PRINT N'Refreshing [Pjm].[GetProjectsForOrgAndUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[Pjm].[GetProjectsForOrgAndUser]';


GO
PRINT N'Refreshing [TimeTracker].[GetReportInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[GetReportInfo]';


GO
PRINT N'Refreshing [TimeTracker].[GetTimeEntriesByUserOverDateRange]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[GetTimeEntriesByUserOverDateRange]';


GO
PRINT N'Refreshing [TimeTracker].[GetTimeEntriesOverDateRange]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[GetTimeEntriesOverDateRange]';


GO
PRINT N'Refreshing [Auth].[DeleteOrgUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[DeleteOrgUser]';


GO
PRINT N'Refreshing [Auth].[GetActiveProductRoleForUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[GetActiveProductRoleForUser]';


GO
PRINT N'Refreshing [Billing].[CreateSubscription]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[CreateSubscription]';


GO
PRINT N'Refreshing [Billing].[DeleteSubscription]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[DeleteSubscription]';


GO
PRINT N'Refreshing [Billing].[DeleteSubscriptionUsers]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[DeleteSubscriptionUsers]';


GO
PRINT N'Refreshing [Billing].[GetOrgSkus]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[GetOrgSkus]';


GO
PRINT N'Refreshing [Billing].[GetProductAreaBySubscription]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[GetProductAreaBySubscription]';


GO
PRINT N'Refreshing [Billing].[GetProductRolesFromSubscription]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[GetProductRolesFromSubscription]';


GO
PRINT N'Refreshing [Billing].[GetProductSubscriptionInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[GetProductSubscriptionInfo]';


GO
PRINT N'Refreshing [Billing].[GetSubscriptionsDisplayByOrg]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[GetSubscriptionsDisplayByOrg]';


GO
PRINT N'Refreshing [Billing].[UpdateSubscription]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[UpdateSubscription]';


GO
PRINT N'Refreshing [Billing].[UpdateSubscriptionUserRoles]...';


GO
EXECUTE sp_refreshsqlmodule N'[Billing].[UpdateSubscriptionUserRoles]';


GO
PRINT N'Refreshing [TimeTracker].[CreateBulkTimeEntry]...';


GO
EXECUTE sp_refreshsqlmodule N'[TimeTracker].[CreateBulkTimeEntry]';


GO
PRINT N'Refreshing [Hrm].[CreateHoliday]...';


GO
EXECUTE sp_refreshsqlmodule N'[Hrm].[CreateHoliday]';


GO
PRINT N'Refreshing [Expense].[DeleteExpenseItem]...';


GO
EXECUTE sp_refreshsqlmodule N'[Expense].[DeleteExpenseItem]';


GO
PRINT N'Refreshing [Expense].[GetExpenseItemsByAccountId]...';


GO
EXECUTE sp_refreshsqlmodule N'[Expense].[GetExpenseItemsByAccountId]';


GO
PRINT N'Refreshing [Expense].[GetExpenseItemsByExpenseItemId]...';


GO
EXECUTE sp_refreshsqlmodule N'[Expense].[GetExpenseItemsByExpenseItemId]';


GO
PRINT N'Refreshing [Expense].[DeleteExpenseReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[Expense].[DeleteExpenseReport]';


GO
PRINT N'Refreshing [Auth].[UpdateOrganization]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateOrganization]';


GO
PRINT N'Refreshing [Crm].[UpdateCustomerInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[Crm].[UpdateCustomerInfo]';


GO
PRINT N'Refreshing [Auth].[UpdateUserProfile]...';


GO
EXECUTE sp_refreshsqlmodule N'[Auth].[UpdateUserProfile]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '52b32b4f-9b1c-4043-b7f4-87641f83ff97')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('52b32b4f-9b1c-4043-b7f4-87641f83ff97')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'abefad04-71e3-4b98-a32f-492f383c8847')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('abefad04-71e3-4b98-a32f-492f383c8847')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '21b539e5-826f-4500-9fab-7063780ce0f5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('21b539e5-826f-4500-9fab-7063780ce0f5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7d101c52-1703-4eca-8686-50fbe419ebe2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7d101c52-1703-4eca-8686-50fbe419ebe2')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO

ALTER TABLE [Auth].[Logging] WITH CHECK CHECK CONSTRAINT [FK_Logging_User];

ALTER TABLE [Auth].[OrganizationUser] WITH CHECK CHECK CONSTRAINT [FK_OrganizationUser_User];

ALTER TABLE [Billing].[BillingHistory] WITH CHECK CHECK CONSTRAINT [FK_BillingHistory_User];

ALTER TABLE [Billing].[SubscriptionUser] WITH CHECK CHECK CONSTRAINT [FK_SubscriptionUser_User];

ALTER TABLE [Expense].[ExpenseReport] WITH CHECK CHECK CONSTRAINT [FK_ExpenseReport_User];

ALTER TABLE [Auth].[User] WITH CHECK CHECK CONSTRAINT [FK_User_Subscription];

ALTER TABLE [Auth].[User] WITH CHECK CHECK CONSTRAINT [FK_User_Language];

ALTER TABLE [Pjm].[ProjectUser] WITH CHECK CHECK CONSTRAINT [FK_ProjectUser_User];

ALTER TABLE [TimeTracker].[TimeEntry] WITH CHECK CHECK CONSTRAINT [FK_TimeEntry_User];

ALTER TABLE [StaffingManager].[Position] WITH CHECK CHECK CONSTRAINT [FK_Position_Organization];

ALTER TABLE [StaffingManager].[Position] WITH CHECK CHECK CONSTRAINT [FK_Position_Address];

ALTER TABLE [StaffingManager].[Position] WITH CHECK CHECK CONSTRAINT [FK_Position_Customer];

ALTER TABLE [StaffingManager].[Position] WITH CHECK CHECK CONSTRAINT [FK_Position_PositionStatus];

ALTER TABLE [StaffingManager].[Position] WITH CHECK CHECK CONSTRAINT [FK_Position_PositionLevel];

ALTER TABLE [StaffingManager].[Position] WITH CHECK CHECK CONSTRAINT [FK_Position_EmploymentType];

ALTER TABLE [StaffingManager].[EmploymentType] WITH CHECK CHECK CONSTRAINT [FK_EmploymentType_OrganizationId];

ALTER TABLE [StaffingManager].[ApplicationStatus] WITH CHECK CHECK CONSTRAINT [FK_ApplicationStatus_Organization];

ALTER TABLE [StaffingManager].[ApplicationDocument] WITH CHECK CHECK CONSTRAINT [PK_ApplicationDocument_Application];

ALTER TABLE [StaffingManager].[Application] WITH CHECK CHECK CONSTRAINT [FK_Application_Applicant];

ALTER TABLE [StaffingManager].[Application] WITH CHECK CHECK CONSTRAINT [FK_Application_Position];

ALTER TABLE [StaffingManager].[Applicant] WITH CHECK CHECK CONSTRAINT [FK_Applicant_Address];

ALTER TABLE [StaffingManager].[PositionTag] WITH CHECK CHECK CONSTRAINT [FK_PositionTag_Position];

ALTER TABLE [StaffingManager].[PositionTag] WITH CHECK CHECK CONSTRAINT [FK_PositionTag_Tag];

ALTER TABLE [StaffingManager].[PositionStatus] WITH CHECK CHECK CONSTRAINT [FK_PositionStatus_Organization];

ALTER TABLE [StaffingManager].[PositionLevel] WITH CHECK CHECK CONSTRAINT [FK_PositionLevel_Organization];

ALTER TABLE [Expense].[ExpenseReportHistory] WITH CHECK CHECK CONSTRAINT [PK_ExpenseReportHistory_ReportId];

ALTER TABLE [Expense].[ExpenseReportHistory] WITH CHECK CHECK CONSTRAINT [PK_ExpenseReportHistory_UserId];


GO
PRINT N'Update complete.';

COMMIT TRANSACTION;
/*
Post data chagnes.
*/




GO
