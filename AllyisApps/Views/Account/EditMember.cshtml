@model EditMemberViewModel
@{
    ViewBag.Title = string.Format("{0}: {1}", Strings.EditMember, Model.OrganizationName);
}

@if (Model.CanEditMember)
{
        @:<form action="@Url.Action(ActionConstants.EditMember, ControllerConstants.Account)" method="post">
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true, string.Empty, new { @class = "text-danger" })
	@Html.HiddenFor(m => m.OrganizationId)
	@Html.HiddenFor(m => m.UserId)
	@Html.HiddenFor(m => m.CanEditMember)
}

<div class="container">
	<div class="row" id="edit-member">
		<div class="col-xs-12">
			<table id="org-details" class="table table-striped table-condensed">
				<tr>
					<td><label>@Strings.Email</label></td>
					<td>@Html.DisplayFor(m => m.Email)</td>
					@Html.HiddenFor(m => m.Email)
				</tr>
				<tr>
					<td><label>@Strings.FirstName</label></td>
					<td>@Html.DisplayFor(m => m.FirstName)</td>
					@Html.HiddenFor(m => m.FirstName)
				</tr>
				<tr>
					<td><label>@Strings.LastName</label></td>
					<td>@Html.DisplayFor(m => m.LastName)</td>
					@Html.HiddenFor(m => m.LastName)
				</tr>
				<tr>
					<td><label>@Strings.DateOfBirth</label></td>
					<td>@Html.DisplayFor(m => m.DateOfBirth)</td>
					@Html.HiddenFor(m => m.DateOfBirth)
				</tr>
				<tr>
					<td><label>@Strings.PhoneNumber</label></td>
					<td>@Html.DisplayFor(m => m.PhoneNumber)</td>
					@Html.HiddenFor(m => m.PhoneNumber)
				</tr>
				<tr>
					<td><label>@Strings.Address</label></td>
					<td>@Html.DisplayFor(m => m.Address)</td>
					@Html.HiddenFor(m => m.Address)
				</tr>
				<tr>
					<td><label>@Strings.City</label></td>
					<td>@Html.DisplayFor(m => m.City)</td>
					@Html.HiddenFor(m => m.City)
				</tr>
				<tr>
					<td><label>@Strings.State</label></td>
					<td>@Html.DisplayFor(m => m.StateName)</td>
					@Html.HiddenFor(m => m.StateName)
				</tr>
				<tr>
					<td><label>@Strings.Country</label></td>
					<td>@Html.DisplayFor(m => m.CountryName)</td>
					@Html.HiddenFor(m => m.CountryName)
				</tr>
				@if (Model.CanEditMember)
	{
					<tr>
						<td>
							<div>
								@Html.ReqLabelFor(m => m.EmployeeId, Strings.EmployeeId)
							</div>
						</td>
						<td>
							<div>
								@Html.TextBoxFor(m => m.EmployeeId, new { @class = "form-control" })
								@Html.ValidationMessageFor(m => m.EmployeeId)
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div>
								@Html.ReqLabelFor(m => m.OrgRolesList, string.Format("{0} Role", Model.OrganizationName))
							</div>
						</td>
						<td>
							<div class="role-drop-down">

								@Html.DropDownListFor(m => m.SelectedOrganizationRoleId, new SelectList(Model.OrgRolesList, "Key", "Value"), new { @class = "form-control" })
							</div>
						</td>
					</tr>

		int count = 0;
		foreach (var item in Model.SubscriptionRoles)
		{
						<tr>
							<td>
								<div>
									@Html.HiddenFor(x => x.SubscriptionRoles[count].SubscriptionId)
									@Html.HiddenFor(x => x.SubscriptionRoles[count].SubscriptionName)
									@Html.ReqLabelFor(x => x.SubscriptionRoles[count].RoleList, string.Format("{0} Role", item.SubscriptionName))
								</div>
							</td>
							<td>
								<div class="role-drop-down">
									@Html.DropDownListFor(x => x.SubscriptionRoles[count].SelectedRoleId, new SelectList(item.RoleList, "Key", "Value", Model.SubscriptionRoles[count].SelectedRoleId), new { @class = "form-control" })
								</div>
							</td>
						</tr>
			count++;
		}
	}
	else
	{
					<tr>
						<td><label>@Strings.EmployeeId</label></td>
						<td>@Html.DisplayFor(m => m.EmployeeId)</td>
					</tr>

					<tr>
						<td>
							<div>
								@Html.ReqLabelFor(m => m.OrgRolesList, string.Format("{0} Role", Model.OrganizationName))
							</div>
						</td>
						<td>
							<div class="role-drop-down">
								@Model.OrgRolesList[Model.SelectedOrganizationRoleId]
							</div>
						</td>

					</tr>
					int count = 0;
					foreach (var item in Model.SubscriptionRoles)
					{
						<tr>
							<td>
								<div>
									@Html.HiddenFor(x => x.SubscriptionRoles[count].SubscriptionId)
									@Html.HiddenFor(x => x.SubscriptionRoles[count].SubscriptionName)
									@Html.ReqLabelFor(x => x.SubscriptionRoles[count].RoleList, string.Format("{0} Role", item.SubscriptionName))
								</div>
							</td>
							<td>
								<div class="role-drop-down">
									@item.RoleList[Model.SubscriptionRoles[count].SelectedRoleId]
								</div>
							</td>
						</tr>count++;
					}
				}
			</table>
		</div>
	</div>
	<div class="row">
		<div class="col-xs-12">
			<a href="@Url.Action(ActionConstants.OrganizationMembers, ControllerConstants.Account, new { @id = Model.OrganizationId })"
				class="btn btn-default pull-left" title="@Strings.Back"><i class="fa fa-caret-left"></i>&nbsp;@Strings.Back</a>
			@if (Model.CanEditMember)
			{
				<button type="submit" value="@Strings.Save" class="btn btn-default pull-right" id="saveMemeber">@Strings.Save</button>
			}
		</div>
	</div>
</div>