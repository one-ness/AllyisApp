@model SubscribeViewModel

@{
	ViewBag.Title = Strings.Subscribe;
	string saveTitle = Strings.Save;
	if (Model.IsChanging)
	{
		saveTitle = Strings.ChangeSubscription;
	}
}

<div class="ovrd-row row">
	<div class="ovrd-col-md-6 col-md-6 ovrd-col-md-push-3 col-md-push-3 col">
		<div class="ovrd-col-md-12 col-md-12 col text-center">
			<img src="~/@Model.SkuIconUrl" alt="@Model.ProductName" style="margin-right:5px;" />
			<h2 style="display:inline-block;">
				@Model.ProductName
			</h2>
		</div>
		<div class="ovrd-col-md-10 col-md-10 ovrd-col-md-push-1 col-md-push-1 col" style="margin-top:20px;">
			<div class="ovrd-col-md-12 col-md-12 col">
				@Model.SkuDescription
			</div>

			<div>
				@using (Html.BeginForm(ActionConstants.Subscribe, ControllerConstants.Account, null, FormMethod.Post, new { @class = "ovrd-col-md-12 col-md-12 col", @style = "margin-top:20px;display: inline-block" })) // , @onsubmit = String.Format("return confirm(\"{0}\")", Html.Raw(String.Format(Strings.WarningWhenUnsubscribing, Model.Name))) TODO: make this only fire on unsubscribe action.
				{
					@Html.HiddenFor(m => m.OrganizationId)
					@Html.HiddenFor(m => m.SkuId)
					@Html.ReqLabelFor(m => m.SubscriptionName, Strings.SubscriptionName)
					@Html.TextBoxFor(m => m.SubscriptionName, new { @class = "ovrd-form-control form-control margined" })
					@Html.AntiForgeryToken()
					<div class="pull-right" , style="margin-top:50px;">
						<a href="@Url.Action(ActionConstants.Skus, ControllerConstants.Account, new { id = Model.OrganizationId })" class="ovrd-btn btn ovrd-btn-default btn-default"> @Strings.Cancel </a>
						<input type="submit" value="@saveTitle" class="ovrd-btn btn ovrd-btn-primary btn-primary" id="save" />
					</div>

				}
			</div>
		</div>
	</div>
</div>
