@model SubscribeViewModel

@{
	ViewBag.Title = Strings.Subscribe;
	string saveTitle = Strings.Save;
	if (Model.IsChanging)
	{
		saveTitle = Strings.ChangeSubscription;
	}
}
<div class="container">
	<div class="row">
		<div class="col-md-6 col-md-push-3">
			<div class="col-md-12 text-center">
				<img src="~/@Model.ProductIconUrl" alt="@Model.ProductName" style="margin-right:5px;" />
				<h2 style="display:inline-block;">
					@Model.ProductName
				</h2>
			</div>
			<div class="col-md-10 col-md-push-1" style="margin-top:20px;">
				<div class="col-md-12">
					@Model.ProductDescription
				</div>

                <div>
                    @using (Html.BeginForm(ActionConstants.Subscribe, ControllerConstants.Account, null, FormMethod.Post, new { @class = "col-md-12", @style = "margin-top:20px;display: inline-block" })) // , @onsubmit = String.Format("return confirm(\"{0}\")", Html.Raw(String.Format(Strings.WarningWhenUnsubscribing, Model.Name))) TODO: make this only fire on unsubscribe action.
                    {
                        @Html.HiddenFor(m => m.OrganizationId)
                        @Html.HiddenFor(m => m.SkuId)
                        @Html.HiddenFor(m => m.ProductID, new { @Value = ViewBag.productId });
                        @Html.ReqLabelFor(m => m.SubscriptionName, Strings.SubscriptionName)
                        @Html.TextBoxFor(m => m.SubscriptionName, new { @class = "form-control margined" })
                        @Html.AntiForgeryToken()
                        <div class="pull-right" , style="margin-top:50px;">
                            <a href="@Url.Action(ActionConstants.Skus, ControllerConstants.Account, new { id = Model.OrganizationId})" class="btn btn-default"> @Strings.Cancel </a>
                            <input type="submit" value="@saveTitle" class="btn btn-primary btn-gray" id="save" />
                        </div>

                    }
                </div>
			</div>
		</div>
	</div>
</div>