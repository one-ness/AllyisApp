@model OrganizationMembersViewModel
@{
	var sb = new System.Text.StringBuilder();
	sb.AppendFormat("{0}: {1}", Strings.Members, Model.OrganizationName);
	ViewBag.TitleBar = sb.ToString();
}
<style>
	.no-match {
		display: none;
	}

	.filter-row{
		padding-top:5px;
	}
	.filter-row label{
		padding-top:5px;
	}
	/*
	.pageContainer {
		width: 20px;
		margin: 0 auto;
	}
		*/
</style>

<div class="container">
	
	@if (Model.CanAddUser)
	{
		@Html.Partial("_MembersAndInvitationsTab", Model.TabInfo)
	}
	<div class="row" style="padding-bottom:5px">
		
		<div class="col-xs-6 filter-row" style="display:flex">

			<label class="col-xs-4" >Name Filter:&nbsp;</label>
			<input class="col-xs-8 form-control fa-filter" type="search" placeholder="@Strings.UserSearchPlaceholder" id="userSearch" />

		</div>
		<div class="col-xs-5 filter-row" style="display:flex">
			<label class="col-xs-4">Role Filter: &nbsp; &nbsp;</label>
			<select id="RoleFilter" class="form-control col-xs-8">
				<option>@Strings.Any</option>
				@foreach (var role in Model.PossibleRoles.Values)
				{
					<option>@role</option>
				}
			</select>

		</div>
	</div>
	<div class="row">
		<table class="table table-striped table-condensed" id="loading" hidden>
			<thead>
				<tr>
					<th><input class="checkbox-inline members-checkbox" type="checkbox" id="checkAll" onclick="CheckAllToggle()" /></th>
					<th class="col-xs-3">
						Name

					</th>
					<th class="col-xs-3">Email</th>
					<th class="col-xs-2">Employee ID</th>
					<th class="col-xs-2">Joined Date</th>
					<th class="col-xs-1">
						Role
					</th>
					@if (Model.CanEditUser)
					{
						<th class="col-xs-1"><i class="fa fa-edit"> </i>&nbsp;Edit</th>
					}
					else
					{
						<th class="col-xs-1"><i class="fa fa-television"> </i>&nbsp;View</th>
					}
				</tr>

			</thead>
			@foreach (var item in Model.Users)
			{
				<tr class="userRow">
					@if (Model.CanEditUser && Model.CurrentUserId != item.UserId)
				{
						<td><input class="checkbox-inline members-checkbox" type="checkbox" value="@item.UserId" /></td>
				}
				else
				{
						<td><input style="display:none" class="checkbox-inline members-checkbox checkbox-hide" type="checkbox" value="@item.UserId" /></td>
				}
					<td class="name">@item.Username</td>
					<td>@item.Email</td>
					<td>@item.EmployeeId</td>
					<td>@item.FormattedJoinedDate</td>
					<td class="Role">@item.RoleName</td>
					@if (Model.CanEditUser)
				{
						<td><a href="@Url.Action(ActionConstants.EditMember, ControllerConstants.Account, new { @id = Model.OrganizationId, @userId = item.UserId })" title="@Strings.EditUser"><i class="fa fa-fw fa-edit"></i></a></td>
				}
				else
				{
						<td><a href="@Url.Action(ActionConstants.EditMember, ControllerConstants.Account, new { @id = Model.OrganizationId, @userId = item.UserId })" title="@Strings.EditUser"><i class="fa fa-fw fa-television"></i></a></td>
				}
				</tr>
			}
		</table>
	</div>
	<div class="row" style="padding-top:20px;">
		<div class="col-xs-12">
			<div class="pageContainer">
				@*This container is populated by javascript in allyis-account-permission2.js*@
			</div>
		</div>
	</div>
	<a href="@Url.Action(ActionConstants.Index, ControllerConstants.Account)"
	   class="btn btn-default pull-left" title="@Strings.Back"><i class="fa fa-caret-left"></i>&nbsp;@Strings.Back</a>

	@if (Model.CanDeleteUser)
	{
		using (Html.BeginForm(ActionConstants.RemoveMember, ControllerConstants.Account, new { @id = Model.OrganizationId }, FormMethod.Post, new { @onsubmit = "return getUserIdsAndSubmit();" }))
		{
			@Html.AntiForgeryToken();
			<input type="hidden" id="csvUserIds" name="csvUserIds" />
			<button type="submit" class="btn btn-danger pull-right" title="@Strings.Back">@Strings.Delete</button>
			<script type="text/javascript">
				function getUserIdsAndSubmit() {
					var csvIds = "";

					

					// gather all the ids to delete as a csv

					var checkboxes = $(".members-checkbox");

					checkboxes = checkboxes.slice(1);   //We don't want to include the select all checkbox
					checkboxes.each(function () {

						var value = $(this).val();
						var isChecked = $(this).is(":checked");

						if (isChecked && !$(this).hasClass("checkbox-hide")) {
							csvIds += value + ",";
						}
					});

					csvIds = csvIds.replace(/(^,)|(,$)/g, "");

					if (csvIds == "") {
						alert("You have not chosen a user to delete");
						return false;
					}
					if (!confirm("Do you wish to delete the selected user(s)?")) {
						return false;
					}
					$("#csvUserIds").val(csvIds);

					// submit the form

					return true; // for now, delete this line later
				}

				function CheckAllToggle() {
					var checkboxes = [];
					var checking = document.getElementById("checkAll").checked;
					checkboxes = document.getElementsByClassName("members-checkbox");
					var count = 0;
					for (var i = 0, n = checkboxes.length; i < n; i++) {
						if (!$(checkboxes[i]).parents('.userRow').hasClass('no-match')) {
							checkboxes[i].checked = checking;
							count++;
						}
					}
					console.log("check all toggle, updated " + count + " to: " + checking);
				}
			</script>
		}
	}
</div>
@section scripts {
	<script src="~/Scripts/allyis-pages-with-filter.js" type="text/javascript"></script>
	<script type="text/javascript">
		pwf.setPageLimit(@Model.PageSize);
		pwf.setRowClass("userRow");
		
		@if (Model.CanDeleteUser)
		{
			@:pwf.setCheckBoxSelector(".members-checkbox");
		}
		pwf.addFilter("#userSearch", "search", ".name");
		pwf.addFilter('#RoleFilter', 'dropDown', ".Role", "@Strings.Any");
	</script>
}