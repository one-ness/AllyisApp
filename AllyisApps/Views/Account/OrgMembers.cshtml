@model OrganizationMembersViewModel
@{
	var sb = new System.Text.StringBuilder();
	sb.AppendFormat("{0}: {1}", Strings.Members, Model.OrganizationName);
	ViewBag.TitleBar = sb.ToString();
}
<style>
	.no-match {
		display: none;
	}
	/*
	.pageContainer {
		width: 20px;
		margin: 0 auto;
	}
		*/
</style>

<div class="container">
	@if (Model.CanAddUser)
	{
		@Html.Partial("_MembersAndInvitationsTab", Model.TabInfo)
	}

	<table class="table table-striped table-condensed">
		<thead>
			<tr>
				<th><input class="checkbox-inline members-checkbox" type="checkbox" id="checkAll" onclick="CheckAllToggle()" /></th>
				<th class="col-xs-2">
					Name
					<input type="search" placeholder="@Strings.UserSearchPlaceholder" id="userSearch" class="form-control fa-filter" />
				</th>
				<th class="col-xs-2">Email</th>
				<th class="col-xs-2">Employee ID</th>
				<th class="col-xs-2">Joined Date</th>
				<th class="col-xs-2">
					Role
					<select id="RoleFilter" class="form-control">
						<option>@Strings.Any</option>
						@foreach (var role in Model.PossibleRoles.Values)
						{
							<option>@role</option>
						}
					</select>
				</th>


				@if (Model.CanEditUser)
				{
					<th class="col-xs-2"><i class="fa fa-edit"> </i>&nbsp;Edit</th>
				}
				else
				{
					<th class="col-xs-2"><i class="fa fa-television"> </i>&nbsp;View</th>
				}
			</tr>
					
		</thead>
		@foreach (var item in Model.Users)
		{
			<tr class="userRow">
				@if (Model.CanEditUser)
				{
					<td><input class="checkbox-inline members-checkbox" type="checkbox" value="@item.UserId" /></td>
				}
				else
				{
					<td></td>
				}
				<td class="name">@item.Username</td>
				<td>@item.Email</td>
				<td>@item.EmployeeId</td>
				<td>@item.FormattedJoinedDate</td>
				<td class="Role">@item.RoleName</td>
				@if (Model.CanEditUser)
				{
					<td><a href="@Url.Action(ActionConstants.EditMember, ControllerConstants.Account, new { @id = Model.OrganizationId, @userId = item.UserId })" title="@Strings.EditUser"><i class="fa fa-fw fa-edit"></i></a></td>
				}
				else
				{
					<td><a href="@Url.Action(ActionConstants.EditMember, ControllerConstants.Account, new { @id = Model.OrganizationId, @userId = item.UserId })" title="@Strings.EditUser"><i class="fa fa-fw fa-television"></i></a></td>
				}
			</tr>
		}
	</table>

	<div class="row" style="padding-top:20px;">
		<div class="col-xs-12">
			<div class="pageContainer">
				@*This container is populated by javascript in allyis-account-permission2.js*@
			</div>
		</div>
	</div>
	<a href="@Url.Action(ActionConstants.Index, ControllerConstants.Account)"
		class="btn btn-default pull-left" title="@Strings.Back"><i class="fa fa-caret-left"></i>&nbsp;@Strings.Back</a>
			
	@if (Model.CanDeleteUser)
	{
		using (Html.BeginForm(ActionConstants.RemoveMember, ControllerConstants.Account, new { @id = Model.OrganizationId }, FormMethod.Post, new { @onsubmit = "return getUserIdsAndSubmit();" }))
		{
			@Html.AntiForgeryToken();
			<input type="hidden" id="csvUserIds" name="csvUserIds" />
			<button type="submit" class="btn btn-danger pull-right" title="@Strings.Back">@Strings.Delete</button>
			<script type="text/javascript">
				function getUserIdsAndSubmit() {
					var csvIds = "";

					if (!confirm("Do you wish to delete the selected user(s)?")) {
						return false;
					}

					// gather all the ids to delete as a csv

					var checkboxes = $(".members-checkbox");

					checkboxes = checkboxes.slice(1);   //We don't want to include the select all checkbox
					checkboxes.each(function () {

						var value = $(this).val();
						var isChecked = $(this).is(":checked");

						if (isChecked) {
							csvIds += value + ",";
						}
					});

					csvIds = csvIds.replace(/(^,)|(,$)/g, "");

					if (csvIds == "") {
						alert("You have not chosen a user to delete");
						return false;
					}
					$("#csvUserIds").val(csvIds);

					// submit the form

					return true; // for now, delete this line later
				}

				function CheckAllToggle() {
					var checkboxes = [];
					var checking = document.getElementById("checkAll").checked;
					checkboxes = document.getElementsByClassName("members-checkbox");
					var count = 0;
					for (var i = 0, n = checkboxes.length; i < n; i++) {
						if (!$(checkboxes[i]).parents('.userRow').hasClass('no-match')) { 
							checkboxes[i].checked = checking;
							count++;
						}
					}
					console.log("check all toggle, updated " + count + " to: " + checking);
				}
			</script>
		}
	}
</div>
@section scripts {
	<script src="~/Scripts/allyis-pages-with-filter.js" type="text/javascript"></script>
	<script type="text/javascript">
		pwf.setPageLimit(@Model.PageSize);
		pwf.setRowClass("userRow");
		pwf.setCheckBoxSelector(".members-checkbox");
		pwf.addFilter("#userSearch", "search", ".name");
		pwf.addFilter('#RoleFilter', 'dropDown', ".Role", "@Strings.Any");
	</script>
}