@using AllyisApps.ViewModels.Auth;
@using AllyisApps.Services

@model AddMemberViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = Strings.AddMember;
}
@{ ViewData.Add(ControllerConstants.Controller, ControllerConstants.Account); }
@{ ViewData.Add(ActionConstants.Action, ActionConstants.Add); }

<div class="shrink-wrap-center">
    <div>
        @using (Html.BeginForm(ActionConstants.Add, ControllerConstants.Account, FormMethod.Post, new { id = "OrgAddForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.OrganizationId)
            @Html.ValidationSummary(true)
            <div class="row">
                <div class="col-md-6 sm-control-width">                       
                        <div class="form-group">
                            @Html.ReqLabelFor(model => model.Email, Strings.Email)
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.ReqLabelFor(model => model.EmployeeId, Strings.EmployeeId)
                            @Html.TextBoxFor(model => model.EmployeeId, new { @class = "form-control", @maxlength = "16", @placeholder = Model.EmployeeId })
                            @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.ReqLabelFor(model => model.FirstName, Strings.EmployeeType)
                            @Html.DropDownListFor(model => model.EmployeeType, new SelectList(new List<string> { Strings.Salaried, Strings.Hourly }), new { @class = "form-control" })
                        </div>
                    </div>
                <div class="col-md-6 sm-control-width">

                    <div class="form-group">
                        @Html.ReqLabelFor(model => model.FirstName, Strings.FirstName)
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.ReqLabelFor(model => model.LastName, Strings.LastName)
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>


                    <div class="form-group">
                        <div class="text-right">
                            <span style="margin-right: 5px;">@Strings.AddAsOwner</span>
                            @Html.CheckBoxFor(m => m.AddAsOwner, new { @style = "display: inline;" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                @if (Model.Subscriptions.Count() == 0)
        {
                    <div class="col-xs-12">
                        <div class="form-group allyis-action-buttons pull-right">
                            @Html.ActionLink(Strings.Cancel, ActionConstants.Manage, ControllerConstants.Account, null, new { @class = "btn btn-default" })
                            <input type="submit" id="addMember" value="@Strings.Add" class="btn btn-primary" />
                        </div>
                    </div>}
                @{var count = 0;
                    var roomInSubscription = true;
                }
                @foreach (AddMemberSubscriptionInfo sub in Model.Subscriptions)
        {
                    <div class="col-md-6 sm-control-width">
                        @Html.Hidden(string.Format("Subscriptions[{0}].SubscriptionId", count), sub.SubscriptionId)
                        <div class="form-group">
                            @if (sub.ProductName == ProductNameKeyConstants.TimeTracker)
                            {
                                <label>@(string.Format("{0} {1}", Strings.TimeTracker, Strings.Role))</label>
                            }
                            @{
                                var languageAdjustment = sub.ProductRoles;
                                foreach (var role in languageAdjustment)
                                {
                                    role.Name = Strings.ResourceManager.GetString(role.Name);
                                }
                            }
                            @Html.DropDownListDisabled(string.Format("Subscriptions[{0}].SelectedRole", count), new SelectList(sub.ProductRoles, "ProductRoleId", "Name", sub.SelectedRole), sub.hasTooManySubscribers, new { @class = "form-control role-selector" })
                            <span class="text-danger" id="roleRequiredMessage">@Strings.TimeTrackerRoleRequired</span>
                            @if (sub.hasTooManySubscribers)
                            {
                                <p>@Strings.TooManyUsers</p>roomInSubscription = false;
                            }
                        </div>
                    </div>if ((sub.ProductName == ProductNameKeyConstants.TimeTracker) && roomInSubscription) //TimeTracker with room
                                {
                                    <div class="col-md-6 sm-control-width">
                                        <div class="form-group">
                                            <label>@Strings.TrackProject</label>
                                            @{    //outputs list of available projects
                                                List<SelectListItem> selectProjects = new List<SelectListItem>();
                                                foreach (CompleteProjectInfo pInfo in Model.Projects)
                                                {
                                                    selectProjects.Add(new SelectListItem
                                                    {
                                                        Text = (pInfo.ProjectName),
                                                        Value = (pInfo.ProjectId.ToString()),
                                                        Selected = (Model.SubscriptionProjectId == pInfo.ProjectId)
                                                    });
                                                }

                                                @Html.DropDownList("SubscriptionProjectId", selectProjects, Strings.DropDownEmpty, new { @class = "form-control project-selector" });
                                                <span class="text-danger" id="projectRequiredMessage">@Strings.TimeTrackerProjectRequired</span>
                                            }
                                        </div>

                                        <div class="form-group allyis-action-buttons pull-right">
                                            @Html.ActionLink(Strings.Cancel, ActionConstants.Manage, ControllerConstants.Account, null, new { @class = "btn btn-default" })

                                            @if (roomInSubscription)
                                            {
                                                <input type="submit" id="addMember" value="@Strings.Add" class="btn btn-primary" />}
                                            else
                                            {
                                                <input type="submit" id="addMember" value="@Strings.Add" class="btn btn-primary" disabled="disabled" />}
                                        </div>

                                        <div class="clearfix"></div>
                                    </div>
                                                    }

                                                    count += 1;
                                                }
            </div>}
            <div class="row">
                <div class="col-md-6 sm-control-width">
                    @using (Html.BeginForm(ActionConstants.Import, ControllerConstants.Account, FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken();
                        <label>@Strings.Upload</label>
                        <input type="file" id="upload-box" name="upload" style="display:none;"
                                onchange="$('#upload-file-name-display').val($(this).val().replace('C:\\fakepath\\', ''));" />
                            <input id="upload-file-name-display" class="form-control"
                                    onchange="$('#upload-file-name-display').val($(this).val().replace('C:\\fakepath\\', ''));" />
                            <div style="margin-top: 10px; margin-bottom: 15px; float:left;">
                                <a class="btn btn-primary" onclick="$('input[id=upload-box]').click();">@Strings.ChooseFile</a>
                                <input style="margin-left: 10px" type="submit" id="upload-button" value="@Strings.Upload" class="btn btn-primary" />
                            </div>
                    }
                    @using (Html.BeginForm(ActionConstants.Template, ControllerConstants.Account, null, FormMethod.Get))
                    {
                        <div style="float:right; margin-top: 10px;">
                            <input type="submit" id="template-button" value="@Strings.Template" class="btn btn-primary" />
                        </div>
                    }
                </div>
            </div>
      </div>
</div>
        
@section Scripts {
      @Scripts.Render("~/bundles/AccountAdd");
}
