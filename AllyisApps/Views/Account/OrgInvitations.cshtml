@using System.Text
@model OrganizationInvitationsViewModel
@{
	var sb = new StringBuilder();
	sb.AppendFormat("{0}: {1}", Strings.Invitations, Model.OrganizationName);
	ViewBag.TitleBar = sb.ToString();
}

@if (Model.Invitations.Count <= 0)
{
	<div class="container">
		@Html.Partial("_MembersAndInvitationsTab", Model.TabInfo)
		<div class="row">
			<div class="col-xs-12" style="margin-bottom: 20px;">
				<p><i>You have not sent any invitations. Click on Add Members to invite users to your organization</i></p>
			</div>
			<div class="col-xs-12">
				<a href="@Url.Action(ActionConstants.Index, ControllerConstants.Account)"
					class="btn btn-default pull-left" title="@Strings.Back"><i class="fa fa-caret-left"></i>&nbsp;@Strings.Back</a>
			</div>
		</div>
	</div>
}
else
{
	<div class="container">
		@Html.Partial("_MembersAndInvitationsTab", Model.TabInfo)
		<table class="table table-striped table-condensed" id="loading">
			<thead>
			<tr>
				<th><input class="checkbox-inline invitations-checkbox" type="checkbox" id="checkAll" onclick="CheckAllToggle()"/></th>
				<th class="col-xs-2">Name<input type="search" placeholder="@Strings.UserSearchPlaceholder" id="userSearch" class="form-control fa-filter" /></th>
				<th class="col-xs-2">Email</th>
				<th class="col-xs-1">Employee ID</th>
				<th class="col-xs-1">Invite Date</th>
				<th class="col-xs-2">Organizaion Role
					<select id="RoleFilter" class="form-control">
						<option>@Strings.Any</option>
						@foreach (var role in Model.PossibleRoles.Values)
						{
							<option>@role</option>
						}
					</select>
				</th>
				<th class="col-xs-2">Role(s)
							
				</th>
				<th class="col-xs-2">Status</th>
			</tr>
					
			</thead>
			@foreach (var item in Model.Invitations)
			{
				<tr class="userRow">
					<td><input class="checkbox-inline invitations-checkbox" name="checkbox" id="checkbox" type="checkbox" value="@item.InvitationId"/></td>
					<td class="name">@item.Username</td>
					<td>@item.Email</td>
					<td>@item.EmployeeId</td>
					<td>@item.FormattedInvitedOnDate</td>
					<td class="Role">@item.OrgRoleName</td>
					<td>
						@foreach (var role in item.ProductAndRoleNames)
						{
							<div><strong>@role.Item1:</strong> @role.Item2</div>
						}
					</td>
					<td>@item.Status</td>
				</tr>
			}
		</table>
		<div class="row" style="padding-top:15px;">
			<div class="col-xs-12">
				<div class="pageContainer">
					@*This container is populated by javascript in allyis-account-permission2.js*@
				</div>
			</div>
		</div>
		<a href="@Url.Action(ActionConstants.Index, ControllerConstants.Account)"
			class="btn btn-default pull-left" title="@Strings.Back"><i class="fa fa-caret-left"></i>&nbsp;@Strings.Back</a>
		@if (Model.CanResendInvitations)
		{
			using (Html.BeginForm(ActionConstants.ResendInvite, ControllerConstants.Account, new { resendIds = Model.CheckedInvitations, orgId = Model.OrganizationId }, FormMethod.Get))
			{
				@Html.Hidden("checkedResendIds", Model.CheckedInvitations)
				@Html.Hidden("orgId", Model.OrganizationId)
				@Html.AntiForgeryToken();
				<input type="hidden" id="csvResendInvitationIds" />
				<button type="submit" class="btn btn-default pull-left" title="@Strings.ResendInvite" style="margin-left: 10px;" onclick="getInvitationIdsAndResend()">@Strings.ResendInvite</button>

			}
		}
		@if (Model.CanDeleteInvitations)
		{
			using (Html.BeginForm(ActionConstants.RemoveInvitation, ControllerConstants.Account, new { checkedIds = Model.CheckedInvitations, orgId = Model.OrganizationId }, FormMethod.Post))
			{
				@Html.Hidden("checkedIds", Model.CheckedInvitations)
				@Html.Hidden("orgId", Model.OrganizationId)
				@Html.AntiForgeryToken();
				<input type="hidden" id="csvDeleteInvitationIds" />
				<button type="submit" class="btn btn-danger pull-right" title="@Strings.Back" onclick="return getInvitationIdsAndSubmit()">@Strings.Delete</button>
			}
		}
	</div>
}
@section scripts
{
<script type="text/javascript">
	function CheckAllToggle()
	{
		var checking = document.getElementById("checkAll").checked;
		var checkboxes = document.getElementsByName("checkbox");
		for (var i = 0, n = checkboxes.length; i < n; i++) {
			if (!$(checkboxes[i]).parents('.userRow').hasClass('no-match')) {
				checkboxes[i].checked = checking;
			}
		}
	}

	function getInvitationIdsAndResend() {
		var ids = [];
		var checkboxes = document.getElementsByName("checkbox");
		var k = 0;
		for (var i = 0, n = checkboxes.length; i < n; i++) {
			if (checkboxes[i].checked && !$(checkboxes[i]).hasClass('no-match'))
			{
				ids[k] = checkboxes[i].value;
				k++;
			}
		}
		if (ids.length === 0) {
			alert("You have not chosen an invitation to delete");
			return false;
		}
		else {
			document.getElementById('checkedResendIds').value = ids;
			document.getElementById('orgId').value =  @Model.OrganizationId;
		}
		return true;
	}

	function getInvitationIdsAndSubmit() {
		if (!confirm("Delete invitation for user(s)?"))
		{
			return false;
		}

		var ids = [];
		var checkboxes = document.getElementsByName("checkbox");
		var k = 0;
		for (var i = 0, n = checkboxes.length; i < n; i++) {
			if (checkboxes[i].checked) {
				ids[k] = checkboxes[i].value;
				k++;
			}
		}
		if (ids.length === 0) {
			alert("You have not chosen an invitation to delete");
			return false;
		}
		else {
			document.getElementById('checkedIds').value = ids;
			document.getElementById('orgId').value =  @Model.OrganizationId;
		}
		return true;
	}
</script>

<script src="~/Scripts/allyis-pages-with-filter.js" type="text/javascript"></script>
<script type="text/javascript">
		@*Filters can only be set up after the above script is loaded*@
		pwf.setPageLimit(10);
		pwf.setRowClass("userRow");
		pwf.setCheckBoxSelector("#checkbox");
		pwf.addFilter("#userSearch", "search", ".name");
		pwf.addFilter('#RoleFilter', 'dropDown', ".Role", "@Strings.Any");
</script>
}
