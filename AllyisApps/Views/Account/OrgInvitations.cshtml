@using System.Text
@model OrganizationInvitationsViewModel
@{
	var sb = new StringBuilder();
	sb.AppendFormat("{0}: {1}", Strings.Invitations, Model.OrganizationName);
	ViewBag.TitleBar = sb.ToString();
}

@if (Model.Invitations.Count <= 0)
{
	<div class="container">
		<div class="row">
			<div class="col-xs-12">
				@Html.Partial("_MembersAndInvitationsTab", Model.TabInfo)
				<div class="row">
					<div class="col-xs-12" style="margin-bottom: 20px;">
						<p><i>You have not sent any invitations. Click on Add Members to invite users to your organization</i></p>
					</div>
					<div class="col-xs-12">
						<a href="@Url.Action(ActionConstants.Index, ControllerConstants.Account)"
						   class="btn btn-default pull-left" title="@Strings.Back"><i class="fa fa-caret-left"></i>&nbsp;@Strings.Back</a>
					</div>
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div class="container">
		<div class="row">
			<div class="col-xs-12">
				@Html.Partial("_MembersAndInvitationsTab", Model.TabInfo)
				<table class="table table-striped table-condensed">
					<thead>
					<tr>
						<th><input class="checkbox-inline invitations-checkbox" type="checkbox" id="checkAll" onclick="CheckAllToggle()"/></th>
						<th>Name</th>
						<th>Email</th>
						<th>Employee ID</th>
						<th>Invite Date</th>
						<th>Role(s)</th>
						<th>Status</th>
					</tr>
					</thead>
					@foreach (var item in Model.Invitations)
					{
						<tr>
							<td><input class="checkbox-inline invitations-checkbox" name="checkbox" id="checkbox" type="checkbox" value="@item.InvitationId"/></td>
							<td>@item.Username</td>
							<td>@item.Email</td>
							<td>@item.EmployeeId</td>
							<td>@item.FormattedInvitedOnDate</td>
							<td>
								@foreach (var role in item.ProductAndRoleNames)
								{
									<div><strong>@role.Item1:</strong> @role.Item2</div>
								}
							</td>
							<td>@item.Status</td>
						</tr>
					}
				</table>
			</div>
		</div>
		<div class="row">
			<div class="col-xs-12">
				<a href="@Url.Action(ActionConstants.Index, ControllerConstants.Account)"
					class="btn btn-default pull-left" title="@Strings.Back"><i class="fa fa-caret-left"></i>&nbsp;@Strings.Back</a>
				@if (Model.CanResendInvitations)
				{
					using (Html.BeginForm(ActionConstants.ResendInvite, ControllerConstants.Account, new { resendIds = Model.CheckedInvitations, orgId = Model.OrganizationId }, FormMethod.Get))
					{
						@Html.Hidden("checkedResendIds", Model.CheckedInvitations)
						@Html.Hidden("orgId", Model.OrganizationId)
						@Html.AntiForgeryToken();
						<input type="hidden" id="csvResendInvitationIds" />
						<button type="submit" class="btn btn-default pull-left" title="@Strings.ResendInvite" style="margin-left: 10px;" onclick="getInvitationIdsAndResend()">@Strings.ResendInvite</button>

					}
				}
				@if (Model.CanDeleteInvitations)
				{
					using (Html.BeginForm(ActionConstants.RemoveInvitation, ControllerConstants.Account, new { checkedIds = Model.CheckedInvitations, orgId = Model.OrganizationId }, FormMethod.Post))
					{
						@Html.Hidden("checkedIds", Model.CheckedInvitations)
						@Html.Hidden("orgId", Model.OrganizationId)
						@Html.AntiForgeryToken();
						<input type="hidden" id="csvDeleteInvitationIds" />
						<button type="submit" class="btn btn-danger pull-right" title="@Strings.Back" onclick="return getInvitationIdsAndSubmit()">@Strings.Delete</button>
					}
				}
			</div>
		</div>
	</div>
}

<script type="text/javascript">
	function CheckAllToggle()
	{
		var checking = document.getElementById("checkAll").checked;
		var checkboxes = document.getElementsByName("checkbox");
		for (var i = 0, n = checkboxes.length; i < n; i++) {
			checkboxes[i].checked = checking;
		}
	}

	function getInvitationIdsAndResend() {
		var ids = [];
		var checkboxes = document.getElementsByName("checkbox");
		var k = 0;
		for (var i = 0, n = checkboxes.length; i < n; i++) {
			if (checkboxes[i].checked) {
				ids[k] = checkboxes[i].value;
				k++;
			}
		}
		if (ids.length === 0) {
			alert("You have not chosen an invitation to delete");
			return false;
		}
		else {
			document.getElementById('checkedResendIds').value = ids;
			document.getElementById('orgId').value =  @Model.OrganizationId;
		}
		return true;
	}

	function getInvitationIdsAndSubmit() {
		if (!confirm("Delete invitation for user(s)?"))
		{
			return false;
		}

		var ids = [];
		var checkboxes = document.getElementsByName("checkbox");
		var k = 0;
		for (var i = 0, n = checkboxes.length; i < n; i++) {
			if (checkboxes[i].checked) {
				ids[k] = checkboxes[i].value;
				k++;
			}
		}
		if (ids.length === 0) {
			alert("You have not chosen an invitation to delete");
			return false;
		}
		else {
			document.getElementById('checkedIds').value = ids;
			document.getElementById('orgId').value =  @Model.OrganizationId;
		}
		return true;
	}
</script>
