@model AllyisApps.ViewModels.TimeTracker.Project.EditProjectViewModel

@{
	AjaxOptions ao = new AjaxOptions
	{
		UpdateTargetId = "OrgEditWrap"
	};
	Layout = "~/Views/Shared/_LayoutModal.cshtml";
	string action = ViewBag.Action;
}

<div class="shrink-wrap-center">
	<div>
		@using (Html.BeginForm(action, ControllerConstants.Project, FormMethod.Post, new { @class = "", id = "ProjectForm", role = "form", name = "EditForm", onsubmit = "return selectAll()" }))
		{
			<div>
				@Html.AntiForgeryToken()
				@Html.ValidationSummary(true)
				<div class="form-group">
					@Html.ReqLabelFor(m => m.ProjectName, @Strings.Name)
					@Html.TextBoxFor(m => m.ProjectName, new { @class = "form-control" })
					@Html.ValidationMessageFor(x => x.ProjectName, "", new { @class = "text-danger" })
				</div>
				<div class="form-group">
					@Html.ReqLabelFor(m => m.ProjectOrgId, Strings.ProjectOrgId)
					@Html.TextBoxFor(m => m.ProjectOrgId, new { @class = "form-control", @maxlength = "16", @placeholder = Model.ProjectOrgId })
					@Html.ValidationMessageFor(x => x.ProjectOrgId, "", new { @class = "text-danger" })
				</div>
				@if (Model.SelectedProjectUserIds.Count() > 0)
				{
					var _projectUsers = Model.ProjectUsers.ToList();
					var _subscriptionUsers = Model.SubscriptionUsers.ToList();
					foreach (var id in Model.SelectedProjectUserIds)
					{
						var choice = Model.SubscriptionUsers.Where(m => m.UserId == id).FirstOrDefault();
						_projectUsers.Add(choice);
						_subscriptionUsers.Remove(choice);
					}
					Model.ProjectUsers = _projectUsers;
					Model.SubscriptionUsers = _subscriptionUsers;
				}
				<div id="swapper-ui" class="swapper-ui">
					<div class="left">
						<label>@Strings.OffProj</label>
						@*<input type="text" placeholder=@AllyisApps.Resources.TimeTracker.Views.Project.Strings.SearchPlaceholder class="form-control" />*@
						@*
							Create a multi-select list that is populated from SubscriptionUsers
							Uses Javascript and the add/remove buttons to add and remove items from this listbox
						*@
						@Html.ListBoxFor(m => m.SubscriptionUsers, new MultiSelectList(Model.SubscriptionUsers, "UserId", "Name"), new { @name = "Excluded", @id = "excluded-users", @class = "filter-list", @Multiple = "multiple" })
					</div>
					<div class="actions">
						<a href="javascript: moveSelectedProjectEditModal('in')" class="ovrd-btn btn ovrd-btn-default btn-default move-in">
							<i class="ovrd-fa fa ovrd-fa-lg fa-lg ovrd-fa-arrow-right fa-arrow-right"></i>
						</a>
						<a href="javascript: moveSelectedProjectEditModal('out')" class="ovrd-btn btn ovrd-btn-default btn-default move-out">
							<i class="ovrd-fa fa ovrd-fa-lg fa-lg ovrd-fa-arrow-left fa-arrow-left"></i>
						</a>
					</div>
					<div class="right">
						<label>@Strings.OnProj</label>
						@*<input type="text" placeholder="@AllyisApps.Resources.TimeTracker.Views.Project.Strings.SearchPlaceholder" class="form-control" />*@
						@*
							Create a multi-select list that is populated from ProjectUsers and binds all selected items to SelectedProjectUserIds
							On Submit, all items in this list become selected, so the whole list is bound to the model
							Items are added and removed from this list via Javascript and the add / remove buttons
						*@
						@Html.ListBoxFor(m => m.SelectedProjectUserIds, new MultiSelectList(Model.ProjectUsers, "UserId", "Name"), new { @name = "Included", @id = "included-users", @class = "filter-list", @Multiple = "multiple" })
					</div>
				</div>
				<div class="form-group ovrd-row row" style="margin-bottom: 0px; margin-top: 15px;">
					<div class="form-group projectDate">
						<label>@Strings.StartDate</label>
						@Html.HiddenFor(m => m.StartDate)
						<input type="text" class="form-control" style="width: 90%; display: inline-block;" id="datePickerStart" />
						<span class="ovrd-fa fa ovrd-fa-fw fa-fw ovrd-fa-calendar fa-calendar" id="datePickerStartButton"></span>
					</div>
					<div class="form-group projectDate" style="float: right">
						<label>@Strings.EndDate</label>
						@Html.HiddenFor(m => m.EndDate)
						<input type="text" class="form-control" style="width: 90%; display: inline-block;" id="datePickerEnd" />
						<span class="ovrd-fa fa ovrd-fa-fw fa-fw ovrd-fa-calendar fa-calendar" id="datePickerEndButton"></span>
					</div>
				</div>
				@Html.HiddenFor(m => m.ParentCustomerId)
				@Html.HiddenFor(m => m.ProjectId)
				@Html.HiddenFor(m => m.IsCreating)
				@Html.HiddenFor(m => m.OrganizationId)
				@Html.HiddenFor(m => m.SubscriptionId)
			</div>

			<div class="text-right" style="padding-top: 15px; padding-bottom: 15px;">
				<input type="button" class="ovrd-btn btn ovrd-btn-default btn-default" value=@Strings.Cancel onclick="location='@Url.Action(ActionConstants.Index, ControllerConstants.Customer, new { subscriptionId = Model.SubscriptionId })'" />
				<input type="submit" value=@Strings.Save class="ovrd-btn btn ovrd-btn-primary btn-primary" id="submitProject" />
			</div>
		}

		<br />
		@if ((string)ViewData[ActionConstants.Action] == ActionConstants.Create)
		{
			<div class="ovrd-row row">
				<div class="ovrd-col-md-6 col-md-6 col sm-control-width">
					<label>@Strings.Upload</label>
					@using (Html.BeginForm(ActionConstants.Import, ControllerConstants.Customer, new { subscriptionId = Model.SubscriptionId }, FormMethod.Post, new { enctype = "multipart/form-data" }))
					{
						@Html.AntiForgeryToken();
						<div>
							<input type="file" id="upload-box" name="upload" style="display:none;"
								   onchange="$('#upload-file-name-display').val($(this).val().replace('C:\\fakepath\\', ''));" />
							<input id="upload-file-name-display" class="form-control"
								   onchange="$('#upload-file-name-display').val($(this).val().replace('C:\\fakepath\\', ''));" />
						</div>

						<div style="margin-top: 10px; margin-bottom: 15px; float:right;">
							<a class="btn btn-primary" onclick="$('input[id=upload-box]').click();" title="Choose project entries Excel file to upload">@Strings.ChooseFile</a>
							<input style="margin-left: 10px" type="submit" id="upload-button" value="@Strings.Upload" class="ovrd-btn btn ovrd-btn-primary btn-primary" title="Upload project entries from Excel" />
						</div>
					}
					@using (Html.BeginForm(ActionConstants.Template, ControllerConstants.Customer, null, FormMethod.Get, new { style = "display: flex; justify-content: space-between;", id = "template-form" }))
					{
						<div style="margin-top: 10px; margin-bottom: 15px; float:left">
							<input type="submit" form="template-form" id="template-button" value="@Strings.Template" class="ovrd-btn btn ovrd-btn-primary btn-primary" title="Download Excel template for project entries" />
						</div>
					}
				</div>
			</div>
		}
	</div><!-- /.modal-content -->
</div><!-- /.modal-dialog -->