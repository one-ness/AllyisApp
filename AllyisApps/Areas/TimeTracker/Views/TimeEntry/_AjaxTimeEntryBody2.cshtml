@using AllyisApps.ViewModels.TimeTracker.TimeEntry;
@using AllyisApps.Areas.TimeTracker.Core
@using AllyisApps.Extensions.ViewExtensions
@model EditTimeEntryViewModel

@{
	//string createUrl = Url.Action(ActionConstants.CreateTimeEntryJson);
	//string editUrl = Url.Action(ActionConstants.EditTimeEntryJson);
	//string submitFunction = "ProjectId.value=ProjectIdDdl.value;PayClassId.value=PayClassNameDdl.value;return ajaxEditOrCreate(this, \"" + createUrl + "\", \"" + editUrl + "\")";
	string extrastyle = Model.ProjectId < 0 ? "create" : "compounded";
	string hiddensample = Model.Hidden ? "hidden-sample" : string.Empty;
}

<div class="inline-form-anim-wrap @(hiddensample)">
	@using (Html.BeginForm(ActionConstants.TimeEntryCURD, ControllerConstants.TimeEntry, FormMethod.Get, new { @class = string.Format("very-inline-form TimeEntryForm edit {0}", extrastyle) }))
	{
		@Html.Hidden("CanManage", (bool)ViewBag.CanManage)
		@Html.HiddenFor(m => m.IsCreated).RemoveIdAttribute()
		@Html.HiddenFor(m => m.Sample).RemoveIdAttribute()
		@Html.HiddenFor(m => m.IsEdited).RemoveIdAttribute()
		@Html.HiddenFor(m => m.IsDeleted).RemoveIdAttribute()
		@Html.HiddenFor(m => m.TimeEntryId).RemoveIdAttribute()
		@Html.HiddenFor(m => m.UserId).RemoveIdAttribute()
		@Html.HiddenFor(m => m.Date).RemoveIdAttribute()
		@Html.HiddenFor(m => m.StartingDate).RemoveIdAttribute()
		@Html.HiddenFor(m => m.EndingDate).RemoveIdAttribute()
		@Html.HiddenFor(m => m.SubscriptionId).RemoveIdAttribute()
		<!--Duration box-->
		<div class="group left" style="width: 70px;" name="entry-@Model.ProjectId">
			@Html.TextBoxDisabledFor(m => Model.Duration, !Model.IsEditable, new { @class = "form-control", @onchange = "changeOccur(this)", @onkeypress = "keyDown(event, this)", @size = 5, @maxlength = 5, @placeholder = "HH:MM", @id = "entry-" + Model.ProjectId }).RemoveIdAttribute()
		</div>
		<!--Project Selector-->
		<div class="group left" style="width: 250px;">
			@*Ddl name must be different than model property name or the selected value cannot be adjusted*@
			@Html.DropDownListDisabled(
				"ProjectIdDdl",
				Model.ProjectsWithInactive,
				!Model.IsEditable,
				new
				{
					@class = "form-control",
					style = "width: 100%",
					onchange = "changeOccur(this)"
				}).RemoveIdAttribute()
			<input type="hidden" name="ProjectId" value="" />   @*Needed for proper model binding, value changes on submit (see form above)*@
		</div>
		<!--PayClass Selector-->
		<div class="group left" style="width: 150px;">
			@Html.DropDownListDisabled(
				"PayClassNameDdl",
				Model.PayClasses,
				!Model.IsEditable,
				new
				{
					@class = "form-control",
					style = "width: 100%",
					onchange = "changeOccur(this)"
				}).RemoveIdAttribute()

			<input type="hidden" name="PayClassId" value="" />   @*Needed for proper model binding, value changes on submit (see form above)*@
		</div>
		<!--Description-->
		<div class="group left">
			@(
				//? Html.TextBox("BeforeLockDateDesc", "Description", new {@class = "ovrd-form-control form-control", @style = "width: 100%", @onkeypress = "changeOccur(this)", @onchange = "changeOccur(this)", @placeholder = Strings.Description }).RemoveIdAttribute()
				 Html.TextBoxDisabledFor(m => Model.Description, !Model.IsEditable, new {@class = "ovrd-form-control form-control stretch", @onkeypress = "changeOccur(this)", @onchange = "changeOccur(this)", @placeholder = Strings.Description}).RemoveIdAttribute())
		</div>
		<div class="button-anim-wrap btn-group group right">
			<div>
				@if (Model.IsCreatable)
				{
					<button
						type="button"
						value="Save"
						class="btn btn-fa btn-primary btn-sharp"
						title="@Strings.Add"
						onclick='@("addRow(this)")'>
						@*Formerally "Submit"; changed to match value and because "Save" was in resources already*@
						<i class="allyisicon-submit"></i>
					</button>
				}
				else
				{
					<button type="button" value="Save" class="btn btn-fa btn-secondary btn-sharp" style="cursor:not-allowed">
						<i class="glyphicon glyphicon-lock"></i>
					</button>
				}

				@if (Model.IsDeletable)
				{
					<a class="btn btn-danger btn-fa hidden-create btn-sharp"
						href="javascript:void(0)"
						onclick="nonajaxDelete(this)">
						<i class="allyisicon-delete"></i>
					</a>
				}
				else
				{
					<button type="button" value="Save" class="btn btn-fa btn-secondary btn-sharp" style="cursor:not-allowed">
						<i class="glyphicon glyphicon-lock"></i>
					</button>
				}
			</div>
		</div>
	}
</div>