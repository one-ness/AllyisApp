@using AllyisApps.ViewModels.TimeTracker.TimeEntry;
@using AllyisApps.Core;
@using AllyisApps.Services;
@using AllyisApps.Services.TimeTracker;
@model SettingsViewModel
@{
	ViewBag.Title = Strings.Holidays;
	DisplayHints.BreadcrumbNavPartialLocation = "~/Areas/TimeTracker/Views/Shared/_BreadcrumbNavPartial.cshtml";
	DisplayHints.LayoutThemeBundle = "~/Content/Timetracker";
	Layout = "~/Areas/TimeTracker/Views/Shared/_TimeTrackerSidebar.cshtml";
	ViewData["UserId"] = Model.UserId;
	ViewData["SubscriptionId"] = Model.SubscriptionId;
	ViewData["SubscriptionName"] = Model.SubscriptionName;
}

@section css {
	<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />
}

<div class="slim">
	<div class="row">
		<div class="col-sm-2">
			@Html.Partial("_ManageSettingSideBar")
		</div>
		<div class="col-sm-10">
			<div class="panel panel-info">
				<div class="panel-heading">
					<h1 class="panel-title">@Strings.Holidays</h1>
				</div>
				<div id="Holidays">
					<ul class="nav nav-tabs" style="border-bottom:none;">
						@foreach (var year in Model.Holidays.Select(m => m.Date.Year).Distinct())
						{
							<li id=@year><a onclick="populateHolidayForSelectedYear(@year)">@year</a></li>
						}
					</ul>

					<table class="table table-condensed">
						<thead>
							<tr>
								<th>@Strings.Holiday</th>
								<th>@Strings.Date</th>
								<th><span class="pull-right">@Strings.Delete</span></th>
							</tr>
						</thead>
						@foreach (SettingsViewModel.HolidayViewModel Holiday in Model.Holidays)
						{
							<tr class="@Holiday.Date.Year">
								@{
									string _holidayName = Strings.ResourceManager.GetString(((Holiday.HolidayName).Replace(" ", string.Empty)).Replace("'", string.Empty)) ?? Holiday.HolidayName;
								}
								<td>@_holidayName</td>
								<td>@Holiday.Date.ToShortDateString()</td>
								<td>
									<a href="javascript: void(0);" class="text-muted" title="@Strings.DeleteHoliday" onclick='deleteHoliday("@Holiday.HolidayId", "\"@_holidayName\"")'>
										<span class="fa fa-fw fa-remove text-danger pull-right"></span>
									</a>
								</td>
							</tr>
									}
						<tr>
							@using (Html.BeginForm(ActionConstants.CreateHoliday, ControllerConstants.TimeEntry, new { subscriptionId = Model.SubscriptionId, id = Model.UserId }, FormMethod.Post))
							{
								@Html.AntiForgeryToken();
								@Html.HiddenFor(m => m.SubscriptionId)
								<td><input type="text" class="form-control" name="NewHolidayName" required /></td>
								<td>
									<input type="hidden" id="DateRangeStart" name="NewHolidayDate" value="" />
									<input onchange="$('#DateRangeStart').val($(this).val());" type="text" class="form-control" style="width: 50%; display: inline-block;" id="datePickerHoliday" />@*Needs to be <input /> tag, not Html.EditorFor or a NULL holiday will show up as -1*@
									<span class="fa fa-fw fa-calendar" id="datePickerHolidayButton"></span>
								</td>
								<td><input class="pull-right btn btn-primary" type="submit" value=@Strings.Add /></td>
							}
						</tr>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

@section scripts{
@Scripts.Render("~/bundles/jqueryui");
@Scripts.Render("~/bundles/moment")
<script src="~/Scripts/allyis-holidayDatepicker.js"></script>



	<script type="text/javascript">
		var model_holiday = "";
		
		deletePayClassWarning = "@Html.Raw(Strings.ConfirmDeletePayClass)";
		deleteHolidayWarning = "@Html.Raw(Strings.ConfirmDeleteHoliday)";

		mergePayClassUrl = "@Url.Action(ActionConstants.MergePayClass , ControllerConstants.TimeEntry, new { subscriptionId = ViewData["SubscriptionId"], userId = -1 })";
		deletePayClassUrl = "@Url.Action(ActionConstants.DeletePayClass, ControllerConstants.TimeEntry, new { subscriptionId = ViewData["SubscriptionId"], userId = -1 })";
		deleteHolidayUrl = "@Url.Action(ActionConstants.DeleteHoliday , ControllerConstants.TimeEntry, new { subscriptionId = Model.SubscriptionId, id = Model.UserId, HolidayId = -1 })";

		function populateHolidayForSelectedYear(year)
		{
			@foreach (var yearC in Model.Holidays.Select(m => m.Date.Year).Distinct())
			{
				<text>
					if (@yearC != year) {
						$('.' + @yearC).hide();
						$('#' + @yearC).css("font-weight", "Normal");
					}
					else {
						$('.' + @yearC).show();
						$('#' + @yearC).css("font-weight", "Bold");
					}
				</text>
			}
		};

		$('document').ready(function () {
			populateHolidayForSelectedYear(@DateTime.Now.Year);
			var momentValue = moment().format('L');
			$('#datePickerHoliday').datepicker('setDate', momentValue);
			$('#DateRangeStart').val(momentValue);
		});
	</script>
@Scripts.Render("~/bundles/TTTimeEntrySettings")

}