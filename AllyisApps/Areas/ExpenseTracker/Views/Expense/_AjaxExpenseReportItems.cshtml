@using AllyisApps.Areas.ExpenseTracker.ViewModels.Expense
@using AllyisApps.DBModel.Finance
@using AllyisApps.Services
@using AllyisApps.ViewModels.ExpenseTracker.Expense

@model IEnumerable<ExpenseItem>

@for (int i = 0; i < Model.Count(); i++)
{
	var item = Model.ToList()[i];
	if (String.IsNullOrEmpty(item.ItemDescription)) // sets default value to checked if item is new
	{
		item.IsBillableToCustomer = false;
	}
	string dateVal = "";
	string amountVal = "";
	if (Convert.ToDateTime(item.TransactionDate).ToShortDateString() != "1/1/0001")
	{
		dateVal = Convert.ToDateTime(item.TransactionDate).ToShortDateString();
	}
	if (item.Amount != 0)
	{
		amountVal = item.Amount.ToString();
	}
	string itemIdName = String.Format("[{0}].ExpenseItemId", item.Index);
	string accountName = String.Format("[{0}].AccountId", item.Index);
	var accountList = (List<AccountDBEntity>)ViewBag.AccountList;
	var selected = accountList.ToArray().Where(a => a.AccountId == item.AccountId).First();
	var selectList = new SelectList(accountList, "AccountId", "AccountName", selected.AccountId);

	<div id="@String.Format("item-input_{0}", item.Index)" class="item-div" style="margin: 10px; margin-bottom: 0px;">
		<input type="hidden" name="@itemIdName" value="@item.ExpenseItemId" />
		@Html.TextBoxFor(m => m.ToList()[i].TransactionDate, new { @class = "datepicker form-control item-control", Value = dateVal, placeholder = "Date", style = "display: inline-block; width: 150px" })
		<div class="amount-div form-control item-control" style="display: inline-block; width: 150px;">$
			@Html.TextBoxFor(m => m.ToList()[i].Amount, new { @class = "amount-textbox", Value = amountVal, placeholder = "Amount", style = "display: inline-block; width: 100px; border: 0px; margin-top: -1px;" })
		</div>
		@Html.TextBoxFor(m => m.ToList()[i].ItemDescription, new { @class = "form-control item-control", Value = item.ItemDescription, placeholder = "Description", style = "display: inline-block; width: 300px" })
		<label>Account</label>
		@Html.DropDownListFor(m => m.ToList()[i].AccountId, selectList, new { @class = "form-control item-control", name = accountName, style = "display: inline-block; width: 150px", Value = item.AccountId })
		<label>Billable to Customer</label>
		@Html.CheckBoxFor(m => m.ToList()[i].IsBillableToCustomer, new { @class = "form-control item-control check-off", style = "width: 14px; height: 14px; display: inline-block; margin: 10px; vertical-align: middle;" })
		<a class="btn btn-danger btn-fa hidden-create"
			onclick="removeItem(@i)"
			style="float: right; width: 34px; color: white !important; border-color: #d43f3a !important; border-radius: 0px; margin-right: 0px;"
			area-label="Close">
			<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
		</a>
		<br />
		@Html.ValidationMessageFor(m => m.ToList()[i].TransactionDate)
		@Html.ValidationMessageFor(m => m.ToList()[i].Amount)
	</div>
	<script>
		@{
			IList<ExpenseItem> subtractedModel = new List<ExpenseItem>();
			foreach (ExpenseItem expenseItem in Model)
			{
				subtractedModel.Add(expenseItem);
			}
			subtractedModel.RemoveAt(i);
		}
		function removeItem(index) {
			console.log('removing item');
			var data = @Html.Raw(Json.Encode(Model));
			$.ajax({
				url: '@Url.Action("DisplayItem")',
				data: data,
				success: function (response) {
					$('.items').html(response);
					setDatePickers();
				}
			});
		}
	</script>
}

<script>
	@{
		IList<ExpenseItem> addedModel = new List<ExpenseItem>();
		foreach (ExpenseItem expenseItem in Model)
		{
			addedModel.Add(expenseItem);
		}
		addedModel.Add(new ExpenseItem());
	}
	function addItem() {
		console.log('adding item');
		var data = @Html.Raw(Json.Encode(addedModel.ToArray()));
		console.log(data);
		$.ajax({
			url: '@Url.Action("DisplayItem")',
			data: data,
			success: function (response) {
				$('.items').html(response);
				setDatePickers();
			}
		});
	}
</script>