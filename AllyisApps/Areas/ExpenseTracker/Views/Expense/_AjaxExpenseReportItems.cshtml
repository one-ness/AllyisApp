@using AllyisApps.ViewModels.ExpenseTracker.Expense
@using AllyisApps.Services
@using AllyisApps.DBModel.Finance

@model ExpenseCreateModel

@for (int i = 0; i < Model.Items.Count(); i++)
{
	int index = i;
	var item = Model.Items[i];
	if (String.IsNullOrEmpty(item.ExpenseItemName)) // sets default value to checked if item is new
	{
		item.IsBillableToCustomer = true;
	}
	string dateVal = "";
	string amountVal = "";
	if (Convert.ToDateTime(item.TransactionDate).ToShortDateString() != "1/1/0001")
	{
		dateVal = Convert.ToDateTime(item.TransactionDate).ToShortDateString();
	}
	if (item.Amount != 0)
	{
		amountVal = item.Amount.ToString();
	}
	string dateName = String.Format("[{0}].TransactionDate", i);
	string nameName = String.Format("[{0}].ExpenseItemName", i);
	string amountName = String.Format("[{0}].Amount", i);
	string checkboxName = String.Format("[{0}].IsBillableToCustomer", i);
	string itemIdName = String.Format("[{0}].ExpenseItemId", i);
	string descriptionName = String.Format("[{0}].ItemDescription", i);
	string accountName = String.Format("[{0}].Account", i);
	List<SelectListItem> accountList = new List<SelectListItem>();
	foreach (AccountDBEntity entity in Model.AccountList)
	{
		accountList.Add(new SelectListItem()
		{
			Value = entity.AccountId.ToString(),
			Text = entity.AccountName
		});
	}
	<div class="item-div" style="margin: 10px; margin-bottom: 0px;">
		@Html.HiddenFor(m => m.Items[i].ExpenseItemId, new { name = itemIdName, Value = Model.Items[i].ExpenseItemId})
		@Html.TextBoxFor(m => m.Items[i].TransactionDate, new { @class = "datepicker form-control item-control", name = dateName, Value = dateVal, placeholder = "Date", style = "display: inline-block; width: 150px" })
		<div class="amount-div form-control item-control" style="display: inline-block; width: 150px;">$
			@Html.TextBoxFor(m => m.Items[i].Amount, new { @class = "amount-textbox", name = amountName, Value = amountVal, placeholder = "Amount", style = "display: inline-block; width: 100px; border: 0px; margin-top: -1px;" })
		</div>
		@Html.TextBoxFor(m => m.Items[i].ItemDiscription, new { @class = "form-control item-control", name = descriptionName, Value = Model.Items[i].ItemDiscription, placeholder = "Description", style = "display: inline-block; width: 300px" })
		<label>Account</label>
		@Html.DropDownListFor(m => m.Items[i].AccountId, accountList, new { @class = "form-control item-control", name = accountName, style = "display: inline-block; width: 150px", Value = Model.Items[i].AccountId })
		<label>Billable to Customer</label>
		@Html.CheckBoxFor(m => m.Items[i].IsBillableToCustomer, new { @class = "form-control item-control", name = checkboxName, style = "width: 14px; height: 14px; display: inline-block; margin: 10px; vertical-align: middle;" })
		<a class="btn btn-danger btn-fa hidden-create"
		   onclick="removeItem(@index)"
		   style="float: right; width: 34px; color: white !important; border-color: #d43f3a !important; border-radius: 0px; margin-right: 0px;"
		   area-label="Close">
			<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
		</a>
	</div>
}
<a class="addItem btn btn-fa hidden-create add-button">
	<span class="glyphicon glyphicon-plus"></span>
</a>
<div style="clear:both"></div>

<script>
	$('.addItem').on('click', function () {
		$('.items').load('@Url.Action("AddItem")', @Html.Raw(Json.Encode(@Model)), setDatePickers);
	});
	function removeItem(index) {
		$('.items').load('@Url.Action("RemoveItem")', { model: @Html.Raw(Json.Encode(@Model)), index: index });
	}
	$('.amount-textbox').focus(function () {
		console.log('redirecting focus');
		$(this).parent().css('border-color: #ff0000;')
	})
</script>