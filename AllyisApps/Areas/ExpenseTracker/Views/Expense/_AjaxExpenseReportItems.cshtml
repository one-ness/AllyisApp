﻿@using AllyisApps.Areas.ExpenseTracker.Controllers
@using AllyisApps.Areas.ExpenseTracker.ViewModels.Expense
@using AllyisApps.DBModel.Finance
@using AllyisApps.Services
@using AllyisApps.ViewModels.ExpenseTracker.Expense
@using HtmlHelpers.BeginCollectionItem
@model ExpenseItemModel
@{
	if (this.ViewContext.FormContext == null)
	{
		this.ViewContext.FormContext = new FormContext();
	}
}
<tr id="@String.Format("item-input_{0}", Model.Item.Index)" class="item-div" style="margin: 10px; margin-bottom: 0px;">
	@using (Html.BeginCollectionItem("model.Items"))
	{
		if (String.IsNullOrEmpty(Model.Item.ItemDescription)) // sets default value to checked if item is new
		{
			Model.Item.IsBillableToCustomer = false;
		}
		string amountVal = Model.Item.Amount == 0 ? "" : String.Format("{0:0.00}", Model.Item.Amount);
		string dateVal = Convert.ToDateTime(Model.Item.TransactionDate).ToShortDateString() == "1/1/0001" ? "" : Convert.ToDateTime(Model.Item.TransactionDate).ToShortDateString();
		string itemIdName = String.Format("[{0}].ExpenseItemId", Model.Item.Index);
		string accountName = String.Format("[{0}].AccountId", Model.Item.Index);
		var selection = Model.AccountList.ToArray().Where(a => a.AccountId == Model.Item.AccountId);
		var selected = selection.Count() == 0 ? Model.AccountList.First() : selection.First();
		var selectList = new SelectList(Model.AccountList, "AccountId", "AccountName", selected.AccountId);

		<td>
			@Html.HiddenFor(m => m.Item.ExpenseItemId)
			@Html.TextBoxFor(m => m.Item.TransactionDate, new { @class = "updatable datepicker form-control item-control req", Value = dateVal, style = "display: inline-block; width: 150px" })
			@Html.ValidationMessageFor(m => m.Item.TransactionDate)
		</td>
		<td>
			<div class="amount-div form-control item-control" style="display: inline-block; width: 150px;">
				$
				@Html.TextBoxFor(m => m.Item.Amount, new { @class = "updatable amount-textbox req", Value = amountVal, style = "display: inline-block; width: 100px; border: 0px; margin-top: -1px; margin-bottom: 6px;" })
				@Html.ValidationMessageFor(m => m.Item.Amount)
			</div>
		</td>
		<td>
			@Html.TextBoxFor(m => m.Item.ItemDescription, new { @class = "updatable form-control item-control req", Value = Model.Item.ItemDescription, style = "display: inline-block; width: 300px" })
			@Html.ValidationMessageFor(m => m.Item.ItemDescription)
		</td>
		<td>
			@Html.DropDownListFor(m => m.Item.AccountId, selectList, new { @class = "updatable form-control item-control", name = accountName, style = "display: inline-block; width: 150px", Value = Model.Item.AccountId })
		</td>
		<td>
			@Html.CheckBoxFor(m => m.Item.IsBillableToCustomer, new { @class = "updatable form-control item-control check-off", style = "width: 14px; height: 14px; display: inline-block; margin: 10px; vertical-align: middle;" })
		</td>
		<td>
			<a class="btn btn-danger btn-fa hidden-create"
			   onclick="removeItem(@Model.Item.Index)"
			   style="float: right; width: 34px; color: white !important; border-color: #d43f3a !important; border-radius: 0px; margin-right: 0px;"
			   area-label="Close">
				<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
			</a>
		</td>
	}
</tr>