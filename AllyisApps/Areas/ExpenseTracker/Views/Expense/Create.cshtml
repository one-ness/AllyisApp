@using AllyisApps.Areas.ExpenseTracker.ViewModels.Expense;
@using AllyisApps.Core;
@using AllyisApps.Lib;
@using AllyisApps.Services;
@using AllyisApps.Services.Expense;
@using AllyisApps.ViewModels.ExpenseTracker.Expense;
@model ExpenseCreateModel
@{
	ViewBag.Title = Strings.Report;
	Layout = "~/Areas/ExpenseTracker/Views/Shared/_Layout.cshtml";
	string submitAction = Model.Report == null ? "CreateReport" : "UpdateReport";
	string submitName = Model.Report == null ? "Create" : "Update";
	int fileIndex = 0;
	int itemIndex = 0;
}
@Scripts.Render("~/bundles/jquery")
@{ Html.EnableClientValidation(); }
@using (Html.BeginForm(submitAction, ControllerConstants.Expense, FormMethod.Post, htmlAttributes: new { @id = "reportForm", enctype = "multipart/form-data" }))
{
	<div class="panel panel-info" style="background-color: #f5f5f5; float: right; width: 380px; position: relative; z-index: 10">
		<div class="panel-heading"><span class="panel-title">Attachments</span></div>
		<div class="files" id="files">
			@{
				List<string> fileNames = Model.Report == null ? new List<string>() : AzureFiles.GetReportAttachments(Model.Report.ExpenseReportId);
				if (Model.Files == null)
				{
					Model.Files = new List<HttpPostedFileBase>();
				}
				foreach (string name in fileNames)
				{
					Tuple<Stream, string, string> tup = AzureFiles.GetFile(Model.Report.ExpenseReportId, name);
					HttpPostedFileBase file = new ExpenseFile(tup.Item1, tup.Item2, tup.Item3);
					Model.Files.Add(file);
				}
				for (int i = 0; i < Model.Files.Count; i++)
				{
					var file = new ExpenseFileModel()
					{
						FileName = Model.Files[i].FileName,
						ContentType = Model.Files[i].ContentType,
						Stream = Model.Files[i].InputStream,
						Index = i,
						ReportId = Model.Report.ExpenseReportId
					};
					fileIndex += 1;
					Html.RenderAction("DisplayFileLink", file);
				}
				if (Model.Files.Count < 1)
				{
					var file = new ExpenseFile(null, "", "");
					var model = new ExpenseFileModel()
					{
						FileName = file.FileName,
						ContentType = file.ContentType,
						Stream = file.InputStream,
						Index = fileIndex
					};
					fileIndex += 1;
					Html.RenderAction("DisplayFile", model);
				}
			}
		</div>
		<a class="btn btn-fa hidden-create add-button"
		   onclick="addFile()">
			<span class="glyphicon glyphicon-plus"></span>
		</a>
	</div>

	<div class="col-md-6" style="float: left;">
		@{
			var statusList = Enum.GetValues(typeof(ExpenseStatusEnum)).Cast<ExpenseStatusEnum>().Select(v => new SelectListItem
			{
				Text = v.ToString(),
				Value = ((int)v).ToString()
			}).ToList();

			int reportId = Model.Report == null ? -1 : Model.Report.ExpenseReportId;
			if (Model.Report == null)
			{
				Model.Report = new ExpenseReport();
				Model.Items = new List<ExpenseItem>();
			}
		}
		@Html.HiddenFor(m => m.Report.ExpenseReportId, new { Name = "model.Report.ExpenseReportId" })
		@Html.HiddenFor(m => m.CurrentUser, new { Name = "model.CurrentUser" })
		@Html.HiddenFor(m => m.SubscriptionId, new { Name = "model.SubscriptionId" })
		<div class="form-group">
			@Html.ReqLabelFor(m => m.Report.ReportTitle, "Report Name")
			@Html.TextBoxFor(m => m.Report.ReportTitle, new { Name = "model.Report.ReportTitle", @class = "form-control" })
			@Html.ValidationMessageFor(m => m.Report.ReportTitle, "", new { data_valmsg_for = "model.Report.ReportTitle" })
		</div>
		<div class="form-group">
			@Html.ReqLabelFor(m => m.Report.BusinessJustification, "Business Justification")
			@Html.TextAreaFor(m => m.Report.BusinessJustification, new { Name = "model.Report.BusinessJustification", @class = "form-control", rows = "3", style = "resize: none;", })
			@Html.ValidationMessageFor(m => m.Report.BusinessJustification, "", new { data_valmsg_for = "model.Report.BusinessJustification" })
		</div>
		<br>
	</div>

	<div style="clear: both;">
		@{
			if (Model.Items.Count == 0)
			{
				Model.Items.Add(new ExpenseItem());
			}

			<div class="items">
				<table class="table table-hover">
					<thead>
						<tr class="double-bottom-border">
							<th style="width: 10%;">
								@Html.ReqLabelFor(m => new ExpenseItem().TransactionDate, "Transaction Date")
							</th>
							<th style="width: 10%;">
								@Html.ReqLabelFor(m => new ExpenseItem().Amount, "Amount")
							</th>
							<th style="width: 10%;">
								@Html.ReqLabelFor(m => new ExpenseItem().ItemDescription, "Description")
							</th>
							<th style="width: 10%;">Account</th>
							<th style="width: 50%;">Billable to Customer</th>
							<th style="width: 10%;"></th>
						</tr>
					</thead>
					<tbody class="item-container">
						@foreach (ExpenseItem item in Model.Items)
						{
							item.Index = itemIndex;
							Html.RenderPartial("_AjaxExpenseReportItems", item);
							itemIndex += 1;
						}
						<tr class="final-row">
							<td colspan="6">
								<a class="addItem btn btn-fa hidden-create add-button"
								   onclick="addItem();"
								   style="margin: 0px;">
									<span class="glyphicon glyphicon-plus"></span>
								</a>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		}
		<div style="clear:both"></div>
		<div class="row pull-right">
			<div class="col-xs-12">
				<div>
					@Html.ActionLink("Cancel", "Index", new { }, new { @class = "btn btn-reject", type = "button", name = "viewDataButton", value = "Cancel", title = "Export Excel Expense Tracker entries", style = "display: inline-block; color: white !important; border-color: maroon !important;" })
					<input class="btn btn-primary" type="submit" name="model.submitType" value="Save Draft" title="Export Excel Expense Tracker entries" style="display: inline-block;" />
					<input class="btn btn-primary" type="submit" name="model.submitType" value="Submit" title="Export Excel Expense Tracker entries" style="display: inline-block;" />
				</div>
			</div>
		</div>
	</div>
			}
@section css
			{
	<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />
	<link rel="stylesheet" type="text/css" href="~/Content/jquery.comiseo.daterangepicker.css" />
}
@section scripts
			{
	@*Date range picker dependencies:*@
	@Scripts.Render("~/bundles/jqueryui")
	@Scripts.Render("~/bundles/moment")
	<script src="~/Scripts/allyis-pages-with-filter.js" type="text/javascript"></script>
	@Scripts.Render("~/bundles/daterangepicker")
	<script type="text/javascript">
		pwf.setPageLimit(15);
		pwf.setPageButtonLimit(10);
		pwf.setRowClass("previewRow");

		var file_index = @fileIndex;
		var item_index = @itemIndex;

		function addFile() {
			var data = @Html.Raw(Json.Encode(new ExpenseFileModel() { Index = -1 }));
			data.Index = file_index;
			$.ajax({
				url: '@Url.Action("DisplayFile")',
				data: data,
				type: 'POST',
				success: function (response) {
					$('.files').append(response);
				}
			});
			file_index += 1;
		}

		function removeFile(index) {
			$('#file-input_' + index).remove();
		}

		function setDatePickers() {
			$('.datepicker').each(function () {
				$(this).datepicker({
					changeMonth: true,
					changeYear: true
				});
			});
		}

		function addItem() {
			var url = '@Url.Action("AddItem", new { index = -1 })';
			url = url.replace('-1', item_index);
			$.ajax({
				url: url,
				success: function (response) {
					console.log(response);
					$('table tr.final-row').before(response);
					setDatePickers();

					$("form").removeData("validator");
					$("form").removeData("unobtrusiveValidation");
					$.validator.unobtrusive.parse("form");

					item_index += 1;
				}
			});
		}

		function removeItem(index) {
			$('#item-input_' + index).remove();

			$("form").removeData("validator");
			$("form").removeData("unobtrusiveValidation");
			$.validator.unobtrusive.parse("form");
		}

		setDatePickers();
	</script>
}