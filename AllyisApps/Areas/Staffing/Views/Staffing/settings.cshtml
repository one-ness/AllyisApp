@model AllyisApps.Areas.StaffingManager.ViewModels.Staffing.StaffingSettingsViewModel
@{
	Model.LocalizedStates = new Dictionary<string, string>();
	//Model.newCustomer = new AllyisApps.Services.Customer();
	//Model.newCustomer.OrganizationId = Model.organizationId;
	ViewBag.Title = Strings.Settings;
	DisplayHints.LayoutThemeBundle = "~/Content/StaffingManager";
	DisplayHints.BreadcrumbNavPartialLocation = "~/Areas/TimeTracker/Views/Shared/_BreadcrumbNavPartial.cshtml";
	ViewData["UserId"] = Model.userId;
	ViewData["SubscriptionId"] = Model.subscriptionId;
	ViewData["SubscriptionName"] = Model.subscriptionName;
}

<div>
	<div class="row">
		<div class="col-md-2 sm-control-width">
			<div class="panel-heading">
				<h1 class="panel-title">@Strings.EmploymentTypes</h1>
			</div>
			<div class="panel panel-info">
				<div id="Types">
					<table class="table table-condensed">
						<thead>
							<tr>
								<th>@Strings.TypeName</th>
								<th><span class="pull-right">@Strings.Delete</span></th>
							</tr>
						</thead>
						@foreach (dynamic type in Model.employmentTypes)
						{
							<tr>
								@{
									string _typeName = Strings.ResourceManager.GetString(type.EmploymentTypeName.Replace(" ", string.Empty)) ?? type.EmploymentTypeName;
								}
								<td>@_typeName</td>
								<td>
									<a href="javascript: void(0);" class="text-muted" title="Delete Employment Type"
									   onclick='deleteEmploymentType("@type.EmploymentTypeId", @Model.userId, @Model.organizationId, @Model.subscriptionId)'><span class="fa fa-fw fa-remove text-danger pull-right"></span></a>
								</td>
							</tr>
									}
						<tr>
							@using (Html.BeginForm(ActionConstants.CreateEmploymentType, ControllerConstants.Staffing, new { subscriptionId = Model.subscriptionId, orgId = Model.organizationId }, FormMethod.Post))
							{
								@Html.AntiForgeryToken();
								@Html.HiddenFor(m => m.subscriptionId)
								<td><input type="text" name="employmentType" class="form-control" required /></td>
								<td><span class="pull-right"></span></td>
								<td><input class="btn btn-primary" type="submit" value="@Strings.Add" /></td>
							}
						</tr>
					</table>
				</div>
			</div>
		</div>

			<div class="col-md-3">
				<div class="panel-heading">
					<h1 class="panel-title">@Strings.PositionStatuses</h1>
				</div>
				<div class="panel panel-info">
					<div id="Statuses">
						<table class="table table-condensed">
							<thead>
								<tr>
									<th>@Strings.StatusName</th>
									<th><span class="pull-right">@Strings.Delete</span></th>
									<th><span class="pull-right">@Strings.Default</span></th>
								</tr>
							</thead>
							@foreach (dynamic status in Model.positionStatuses)
							{
								<tr>
									@{
										string _statusName = Strings.ResourceManager.GetString(status.PositionStatusName.Replace(" ", string.Empty)) ?? status.PositionStatusName;
									}
									<td>@_statusName</td>
									<td>
										<a href="javascript: void(0);" class="text-muted" title="Delete Position Status"
										   onclick='deletePositionStatus("@status.PositionStatusId", @Model.userId, @Model.organizationId, @Model.subscriptionId)'><span class="fa fa-fw fa-remove text-danger pull-right"></span></a>
									</td>
									<td>
										@if (status.PositionStatusId == Model.defaultPositionStatus)
										{
											<input type="radio" name="statusRadio" class="pull-right" checked="checked" value="status.PositionStatusId" onclick="updateDefaultStatus(@Model.organizationId, @status.PositionStatusId, @Model.subscriptionId)">
										}
										else
										{
											<input type="radio" name="statusRadio" class="pull-right" value="status.PositionStatusId" onclick="updateDefaultStatus(@Model.organizationId, @status.PositionStatusId, @Model.subscriptionId)">
										}
									</td>
								</tr>
							}
						<tr>
							@using (Html.BeginForm(ActionConstants.CreatePositionStatus, ControllerConstants.Staffing, new { subscriptionId = Model.subscriptionId, orgId = Model.organizationId }, FormMethod.Post))
							{
								@Html.AntiForgeryToken();
								@Html.HiddenFor(m => m.subscriptionId)
								<td><input type="text" name="positionStatus" class="form-control" required /></td>
								<td><span class="pull-right"></span></td>
								<td><input class="btn btn-primary" type="submit" value="@Strings.Add" /></td>
							}
						</tr>
					</table>
				</div>
			</div>

			<div class="panel-heading">
				<h1 class="panel-title">@Strings.ApplicationStatuses</h1>
			</div>
			<div class="panel panel-info">
				<div id="AppStatuses">
					<table class="table table-condensed">
						<thead>
							<tr>
								<th>@Strings.StatusName</th>
								<th><span class="pull-right">@Strings.Delete</span></th>
								<th><span class="pull-right">@Strings.Default</span></th>
							</tr>
						</thead>
						@foreach (dynamic status in Model.applicationStatuses)
						{
							<tr>
								@{
									string _statusName = Strings.ResourceManager.GetString(status.ApplicationStatusName.Replace(" ", string.Empty)) ?? status.ApplicationStatusName;
								}
								<td>@_statusName</td>
								<td>
									<a href="javascript: void(0);" class="text-muted" title="Delete Position Status"
										onclick='deletePositionStatus("@status.ApplicationStatusId", @Model.userId, @Model.organizationId, @Model.subscriptionId)'><span class="fa fa-fw fa-remove text-danger pull-right"></span></a>
								</td>
								<td>
									@if (status.ApplicationStatusId == Model.defaultApplicationStatus)
									{
										<input type="radio" name="statusRadio" class="pull-right" checked="checked" value="status.PositionStatusId" onclick="updateDefaultStatus(@Model.organizationId, @status.ApplicationStatusId, @Model.subscriptionId)">
									}
									else
									{
										<input type="radio" name="statusRadio" class="pull-right" value="status.PositionStatusId" onclick="updateDefaultStatus(@Model.organizationId, @status.ApplicationStatusId, @Model.subscriptionId)">
									}
								</td>
							</tr>
									}
						<tr>
							@* TODO: Implement CreateApplicationStatus *@
							@using (Html.BeginForm(ActionConstants.CreateApplicationStatus, ControllerConstants.Staffing, new {subscriptionId = Model.subscriptionId, orgId = Model.organizationId}, FormMethod.Post))
							{
								@Html.AntiForgeryToken()
								;
								@Html.HiddenFor(m => m.subscriptionId)
								<td><input type="text" name="positionStatus" class="form-control" required/></td>
								<td><span class="pull-right"></span></td>
								<td><input class="btn btn-primary" type="submit" value="@Strings.Add"/></td>
							}
						</tr>
					</table>
					</div>
				</div>
			</div>

		<div class="col-md-2 sm-control-width">
			<div class="panel-heading">
				<h1 class="panel-title">@Strings.PositionLevels</h1>
			</div>
			<div class="panel panel-info">
				<div id="Levels">
					<table class="table table-condensed">
						<thead>
							<tr>
								<th>@Strings.LevelName</th>
								<th><span class="pull-right">@Strings.Delete</span></th>
							</tr>
						</thead>
						@foreach (dynamic level in Model.positionLevels)
						{
							<tr>
								@{
									string _levelName = Strings.ResourceManager.GetString(level.PositionLevelName.Replace(" ", string.Empty)) ?? level.PositionLevelName;
								}
								<td>@_levelName</td>
								<td>
									<a href="javascript: void(0);" class="text-muted" title="Delete Position Level"
									   onclick='deletePositionLevel("@level.PositionLevelId", @Model.userId, @Model.organizationId, @Model.subscriptionId)'><span class="fa fa-fw fa-remove text-danger pull-right"></span></a>
								</td>
							</tr>
									}
						<tr>
							@using (Html.BeginForm(ActionConstants.CreatePositionLevel, ControllerConstants.Staffing, new { subscriptionId = Model.subscriptionId, orgId = Model.organizationId }, FormMethod.Post))
							{
								@Html.AntiForgeryToken();
								@Html.HiddenFor(m => m.subscriptionId)
								<td><input type="text" name="positionLevel" class="form-control" required /></td>
								<td><span class="pull-right"></span></td>
								<td><input class="btn btn-primary" type="submit" value="@Strings.Add" /></td>
							}
						</tr>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

@section scripts{
	@Scripts.Render("~/bundles/jqueryui")
	@Scripts.Render("~/bundles/moment")
	<script type="text/javascript">
		var currentDay = "";
		var ddlCountriesId = "@ViewConstants.DdlCountriesId";
		var preserveState = '@(Model.PositionAddress != null && Model.PositionAddress.State != null ? (States.ResourceManager.GetString(Model.PositionAddress.State) ?? Model.PositionAddress.State) : "")';
		var dropdownempty = "@Strings.DropDownEmpty";
		var ddlStatesId = "@ViewConstants.DdlStatesId";
		var ddlStatesOptionsId = "@ViewConstants.DdlStatesOptionsId";
		var getStatesUrl = "/Home/GetStates";
		var selectedCountryCode = "@(Model.PositionAddress != null ? Model.PositionAddress.SelectedCountryCode : null)";
		var selectedStateId = "@(Model.PositionAddress != null ? Model.PositionAddress.SelectedStateId : null)";

		function updateDefaultStatus(orgId, PositionStatusId, subscriptionId) {
			$.ajax({
				url: '@Url.Action(ActionConstants.UpdatePositionStatus, ControllerConstants.Staffing)',
				data: { organizationId: orgId, positionStatusId: PositionStatusId, subscriptionId: subscriptionId }
			})
			window.location.reload();
		}

		deletePositionLevelUrl = "Url.Action(ActionConstants.DeletePositionLevel, ControllerConstants.Staffing, new { ";
		deletePositionStatusUrl = "Url.Action(ActionConstants.DeletePositionStatus, ControllerConstants.Staffing, new { ";
		deleteEmploymentTypeUrl = "Url.Action(ActionConstants.DeleteEmploymentType, ControllerConstants.Staffing, new { ";

		function deletePositionLevel(positionLevel, userId, orgId, subscriptionId) {
			$.ajax({
				url: '@Url.Action(ActionConstants.DeletePositionLevel, ControllerConstants.Staffing)',
				data: { positionLevelId: positionLevel, userId: userId, orgId: orgId, subscriptionId: subscriptionId }
			});
			window.location.reload();
		}

		function deletePositionStatus(positionStatus, userId, orgId, subscriptionId) {
			$.ajax({
				url: '@Url.Action(ActionConstants.DeletePositionStatus, ControllerConstants.Staffing)',
				data: { positionStatusId: positionStatus, userId: userId, orgId: orgId, subscriptionId: subscriptionId }
			});
			window.location.reload();
		}

		function deleteEmploymentType(EmploymentType, userId, orgId, subscriptionId) {
			$.ajax({
				url: '@Url.Action(ActionConstants.DeleteEmploymentType, ControllerConstants.Staffing)',
				data: { employmentTypeId: EmploymentType, userId: userId, orgId: orgId, subscriptionId: subscriptionId }
			});
			window.location.reload();
		}
	</script>
	@Scripts.Render("~/bundles/UpdateStateDDL")
}