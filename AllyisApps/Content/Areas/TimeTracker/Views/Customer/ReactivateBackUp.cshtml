@*@using AllyisApps.ViewModels.TimeTracker.Customer;
@using AllyisApps.ViewModels.TimeTracker.Project;
@using AllyisApps.Services;

@model ManageCustomerViewModel

@{
    DisplayHints.PageBodyId = "tt-customer";
    ViewBag.Title = Strings.CustomerList;
    ViewData["IsManager"] = Model.canEdit;
    Layout = "~/Areas/TimeTracker/Views/Shared/_Layout.cshtml";
    var customerCount = 0;
    var empty = new EditCustomerInfoViewModel() { OrganizationId = Model.OrganizationId };
    var emptyProj = new EditProjectViewModel();
    var createButtonClass = !Model.canEdit ? "invisible" : "";
}

@if (Model.Customers.Count() > 0)
{
    <div class="panel-group customer-list" id="customer-panel" role="tablist">
        @foreach (CustomerProjectViewModel customer in Model.Customers)
                {
                    var collapseTarget = string.Format("customerNumber{0}", customer.CustomerInfo.CustomerId);
                    var customerDetailsTarget = string.Format("custDetails{0}", customerCount);
                    var projectCount = customer.Projects.Count();
                    var projectCountLabel = projectCount == 1 ? "project" : "projects";
            <div class="panel panel-customer">
                <div class="panel-heading" role="tab">
                    <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-target="#@collapseTarget" data-keyboard="true" href="#">
                        <h4 class="panel-title">
                            <i class="chevron"></i>
                            <span class="searchable">@customer.CustomerInfo.Name</span>
                            <span class="small text-muted">(@projectCount @projectCountLabel)</span>
                        </h4>
                    </a>
                    <a href="@Url.Action(ActionConstants.ReactivateCustomer, ControllerConstants.Customer, new { id = customer.CustomerInfo.CustomerId })" class="btn btn-default @createButtonClass">@Strings.Reactivate <i class="fa fa-plus"></i></a>
                </div>
                <div id="@collapseTarget" class="panel-collapse search-expand collapse panel-two-table-wrap" role="tabpanel">
                    <div style="width: 100%">
                        <div class="list-group list-group-with-buttons project-list">
                            @foreach (Project project in customer.Projects)
                            {
                                var projectID = string.Format("project{0}", project.ProjectId);
                                <div class="list-group-item" id="@projectID">
                                    <a class="accordion-toggle collapsed" href="@Url.Action(ActionConstants.Details, ControllerConstants.Project, new { projectId = project.ProjectId })">

                                        <span class="searchable projectname">@project.Name</span>
                                    </a>*@



                                    @*// This list group scheme is not possible. Review alternatives and then uncomment.*@



                                    @*@if (Model.canEdit)
                                    {
                                        <a href="@Url.Action(ActionConstants.Edit, ControllerConstants.Project, new { id = project.ProjectId })" class="pull-right"><i class="fa fa-lg fa-fw fa-cog"></i></a>
                                        <a href="@Url.Action(ActionConstants.Delete, ControllerConstants.Project, new { id = project.ProjectId })" class="pull-right" style="margin-left:2px;" onclick="return confirm('Are you sure you wish to Delete the project @project.Name?')">
                                            <i class="fa fa-times"></i>
                                        </a>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>customerCount += 1;
                }
    </div>

}*@

@*@using AllyisApps.ViewModels.TimeTracker.Customer;
@using AllyisApps.ViewModels.TimeTracker.Project;
@using AllyisApps.Services;

@model ManageCustomerViewModel

@{
    AjaxOptions ao = new AjaxOptions
    {
        UpdateTargetId = "OrgEditWrap"
    };
    DisplayHints.PageBodyId = "tt-customer";
    ViewBag.Title = "Inactive Customers and Projects";
    ViewData["IsManager"] = Model.canEdit;
    Layout = "~/Areas/TimeTracker/Views/Shared/_Layout.cshtml";
    //var customerCount = 0;
    string action = ViewBag.Action;
    var empty = new EditCustomerInfoViewModel() { OrganizationId = Model.OrganizationId };
    var emptyProj = new EditProjectViewModel();
    var createButtonClass = !Model.canEdit ? "invisible" : "";
}

<div>
    <div>
        <div>
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @{ var customers = new List<Customer>();
                if (Model.Customers.Count() > 0)
                {
                    var _customersprojects = Model.Customers.ToList();

                    foreach (var customer in _customersprojects)
                    {
                        customers.Add(customer.CustomerInfo);
                    }
                }
                <div id="swapper-ui" class="swapper-ui">
                    <div class="left">
                        <label>@*Strings.OffProjInactive Customers</label>
                        @*<input type="text" placeholder=@AllyisApps.Resources.TimeTracker.Views.Project.Strings.SearchPlaceholder class="form-control" />*@
                        @*
                            Create a multi-select list that is populated from SubscriptionUsers
                            Uses Javascript and the add/remove buttons to add and remove items from this listbox
                        *@
                        @*@Html.ListBoxFor(m => customers, new SelectList(customers, "CustomerId", "Name"), new { @name = "customers", @id = "inactive-customers", @class = "filter-list" })
                    </div>
                    <div class="actions">
                        <a href="javascript: hello()" class="btn btn-default move-in">
                            Show Projects <i class="fa fa-lg fa-arrow-right"></i>
                        </a>

                    </div>
                    <div class="right">*@
                        @*<label>@Strings.OnProjInactive Projects</label>
                        @*<input type="text" placeholder="@AllyisApps.Resources.TimeTracker.Views.Project.Strings.SearchPlaceholder" class="form-control" />*@
                        @*
                            Create a multi-select list that is populated from ProjectUsers and binds all selected items to SelectedProjectUserIds
                            On Submit, all items in this list become selected, so the whole list is bound to the model
                            Items are added and removed from this list via Javascript and the add / remove buttons
                        *@
                        @{

                            @*var _customersprojectstwo = Model.Customers.ToList();
                            var projects = new List<Project>();
                            @*int isselected = @:hello();*@
                        @*foreach (var customer in _customersprojectstwo)
                        {
                            foreach (var proj in customer.Projects)
                            {
                                //if (isselected == proj.CustomerId)
                                projects.Add(proj);
                            }
                        }
                        }
                        }

                        @Html.ListBoxFor(m => projects, new SelectList(projects, "CustomerId", "Name")@*new MultiSelectList(Model.ProjectUsers, "UserId", "Name"), new { @name = "Included", @id = "included-users", @class = "filter-list", @Multiple = "multiple" }*@)
                    @*</div>
                </div>*@
            }
        @*</div>
    </div><!-- /.modal-content -->
</div><!-- /.modal-dialog -->

@section scripts {
    <script type="text/javascript">
        function hello() {
            var customers = document.getElementById("inactive-customers");
            var selectedCustomers = customers.options[customers.selectedIndex].value;
            return selectedCustomers;
        }

        $('#inactive-customers option').on('click', function () {

        })
    </script>
}*@


